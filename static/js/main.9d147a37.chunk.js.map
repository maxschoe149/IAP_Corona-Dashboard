{"version":3,"sources":["components/UpdatePanel.jsx","components/ContextMenuButton.jsx","components/TopRow.jsx","components/Legend.jsx","components/Newsticker.jsx","components/NewstickerLanguage.jsx","components/InfoPanel.jsx","components/LoadingMap.jsx","components/CovidMap.jsx","components/MapSelectionButtons.jsx","entities/LegendItem.js","entities/LegendItems.js","tasks/LoadCountriesTask.js","App.js","reportWebVitals.js","index.js"],"names":["UpdatePanel","className","ContextMenuButton","style","width","height","float","TopRow","Legend","legendItems","items","map","item","backgroundColor","color","textAlign","textJustify","textColor","fontSize","title","Newsticker","langs","Tab","styled","button","active","NewstickerLanguage","useState","setActive","lang","onClick","InfoPanel","LoadingMap","display","justifyContent","alignItems","role","formatNumberWithPeriods","number","toString","replace","CovidMap","countries","MapContainer","zoom","center","GeoJSON","fillColor","weight","fillOpacity","data","onEachFeature","country","layer","options","properties","name","ADMIN","confirmedCases","confirmed","population","bindPopup","toFixed","views","MapSelectionButtons","overflow","view","LegendItem","isFor","this","cases","LoadCountriesTask","setState","mapCountries","features","load","i","mapCountry","covidCountry","find","iso3","ISO_A3","fatalities","recovered","incidentRate","peopleTested","peopleHospitalized","mortalityRate","Number","latest","deaths","setCountryColor","length","legendItem","App","setCountries","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d147a37.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./UpdatePanel.css\"\r\n\r\nconst date = 0;\r\n\r\nconst UpdatePanel = () => {\r\n    return (\r\n    <div className=\"panel\">\r\n        <h2>Last Update: <br/>{date}</h2>\r\n    </div>\r\n    );\r\n}\r\n \r\nexport default UpdatePanel;","import React from 'react';\r\n\r\nconst ContextMenuButton = () => {\r\n    return (\r\n        <div style={{width:\"10vw\", height:\"10vh\", float: \"left\"}}>\r\n            <p>B</p>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default ContextMenuButton;","import React from 'react';\r\nimport \"./TopRow.css\";\r\nimport UpdatePanel from \"./UpdatePanel\";\r\nimport ContextMenuButton from \"./ContextMenuButton\";\r\n\r\nconst TopRow = () => {\r\n    return (<div className=\"myRow\">\r\n        <div className=\"titleArea\">\r\n            <h1><b>Yet Another Corona Dashboard</b></h1>\r\n        </div>\r\n        <UpdatePanel/>\r\n        <ContextMenuButton/>\r\n    </div>);\r\n}\r\n \r\nexport default TopRow;","import React from 'react';\r\nimport \"./Legend.css\";\r\n\r\nconst Legend = (legendItems) => {\r\n    const items = legendItems.legendItems;\r\n    return (\r\n        <div className=\"Legend\">\r\n           {items.map((item) => (\r\n               <div key={item.title}\r\n                style ={{\r\n                    backgroundColor: item.color,\r\n                    textAlign: \"center\",\r\n                    textJustify: \"center\",\r\n                    height: \"5vh\",\r\n                    color: item.textColor,\r\n                    fontSize: \"calc(min(2vw,2vh))\"\r\n                }}\r\n               >\r\n                   <span>{item.title}</span>\r\n               </div>\r\n           ))}\r\n        </div>  \r\n    );\r\n}\r\n \r\nexport default Legend;","import React from 'react';\r\nimport \"./Newsticker.css\"\r\n\r\nconst Newsticker = () => {\r\n    return <div className=\"NewstickerStyle\">\r\n        Newsticker here\r\n        </div>;\r\n}\r\n \r\nexport default Newsticker;","import React, {useState} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst langs = [\"Deutsch\", \"English\"];\r\n\r\nconst Tab = styled.button`\r\n  padding: calc(min(1vh,1vw));\r\n  height: 10vh;\r\n  width: 50%;\r\n  cursor: pointer;\r\n  opacity: 0.6;\r\n  background: black;\r\n  color: white;\r\n  outline: 0;\r\n  border: 1px solid #222222;\r\n  border-top: 2px solid #222222;\r\n  font-size: calc(min(2vh,2vw));\r\n  ${({ active }) =>\r\n    active &&\r\n    `\r\n      border-top: 2px solid blue;\r\n      opacity: 1;\r\n    `}\r\n`;\r\n\r\nfunction NewstickerLanguage() {\r\n  const [active, setActive] = useState(langs[0])\r\n    return (\r\n      <div style={{height:\"10vh\", width:\"30vw\"}}>\r\n        {\r\n          langs.map(lang=>\r\n              <Tab\r\n                key={lang}\r\n                active={active === lang}\r\n                onClick={() => setActive(lang)}>\r\n                {lang}\r\n              </Tab>\r\n            )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default NewstickerLanguage;","import React from 'react';\r\nimport \"./InfoPanel.css\";\r\nimport Legend from \"./Legend\";\r\nimport Newsticker from \"./Newsticker\";\r\nimport NewstickerLanguage from \"./NewstickerLanguage\";\r\n\r\nconst InfoPanel = (legendItems) => {\r\n    return (\r\n        <div className=\"InfoStructure\">\r\n            <div className =\"Header\">\r\n                <h2>Legend</h2>\r\n            </div>\r\n            <Legend legendItems={legendItems.legendItems}/>\r\n            <div className = \"Header\">\r\n                <h2>Newsticker</h2>\r\n            </div>\r\n            <Newsticker/>\r\n            <NewstickerLanguage/>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default InfoPanel;","import React from 'react';\r\n\r\nconst LoadingMap = () => {\r\n    return (\r\n    <div\r\n        style={{\r\n            height: \"80vh\", \r\n            display: \"flex\", \r\n            justifyContent: \"center\", \r\n            alignItems: \"center\"\r\n        }}\r\n    >\r\n        <div className=\"spinner-grow text-secondary\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n    </div>);\r\n}\r\n \r\nexport default LoadingMap;","import React from 'react';\r\nimport {MapContainer, GeoJSON} from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"./CovidMap.css\";\r\n\r\nconst CovidMap = ({countries}) => {\r\n    const mapStyle = {\r\n        fillColor: \"white\",\r\n        weight: 1,\r\n        color: \"black\",\r\n        fillOpacity: 1,\r\n    };\r\n\r\n    const onEachCountry = (country, layer) => {\r\n        //Filling each Country with info/color. This has to change depending on the selected button.\r\n        layer.options.fillColor = country.properties.color;\r\n        const name = country.properties.ADMIN;\r\n        const confirmedCases = formatNumberWithPeriods(country.properties.confirmed);\r\n        const population = formatNumberWithPeriods(country.properties.population);\r\n        layer.bindPopup(\r\n                `${name}\r\n                <br/> Cases: ${confirmedCases}\r\n                <br/> Population: ${population} \r\n                <br/> Ratio: ${(country.properties.confirmed/country.properties.population * 100).toFixed(3)} %\r\n            `\r\n            );\r\n    };\r\n\r\n    return <MapContainer zoom={2.5} center={[45, 10]}>\r\n        <GeoJSON style={mapStyle} data={countries} onEachFeature={onEachCountry}/>\r\n    </MapContainer>;\r\n};\r\n\r\n function formatNumberWithPeriods (number) {\r\n   return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n};\r\n\r\n \r\nexport default CovidMap;","import React, {useState} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst views = [\"Cumulative Cases\", \"Active Cases\", \"7-Day-Incedence\", \"ICU-Occupancy\", \"Cumulative Fatalities\", \"Testing Rate\", \"Vaccinated Population\"];\r\n\r\nconst Tab = styled.button`\r\n  padding: calc(min(0.8vh,0.8vw));\r\n  height: 10vh;\r\n  width: 10vw;\r\n  cursor: pointer;\r\n  opacity: 0.6;\r\n  background: black;\r\n  color: white;\r\n  outline: 0;\r\n  border: 1px solid #222222;\r\n  border-top: 2px solid #222222;\r\n  float: left;\r\n  font-size: calc(min(1.6vh,1.6vw));\r\n  ${({ active }) =>\r\n    active &&\r\n    `\r\n      border-top: 2px solid blue;\r\n      opacity: 1;\r\n    `}\r\n`;\r\n\r\nfunction MapSelectionButtons() {\r\n  const [active, setActive] = useState(views[0])\r\n    return (\r\n      <div style={{height:\"10vh\", width:\"70vw\", overflow:\"hidden\"}}>\r\n        {\r\n          views.map(view=>\r\n              <Tab\r\n                key={view}\r\n                active={active === view}\r\n                onClick={() => setActive(view)}>\r\n                <p>{view}</p>\r\n              </Tab>\r\n            )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default MapSelectionButtons;","class LegendItem{\r\n    constructor(title, color, isFor, textColor){\r\n        this.title = title;\r\n        this.color = color;\r\n        this.isFor = isFor;\r\n        this.textColor = textColor != null ? textColor : \"black\";\r\n    }\r\n}\r\n\r\nexport default LegendItem;","import LegendItem from \"./LegendItem\";\r\n\r\nconst legendItems = [\r\n    new LegendItem(\r\n        \"5.000.000+\",\r\n        \"#330000\",\r\n        (cases) => cases >= 5_000_000,\r\n        \"white\"\r\n    ),\r\n    new LegendItem(\r\n        \"2.500.000 - 4.999.999\",\r\n        \"#660000\",\r\n        (cases) => cases >= 2_500_000 && cases < 5_000_000,\r\n        \"white\"\r\n    ),\r\n    new LegendItem(\r\n        \"1.000.000 - 2.499.999\",\r\n        \"#990000\",\r\n        (cases) => cases >= 1_000_000 && cases < 2_500_000\r\n    ),\r\n    new LegendItem(\r\n        \"500.000 - 999.999\",\r\n        \"#e60000\",\r\n        (cases) => cases >= 500_000 && cases < 1_000_000\r\n    ),\r\n    new LegendItem(\r\n        \"100.000 - 499.999\",\r\n        \"#ff5544\",\r\n        (cases) => cases >= 100_000 && cases < 500_000\r\n    ),\r\n    new LegendItem(\r\n        \"1 - 199.999\",\r\n        \"#ff8080\",\r\n        (cases) => cases >= 1 && cases < 200_000\r\n    ),\r\n    new LegendItem(\"No Data\", \"#ffff4d\", (cases) => true)\r\n];\r\n\r\nexport default legendItems;","import {features} from \"../data/countries.json\";\r\nimport data from \"../data/countries_covid_data.json\";\r\nimport legendItems from \"../entities/LegendItems\";\r\n\r\nclass LoadCountriesTask{\r\n    setState = null;\r\n    mapCountries = features;\r\n\r\n    load = (setState) => {\r\n        this.setState = setState;\r\n        for (let i = 0; i < this.mapCountries.length; i++) {\r\n            const mapCountry = this.mapCountries[i];\r\n            const covidCountry = data.find((covidCountry) => covidCountry.iso3 === mapCountry.properties.ISO_A3)            \r\n            mapCountry.properties.confirmed = 0;\r\n            mapCountry.properties.population = 0;\r\n            mapCountry.properties.fatalities = 0;\r\n            mapCountry.properties.recovered = 0;\r\n            mapCountry.properties.active = 0;\r\n            mapCountry.properties.incidentRate = 0;\r\n            mapCountry.properties.peopleTested = 0;\r\n            mapCountry.properties.peopleHospitalized = 0;\r\n            mapCountry.properties.mortalityRate = 0;\r\n\r\n            if(covidCountry != null){\r\n                mapCountry.properties.confirmed = Number(covidCountry.latest.confirmed);\r\n                mapCountry.properties.population = Number(covidCountry.population);\r\n                mapCountry.properties.fatalities = Number(covidCountry.latest.deaths);\r\n                mapCountry.properties.recovered = Number(covidCountry.latest.recovered);\r\n                mapCountry.properties.active = Number(covidCountry.latest.active);\r\n                mapCountry.properties.incidentRate = Number(covidCountry.latest.incidentRate);\r\n                mapCountry.properties.peopleTested = Number(covidCountry.latest.peopleTested);\r\n                mapCountry.properties.peopleHospitalized = Number(covidCountry.latest.peopleHospitalized);\r\n                mapCountry.properties.mortalityRate = Number(covidCountry.latest.mortalityRate);\r\n            }\r\n\r\n            this.setCountryColor(mapCountry);\r\n        }\r\n        this.setState(this.mapCountries);\r\n    };\r\n    setCountryColor = (mapCountry) => {\r\n        const legendItem = legendItems.find((legendItem) => \r\n            legendItem.isFor(mapCountry.properties.confirmed)\r\n        );\r\n\r\n        if(legendItem != null){\r\n            mapCountry.properties.color = legendItem.color;\r\n        }\r\n    };\r\n}\r\n\r\nexport default LoadCountriesTask;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport TopRow from \"./components/TopRow\";\nimport InfoPanel from \"./components/InfoPanel\";\nimport LoadingMap from \"./components/LoadingMap\";\nimport CovidMap from \"./components/CovidMap\";\nimport MapSelectionButtons from \"./components/MapSelectionButtons\";\nimport LoadCountriesTask from \"./tasks/LoadCountriesTask\";\nimport legendItems from \"./entities/LegendItems\";\n\nconst App = () => {\n    const [countries, setCountries] = useState([]);\n\n    const load = () => {\n        const loadCountriesTask = new LoadCountriesTask();\n        loadCountriesTask.load(setCountries);\n    };\n\n    useEffect(load, []);\n\n    return (\n        <div className=\"page\">\n            <TopRow/>\n            <InfoPanel legendItems={legendItems}/>\n            <div style={{height:\"90vh\", width:\"70vw\", float:\"left\"}}>\n               {countries.length === 0 ? (\n                   <LoadingMap/>\n               ) : (\n                   <CovidMap countries={countries}/>\n               )}\n            <MapSelectionButtons/>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}