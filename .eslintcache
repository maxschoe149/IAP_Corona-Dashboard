[{"C:\\Users\\fammi\\corona-dashboard\\src\\index.js":"1","C:\\Users\\fammi\\corona-dashboard\\src\\App.js":"2","C:\\Users\\fammi\\corona-dashboard\\src\\reportWebVitals.js":"3","C:\\Users\\fammi\\corona-dashboard\\src\\components\\CovidMap.jsx":"4","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Legend.jsx":"5","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadCountriesTask.js":"6","C:\\Users\\fammi\\corona-dashboard\\src\\components\\TopRow.jsx":"7","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Newsticker.jsx":"8","C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapSelectionButtons.jsx":"9","C:\\Users\\fammi\\corona-dashboard\\src\\components\\NewstickerLanguage.jsx":"10","C:\\Users\\fammi\\corona-dashboard\\src\\components\\UpdatePanel.jsx":"11","C:\\Users\\fammi\\corona-dashboard\\src\\components\\InfoPanel.jsx":"12","C:\\Users\\fammi\\corona-dashboard\\src\\components\\LoadingMap.jsx":"13","C:\\Users\\fammi\\corona-dashboard\\src\\entities\\LegendItem.js":"14","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\BuildLegendsTask.js":"15","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\BuildLegend.js":"16","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\formatNumberWithSpaces.js":"17","C:\\Users\\fammi\\corona-dashboard\\src\\components\\DropdownMenuButton.jsx":"18","C:\\Users\\fammi\\corona-dashboard\\src\\entities\\DropdownMenu.jsx":"19","C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapFocusButton.jsx":"20","C:\\Users\\fammi\\corona-dashboard\\src\\entities\\NewsItem.js":"21","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadNewsTask.js":"22","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadEuropeTask.js":"23","C:\\Users\\fammi\\corona-dashboard\\src\\components\\EuropeCovidMap.jsx":"24","C:\\Users\\fammi\\corona-dashboard\\src\\entities\\FocusMenu.jsx":"25","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Tooltipbox.jsx":"26","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Charts.jsx":"27","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu.jsx":"28","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\TimeRange.jsx":"29","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\AddCountry.jsx":"30","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\Stepsize.jsx":"31","C:\\Users\\fammi\\corona-dashboard\\src\\components\\InfoWindow.jsx":"32"},{"size":1102,"mtime":1620046508747,"results":"33","hashOfConfig":"34"},{"size":6865,"mtime":1622896823346,"results":"35","hashOfConfig":"34"},{"size":375,"mtime":1616069232826,"results":"36","hashOfConfig":"34"},{"size":7049,"mtime":1621250973887,"results":"37","hashOfConfig":"34"},{"size":1091,"mtime":1621253056349,"results":"38","hashOfConfig":"34"},{"size":6151,"mtime":1622895479405,"results":"39","hashOfConfig":"34"},{"size":836,"mtime":1621252572597,"results":"40","hashOfConfig":"34"},{"size":2013,"mtime":1616069232536,"results":"41","hashOfConfig":"34"},{"size":2038,"mtime":1622894543981,"results":"42","hashOfConfig":"34"},{"size":1321,"mtime":1616069631602,"results":"43","hashOfConfig":"34"},{"size":601,"mtime":1616069232547,"results":"44","hashOfConfig":"34"},{"size":956,"mtime":1621253002365,"results":"45","hashOfConfig":"34"},{"size":474,"mtime":1616069631598,"results":"46","hashOfConfig":"34"},{"size":285,"mtime":1616069232822,"results":"47","hashOfConfig":"34"},{"size":356,"mtime":1616069232829,"results":"48","hashOfConfig":"34"},{"size":4366,"mtime":1622896761689,"results":"49","hashOfConfig":"34"},{"size":285,"mtime":1622895470186,"results":"50","hashOfConfig":"34"},{"size":895,"mtime":1616425974910,"results":"51","hashOfConfig":"34"},{"size":1557,"mtime":1621251358258,"results":"52","hashOfConfig":"34"},{"size":1741,"mtime":1621252573836,"results":"53","hashOfConfig":"34"},{"size":204,"mtime":1616069232823,"results":"54","hashOfConfig":"34"},{"size":1684,"mtime":1616069631608,"results":"55","hashOfConfig":"34"},{"size":11337,"mtime":1622708956666,"results":"56","hashOfConfig":"34"},{"size":8231,"mtime":1622897341871,"results":"57","hashOfConfig":"34"},{"size":1555,"mtime":1621252507080,"results":"58","hashOfConfig":"34"},{"size":3730,"mtime":1616069232542,"results":"59","hashOfConfig":"34"},{"size":16763,"mtime":1616425974908,"results":"60","hashOfConfig":"34"},{"size":992,"mtime":1616069232506,"results":"61","hashOfConfig":"34"},{"size":1137,"mtime":1616069631586,"results":"62","hashOfConfig":"34"},{"size":2116,"mtime":1616425974906,"results":"63","hashOfConfig":"34"},{"size":684,"mtime":1616069232513,"results":"64","hashOfConfig":"34"},{"size":7982,"mtime":1622892370991,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"ofc9fj",{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"68"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\fammi\\corona-dashboard\\src\\index.js",[],["133","134"],"C:\\Users\\fammi\\corona-dashboard\\src\\App.js",["135"],"C:\\Users\\fammi\\corona-dashboard\\src\\reportWebVitals.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\CovidMap.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\Legend.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadCountriesTask.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\TopRow.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\Newsticker.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapSelectionButtons.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\NewstickerLanguage.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\UpdatePanel.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\InfoPanel.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\LoadingMap.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\entities\\LegendItem.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\BuildLegendsTask.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\BuildLegend.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\formatNumberWithSpaces.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\DropdownMenuButton.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\entities\\DropdownMenu.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapFocusButton.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\entities\\NewsItem.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadNewsTask.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadEuropeTask.js",["136"],"import {features} from \"../data/german_neighbours_noindent_populated4.json\";\r\n\r\nclass LoadEuropeTask{\r\n    setState = null;\r\n    setData = null;\r\n    combinedData = [];\r\n    regions = features;\r\n\r\n    async load (setState, setData) {\r\n        this.setState = setState;\r\n        this.setData = setData;\r\n\r\n        await fetch(\"https://banana-cupcake-00146.herokuapp.com/eu_data.json\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                //validCountryKeys\r\n                const validCKeys = Object.keys(data);\r\n                //Debug-Only\r\n                // const noMatchReg = [];\r\n                // const noMatchCou = [];\r\n                //We iterate over the regions of our GeoJSON.\r\n                for(let i =0; i<this.regions.length; i++){\r\n                    const region = this.regions[i];\r\n\r\n                    //Initializing for regions without data.\r\n                    region.properties.confirmed=0;\r\n                    region.properties.recovered=0;\r\n                    region.properties.fatalities=0;\r\n                    region.properties.active=0;\r\n                    region.properties.mortalityRate=0;\r\n                    region.properties.incidentRate=0;\r\n                    region.properties.last7 =0;\r\n\r\n                    let covidRegion = [];\r\n                    //Matching origin of region (e.g. austria for Burgenland)\r\n                    if(validCKeys.includes(region.properties.origin.toLowerCase())){\r\n                        // validRegionKeys; Only contains valid region keys for matched origins since region names are not unique.\r\n                        const validRegKeys = Object.keys(data[region.properties.origin.toLowerCase()]);\r\n                        //Matching region names.\r\n                        let uppercase = validRegKeys.includes(region.properties.name);\r\n                        let lowercase = validRegKeys.includes(region.properties.name.toLowerCase())\r\n                        if(uppercase || lowercase){\r\n                            //For accessing the data correctly, we need to know if the name is upper or lower case.\r\n                            let regname = (uppercase ? region.properties.name : region.properties.name.toLowerCase());\r\n                            //Correct Covid data for this region\r\n                            covidRegion = data[region.properties.origin.toLowerCase()][regname];\r\n                            //Find latest entry\r\n                            let newestIndex=0;\r\n                            //Since Charts.jsx uses the data as a whole, we add the population of the region\r\n                            data[region.properties.origin.toLowerCase()][regname][newestIndex].population = region.properties.population;\r\n                            for(let j = 1; j<covidRegion.length; j++){\r\n                                let newestdate = new Date(covidRegion[newestIndex].date);\r\n                                let thisdate = new Date(covidRegion[j].date);\r\n                                //In every entry.\r\n                                data[region.properties.origin.toLowerCase()][regname][j].population = region.properties.population;\r\n                                if(thisdate > newestdate){\r\n                                    newestIndex = j;\r\n                                }\r\n                            }\r\n                            //extract/calculate relevant data from Covid data.\r\n                            region.properties.confirmed = covidRegion[newestIndex].totalCases;\r\n                            region.properties.fatalities = covidRegion[newestIndex].totalDeaths;\r\n                            region.properties.active = covidRegion[newestIndex].newCases21Days;\r\n                            region.properties.incidentRate = (covidRegion[newestIndex].newCases7Days*100000)/region.properties.population;\r\n                            region.properties.recovered = region.properties.confirmed - region.properties.fatalities - region.properties.active;\r\n                            region.properties.mortalityRate = region.properties.fatalities/region.properties.confirmed;\r\n                            region.properties.last7 = covidRegion[newestIndex].newCases7Days;\r\n                        }\r\n                        //Debug\r\n                        // else{noMatchReg.push(region.properties.name);}\r\n                    }\r\n                    //Debug\r\n                    // else{noMatchCou.push(region.properties.name);}\r\n                }\r\n            //Debug\r\n            // console.log(\"No Match Region: \");\r\n            // console.log(noMatchReg);\r\n            // console.log(\"No Match Country: \");\r\n            // console.log(noMatchCou);\r\n            //Updating the states.\r\n            this.combinedData.push(data);\r\n            this.setData(this.combinedData);\r\n            this.setState(this.regions);\r\n        })\r\n        await fetch(\"https://banana-cupcake-00146.herokuapp.com/germany_new.json\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                //Debug\r\n                console.log(data)\r\n                let noMatchReg = [];\r\n                //Debug\r\n                // let oneListKeys = [];\r\n                // let matchedKeys = [];\r\n                //Get the keys to iterate through the data\r\n                const validBunKeys = Object.keys(data);\r\n                //We can use these to find the Bundesland to a specific region.\r\n                //This makes it easier to access the ICU data.\r\n                const allRegKeys = [];\r\n                for(let i=0; i<validBunKeys.length; i++){\r\n                    let vbk = validBunKeys[i];\r\n                    if(vbk===\"vacc\"){allRegKeys.push([]); continue;}\r\n                    //Get the keys for the regions in that Bundesland.\r\n                    const validRegKeys = Object.keys(data[vbk]);\r\n                    allRegKeys.push(validRegKeys);\r\n                }\r\n\r\n                //Debug\r\n                // for(let i=0;i<allRegKeys.length; i++){\r\n                //     for(let j=0;j<allRegKeys[i].length; j++){\r\n                //         oneListKeys.push(allRegKeys[i][j]);\r\n                //     }\r\n                // }\r\n\r\n                //Again we iterate over the regions of our GeoJSON.\r\n                for(let i =0; i<this.regions.length; i++){\r\n                    //We already have every region except the german ones.\r\n                    if(this.regions[i].properties.origin!==\"Germany\"){continue;}\r\n                    const region = this.regions[i];\r\n\r\n                    //Initializing for regions without data.\r\n                    region.properties.confirmed=0;\r\n                    region.properties.recovered=0;\r\n                    region.properties.fatalities=0;\r\n                    region.properties.active=0;\r\n                    region.properties.mortalityRate=0;\r\n                    region.properties.its_freie_betten=0;\r\n                    region.properties.its_belegt=0;\r\n                    region.properties.its_freie_beatmung=0;\r\n                    region.properties.its_covid_patienten=0;\r\n                    region.properties.incidentRate=0;\r\n                    region.properties.last7=0;\r\n\r\n                    let covidRegion = [];\r\n                    //Matching region names.\r\n                    let uppercase = false;\r\n                    let lowercase = false;\r\n                    let bundesland = \"\";\r\n                    for(let j=0;j<allRegKeys.length;j++){\r\n                        if(allRegKeys[j].includes(region.properties.name)){uppercase = true; bundesland=validBunKeys[j];}\r\n                        if(allRegKeys[j].includes(region.properties.name.toLowerCase())){lowercase = true; bundesland=validBunKeys[j];}\r\n                    }\r\n                    if(uppercase || lowercase){\r\n                        //For accessing the data correctly, we need to know if the name is upper or lower case.\r\n                        let regname = (uppercase ? region.properties.name : region.properties.name.toLowerCase());\r\n                        //Debug\r\n                        // matchedKeys.push(regname);\r\n                        //Correct Covid data for this region\r\n                        covidRegion = data[bundesland][regname];\r\n                        //Find latest entry\r\n                        let newestIndex=0;\r\n                        //Since Charts.jsx uses the data as a whole, we add the population of the region...\r\n                        data[bundesland][regname][newestIndex].population = region.properties.population;\r\n                        for(let j = 1; j<covidRegion.length; j++){\r\n                            //d is for date.\r\n                            let newestdate = new Date(covidRegion[newestIndex].d);\r\n                            let thisdate = new Date(covidRegion[j].d);\r\n                            //...in every entry.\r\n                            data[bundesland][regname][j].population = region.properties.population;\r\n                            if(thisdate > newestdate){\r\n                                newestIndex = j;\r\n                            }\r\n                        }\r\n                        //Debug\r\n                        // console.log(covidRegion[newestIndex].d);\r\n                        //extract/calculate relevant data from Covid data.\r\n                        //e is for total Cases.\r\n                        region.properties.confirmed = covidRegion[newestIndex].e;\r\n                        //h is for cumulative fatalities\r\n                        region.properties.fatalities = covidRegion[newestIndex].h;\r\n                        //g is for new cases in the last 21 days\r\n                        region.properties.active = covidRegion[newestIndex].g;\r\n                        //f is for new cases in the last 7 days\r\n                        region.properties.incidentRate = (covidRegion[newestIndex].f*100000)/region.properties.population;\r\n                        region.properties.recovered = region.properties.confirmed - region.properties.fatalities - region.properties.active;\r\n                        region.properties.mortalityRate = region.properties.fatalities/region.properties.confirmed;\r\n                        region.properties.its_freie_betten = covidRegion[newestIndex].k;\r\n                        region.properties.its_belegt= covidRegion[newestIndex].j;\r\n                        region.properties.its_freie_beatmung= covidRegion[newestIndex].l;\r\n                        region.properties.its_covid_patienten= covidRegion[newestIndex].i;\r\n                        region.properties.last7 = covidRegion[newestIndex].f;\r\n                    }\r\n                    //Debug\r\n                    // else{noMatchReg.push(region.properties.name);}\r\n                }\r\n            //Debug\r\n            // console.log(\"No Match Region(Ger): \");\r\n            // console.log(noMatchReg);\r\n            // for(let i=0;i<oneListKeys.length;i++){\r\n            //     if(matchedKeys.includes(oneListKeys[i])){continue;}\r\n            //     else{console.log(oneListKeys[i]);}\r\n            // }\r\n            //Updating the states.\r\n            this.combinedData.push(data);\r\n            this.setData(this.combinedData);\r\n            this.setState(this.regions);\r\n        })\r\n    };\r\n\r\n}\r\n\r\nexport default LoadEuropeTask;","C:\\Users\\fammi\\corona-dashboard\\src\\components\\EuropeCovidMap.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\entities\\FocusMenu.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\Tooltipbox.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\Charts.jsx",["137","138"],"import React,  { useState,useEffect } from 'react';\r\nimport \"./Charts.css\"\r\nimport Chart, { plugins } from 'chart.js'\r\nimport ChartMenu from \"./ChartMenu.jsx\"\r\nimport LoadingMap from \"./LoadingMap\";\r\n\r\n// colors for the charts\r\nvar chartColors = [\r\n\t{name:'red',    value: 'rgb(255, 99, 132)'},\r\n\t{name:'orange', value: 'rgb(255, 159, 64)'},\r\n\t{name:'yellow', value: 'rgb(255, 205, 86)'},\r\n\t{name:'green',  value: 'rgb(75, 192, 192)'},\r\n\t{name:'blue',   value: 'rgb(54, 162, 235)'},\r\n\t{name:'purple', value: 'rgb(153, 102, 255)'},\r\n\t{name:'grey',   value: 'rgb(231,233,237)'}\r\n];\r\n\r\n// chart.js options\r\nvar chart_color = Chart.helpers.color;\r\nvar config = {\r\n    type:\"bar\",\r\n    data: {\r\n        labels: [],\r\n        datasets: []\r\n    },\r\n    options: {\r\n        legend: {\r\n          position: 'top',\r\n          labels: {\r\n            fontColor: 'white'\r\n          }\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Chart',\r\n          fontColor: 'white',\r\n          fontSize: 18\r\n        },\r\n        scales: {\r\n            xAxes: [{\r\n                ticks: {\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines: {\r\n                    color: 'rgb(30, 30, 30)',\r\n                    display: true,\r\n                    drawBorder: true,\r\n                    drawOnChartArea: true,\r\n                    drawTicks: false,\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                ticks: {\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines: {\r\n                    color: 'rgb(30, 30, 30)',\r\n                    display: true,\r\n                    drawBorder: true,\r\n                    drawOnChartArea: true,\r\n                    drawTicks: false,\r\n                }\r\n            }]\r\n        }\r\n    },\r\n    plugins:[\r\n        {afterDraw:function(chart) {\r\n            // var goin = false\r\n            if(chart.data.labels.length === 0)    {              //goin = true\r\n            //else if(chart.data.datasets[0].data.length === 0)   //goin = true\r\n            //if (goin) {\r\n                //if(chart.data.datasets[0].data.length === 0){\r\n                 // oder chart.data.datasets.length === 0\r\n                // No data is present\r\n                var ctx = chart.chart.ctx;\r\n                var width = chart.chart.width;\r\n                var height = chart.chart.height;\r\n                chart.clear();\r\n    \r\n                ctx.save();\r\n                ctx.textAlign = 'center';\r\n                ctx.textBaseline = 'middle';\r\n                ctx.font = \"2rem 'Helvetica Nueue'\";\r\n                ctx.fillStyle = \"white\";\r\n                ctx.fillText('No data to display for this category', width / 2, height / 2);\r\n                ctx.restore();\r\n                }\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\n// chart size\r\nconst styles = {\r\n    width: '85%',\r\n    height: \"500px\",\r\n    overflow: \"hidden\"\r\n}\r\n// chart options size\r\nconst styles2 = {\r\n    width: '15%'\r\n}\r\n\r\n// States\r\nconst id = {id:\"ChartID_1\"}\r\nvar init_Chart = true\r\nvar init_States= true\r\nvar chart;\r\nvar showing;\r\nif(chart)   showing = chart.data.datasets\r\nelse        showing = 0\r\nvar number_of_colors = chartColors.length\r\n\r\n\r\nfunction getRelevantData(CountryData, activeLegend, startDate, endDate, step, lastUpdated){\r\n\r\n    // ignore countries with no data\r\n    if(CountryData === undefined) {\r\n        if(chart.data.labels){\r\n            return [[],chart.data.labels]\r\n        } else {\r\n            return [[],[]]\r\n        }\r\n    }\r\n    \r\n    const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\r\n    const diffDaysStart = Math.round(Math.abs((startDate - lastUpdated) / oneDay));\r\n    const NumberDays = Math.round(Math.abs((startDate - endDate) / oneDay));\r\n    var left_index = CountryData.length - 1 - diffDaysStart\r\n    var right_index = CountryData.length - diffDaysStart + NumberDays\r\n    var relevantData = CountryData.slice(left_index,right_index)\r\n\r\n    function data_sorting(case_name){\r\n        var labels = []\r\n        var data = []\r\n        var sum_array = []\r\n\r\n        const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n                            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n                            ];\r\n\r\n        const sum = (accumulator, currentValue) => accumulator + currentValue;\r\n\r\n        for (var i=0; i<relevantData.length; i++){\r\n            var elem = relevantData[i]\r\n            var date = new Date(elem.report_date)\r\n            if(step.label === \"Day\"){\r\n                data.push(elem[case_name])\r\n                labels.push(date.toLocaleDateString())\r\n            }\r\n            else if(step.label === \"Week\"){\r\n                sum_array.push(elem[case_name])\r\n                if(date.getDay() === 0 || i === relevantData.length-1){\r\n                    data.push(sum_array.reduce(sum)/sum_array.length)\r\n                    sum_array = []\r\n                    if (date.getDay() === 0) labels.push(date.toDateString())\r\n                    else                    labels.push(\"last Week\")\r\n                }\r\n            }\r\n            else {\r\n                sum_array.push(elem[case_name])\r\n                if(date.getDate() === 1 || i === relevantData.length-1){\r\n                    data.push(sum_array.reduce(sum)/sum_array.length)\r\n                    sum_array = []\r\n                    if (date.getDate() === 1)    labels.push(monthNames[date.getMonth()])\r\n                    else                         labels.push(\"last Month\")\r\n                }\r\n            }\r\n        }\r\n        return [data,labels]\r\n    }\r\n\r\n    switch(activeLegend){\r\n        \r\n        // !!! \r\n        case \"Vaccinated Population\":\r\n            return [[],[]];\r\n\r\n        // !!! \r\n            case \"Testing Rate\":\r\n            return [[],[]];\r\n\r\n        case \"Cumulative Fatalities\":\r\n            return data_sorting(\"deaths\")\r\n\r\n        // !!!     \r\n        case \"ICU-Occupancy\":\r\n            return [[],[]];\r\n\r\n        case \"7-Day-Incidence\":\r\n            return data_sorting(\"incident_rate\")\r\n\r\n        // !!! \r\n        case \"New Cases(21 Days)\":\r\n            return [[],[]];\r\n\r\n        case \"Cumulative Cases\":\r\n            return data_sorting(\"confirmed\")\r\n\r\n        default:\r\n            return [[],[]];\r\n    }\r\n}\r\n\r\nfunction chart_addDataset(chart,data,labels,activeCountry){\r\n\r\n    // get the right color. If a country in the middle has been deleted, there is a free color. \r\n    // and here I find this color\r\n    var sets = chart.data.datasets.length\r\n    var index;\r\n    if(sets === 0) {\r\n        index = 0\r\n    }\r\n    else if (sets === 1){\r\n        index = chart.data.datasets[0].colorNumber + 1\r\n    } else {\r\n        var numbers = [...Array(number_of_colors).keys()];\r\n        for( let c of chart.data.datasets){\r\n            numbers.splice(numbers.findIndex(x=>x===c.colorNumber),1)\r\n        }\r\n        index = numbers.shift()\r\n    }\r\n    \r\n    chart.data.datasets.push({\r\n        label: activeCountry,\r\n        data: data,\r\n        //color\r\n        backgroundColor: chart_color(chartColors[index].value).alpha(0.2).rgbString(),\r\n        borderColor: chartColors[index].value,\r\n        colorNumber:index,\r\n        pointBackgroundColor: chartColors[index].value,\r\n        borderWidth: 1\r\n    })\r\n    chart.data.labels = labels\r\n}\r\n\r\nfunction chart_deleteDataset(chart,country){\r\n    var datasets = chart.data.datasets\r\n    for(var i=0; i<datasets.length; i++){\r\n        if(datasets[i].label === country){\r\n            datasets.splice(i,1)\r\n        }\r\n    }   \r\n}\r\n\r\n/* --------------------------------------------------------------------------------\r\n| The Component\r\n|-----------------------------------------------------------------------------------\r\n*/\r\nconst Charts = (props) => {\r\n    var completeData = props.completeData\r\n    // States\r\n    // tracks the stepsize selected in the options panel\r\n    const [step, setStep] = useState({ value: 'd', label: 'Day' });\r\n    \r\n    /* --------------------------------------------------------------------------------\r\n    | Init Chart\r\n    |-----------------------------------------------------------------------------------\r\n    | useEffect wird standartmäßig aufgerufen, nachdem die UI gerendert ist. Dann kann das Chart mit \"new Chart\" erst initialisert werden, nach dem Rendern.\r\n    */\r\n    useEffect(()=>{\r\n        if(completeData){\r\n            var ctx = document.getElementById(id.id).getContext(\"2d\");\r\n            chart = new Chart(ctx, config);\r\n            init_Chart = false\r\n            showing = chart.data.datasets\r\n        }\r\n          \r\n    },[completeData])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Handle Map Select\r\n    |-----------------------------------------------------------------------------------\r\n    */\r\n    useEffect(()=>{\r\n            // If the selection on the map wasn't already selected, add it to the selected coutries\r\n            var notselected = true\r\n            for(var selected of props.selectedCountries){\r\n                if(selected.label === props.activeCountry) {\r\n                    notselected = false\r\n                    break\r\n                }\r\n            }\r\n            if(notselected) {\r\n                // if more countries have been selected, than there are colors\r\n                if(showing.length >= number_of_colors)   return props.alert.show(\"Maximum number of countries reached\")\r\n                else                                     props.setSelectedCountries(x => [...x,{value:props.activeCountry,label:props.activeCountry}])\r\n            }\r\n    },[props])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Manage Datasets\r\n    |-----------------------------------------------------------------------------------\r\n    | compares the selected countries with already added to the chart countries\r\n    | adds and deletes datasets\r\n    */\r\n    useEffect(() => {\r\n        // Chart Data rendering\r\n        if(chart){\r\n            var activeCountry = props.activeCountry\r\n            var activeLegend = props.activeLegend\r\n            var CountryData = completeData[activeCountry]\r\n\r\n            // Update Chart Title\r\n            chart.options.title.text = activeLegend\r\n\r\n            // Compare addedCountries and selectedCountries\r\n            //get added Countries\r\n            var compare_added = []\r\n            for (var elem of chart.data.datasets){\r\n                compare_added.push(elem.label)\r\n            }\r\n\r\n            \r\n            var compare_selected = [...props.selectedCountries]\r\n            for(var i=0; i<compare_added.length; i++){\r\n                for(var j=0; j<compare_selected.length; j++){\r\n                    if(compare_added[i] === compare_selected[j].label){\r\n                        compare_added.splice(i,1)\r\n                        compare_selected.splice(j,1)\r\n                        i--;\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n\r\n            // add selected Countries\r\n            for(var country of compare_selected){\r\n                //if(country.label === \"Map\") continue\r\n                if(country.label === \"World\"){ \r\n                    CountryData = props.WorldData\r\n                } else {\r\n                    CountryData = completeData[country.label]\r\n                }\r\n                var [data,labels] = getRelevantData(CountryData,activeLegend, props.startDate, props.endDate, step, new Date(props.lastUpdate))\r\n                chart_addDataset(chart,data,labels,country.label)\r\n\r\n            }\r\n            // delete deselected Countries\r\n            for(var deselect_country of compare_added){\r\n                chart_deleteDataset(chart,deselect_country)\r\n            }\r\n            chart.update()\r\n        }\r\n    },[props, completeData, step])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Range Update\r\n    |-----------------------------------------------------------------------------------\r\n    | Triggered by changes to startDate, endDate, stepsize and the Legend\r\n    | deletes the current datasets and calls Manage Datasets by changeing addedCountries\r\n    */\r\n    useEffect(() => {\r\n        if(chart){\r\n            for(var chart_data of chart.data.datasets){\r\n                var country_name = chart_data.label\r\n                var CountryData;\r\n                if(country_name === \"World\"){ \r\n                    if(props.activeLegend === \"7-Day-Incidence\") return props.alert.info(\"not implemented for World yet\") // 7-Day-Incidence is not correct implemented for WorldData\r\n                    CountryData = props.WorldData\r\n                } else {\r\n                    CountryData = completeData[country_name]\r\n                }\r\n                var [data,labels] = getRelevantData(CountryData,props.activeLegend, props.startDate, props.endDate, step, new Date(props.lastUpdate))\r\n                chart_data.data = data\r\n            }\r\n            chart.data.labels = labels\r\n            chart.update()\r\n        }\r\n    },[props, completeData, step])\r\n\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Initialize States\r\n    |-----------------------------------------------------------------------------------\r\n    | Once the Complete Data is loaded (the if statement) , we do some calculation\r\n    | getting: a list of countries, the data calculated for the whole world\r\n    | and we update the date pickers with the date, the data was last updated\r\n    | While the data is not loaded, display the loading screen\r\n    */\r\n    if(completeData){\r\n        console.log(\"data, \", completeData)\r\n        \r\n        // init_States to avoid looping (only execute once)\r\n        if(props.lastUpdate && init_States){\r\n            init_States = false\r\n            // Update the Datepickers with the lastUpdate constraint\r\n            var now = new Date(props.lastUpdate)\r\n            var lastWeek = new Date(props.lastUpdate)\r\n            lastWeek.setDate(now.getDate() - 7)\r\n            props.setStartDate(lastWeek)\r\n            props.setEndDate(now)\r\n\r\n            // make a list of countries for the addCountry select\r\n            // you can fix a country, which can then not be deselected by adding the property \"isFixed: true\" eg: { value: 'Map', label: 'Map', isFixed: true}\r\n            var country_list = []\r\n            country_list.push({ value: 'World', label: 'World'})\r\n            for(var name in completeData){\r\n                country_list.push({ value: name, label: name })\r\n            }\r\n            props.setcountryList(country_list)\r\n\r\n            // World Data\r\n            var WorldData = []\r\n            var array_length = completeData[country_list[1].label].length\r\n            for(var i=0; i<array_length; i++){\r\n                var obj = {\r\n                    \"deaths\":   0,\r\n                    \"confirmed\":0\r\n                }\r\n                for(var country in completeData){\r\n                    if(completeData[country].length <= i) continue\r\n                    obj.deaths = obj.deaths + completeData[country][i].deaths\r\n                    obj.confirmed = obj.confirmed + completeData[country][i].confirmed\r\n                    obj.report_date = completeData[country][i].report_date\r\n                }\r\n                WorldData.push(obj)\r\n            }\r\n            props.setWorldData(WorldData)\r\n        }\r\n\r\n        \r\n\r\n        return (\r\n            <div className=\"chartContainer\">\r\n                <div style={styles}>\r\n                    <canvas style={{width:'100%',height:'500px'}} id={id.id}/>\r\n                </div>\r\n                <div style={styles2}>\r\n                    <ChartMenu \r\n                        setStep={setStep} \r\n                        startDate={props.startDate} \r\n                        endDate={props.endDate} \r\n                        setEndDate={props.setEndDate} \r\n                        setStartDate={props.setStartDate} \r\n                        lastUpdate={props.lastUpdate}\r\n                        country_list={props.countryList}\r\n                        selectedCountries={props.selectedCountries}\r\n                        setSelectedCountries={props.setSelectedCountries}\r\n                        showing={showing} number_of_colors={number_of_colors}\r\n                        alert={props.alert}\r\n                        />\r\n                </div>    \r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className=\"chartContainer\">\r\n                <LoadingMap />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//<canvas style={{width:'95%',height:'500px'}} id={id.id}/>\r\n\r\nexport default Charts;\r\n","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\TimeRange.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\AddCountry.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\Stepsize.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\InfoWindow.jsx",[],{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":64,"column":12,"nodeType":"145","messageId":"146","endLine":64,"endColumn":30},{"ruleId":"143","severity":1,"message":"147","line":90,"column":21,"nodeType":"145","messageId":"146","endLine":90,"endColumn":31},{"ruleId":"143","severity":1,"message":"148","line":3,"column":17,"nodeType":"145","messageId":"146","endLine":3,"endColumn":24},{"ruleId":"143","severity":1,"message":"149","line":265,"column":13,"nodeType":"145","messageId":"146","endLine":265,"endColumn":23},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"no-unused-vars","'completeRegionData' is assigned a value but never used.","Identifier","unusedVar","'noMatchReg' is assigned a value but never used.","'plugins' is defined but never used.","'init_Chart' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]