[{"C:\\Users\\fammi\\corona-dashboard\\src\\index.js":"1","C:\\Users\\fammi\\corona-dashboard\\src\\App.js":"2","C:\\Users\\fammi\\corona-dashboard\\src\\reportWebVitals.js":"3","C:\\Users\\fammi\\corona-dashboard\\src\\components\\CovidMap.jsx":"4","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Legend.jsx":"5","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadCountriesTask.js":"6","C:\\Users\\fammi\\corona-dashboard\\src\\components\\TopRow.jsx":"7","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Newsticker.jsx":"8","C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapSelectionButtons.jsx":"9","C:\\Users\\fammi\\corona-dashboard\\src\\components\\NewstickerLanguage.jsx":"10","C:\\Users\\fammi\\corona-dashboard\\src\\components\\UpdatePanel.jsx":"11","C:\\Users\\fammi\\corona-dashboard\\src\\components\\InfoPanel.jsx":"12","C:\\Users\\fammi\\corona-dashboard\\src\\components\\LoadingMap.jsx":"13","C:\\Users\\fammi\\corona-dashboard\\src\\entities\\LegendItem.js":"14","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\BuildLegendsTask.js":"15","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\BuildLegend.js":"16","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\formatNumberWithSpaces.js":"17","C:\\Users\\fammi\\corona-dashboard\\src\\components\\DropdownMenuButton.jsx":"18","C:\\Users\\fammi\\corona-dashboard\\src\\entities\\DropdownMenu.jsx":"19","C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapFocusButton.jsx":"20","C:\\Users\\fammi\\corona-dashboard\\src\\entities\\NewsItem.js":"21","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadNewsTask.js":"22","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadEuropeTask.js":"23","C:\\Users\\fammi\\corona-dashboard\\src\\components\\EuropeCovidMap.jsx":"24","C:\\Users\\fammi\\corona-dashboard\\src\\entities\\FocusMenu.jsx":"25","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Tooltipbox.jsx":"26","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Charts.jsx":"27","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu.jsx":"28","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\TimeRange.jsx":"29","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\AddCountry.jsx":"30","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\Stepsize.jsx":"31","C:\\Users\\fammi\\corona-dashboard\\src\\components\\InfoWindow.jsx":"32"},{"size":1102,"mtime":1616069232825,"results":"33","hashOfConfig":"34"},{"size":6660,"mtime":1619877958886,"results":"35","hashOfConfig":"34"},{"size":375,"mtime":1616069232826,"results":"36","hashOfConfig":"34"},{"size":8247,"mtime":1616425974909,"results":"37","hashOfConfig":"34"},{"size":831,"mtime":1616069631597,"results":"38","hashOfConfig":"34"},{"size":6115,"mtime":1619963610927,"results":"39","hashOfConfig":"34"},{"size":762,"mtime":1616425974914,"results":"40","hashOfConfig":"34"},{"size":2013,"mtime":1616069232536,"results":"41","hashOfConfig":"34"},{"size":1868,"mtime":1616069631600,"results":"42","hashOfConfig":"34"},{"size":1321,"mtime":1616069631602,"results":"43","hashOfConfig":"34"},{"size":601,"mtime":1616069232547,"results":"44","hashOfConfig":"34"},{"size":900,"mtime":1616070918348,"results":"45","hashOfConfig":"34"},{"size":474,"mtime":1616069631598,"results":"46","hashOfConfig":"34"},{"size":285,"mtime":1616069232822,"results":"47","hashOfConfig":"34"},{"size":356,"mtime":1616069232829,"results":"48","hashOfConfig":"34"},{"size":4378,"mtime":1616069232828,"results":"49","hashOfConfig":"34"},{"size":156,"mtime":1616069232834,"results":"50","hashOfConfig":"34"},{"size":895,"mtime":1616425974910,"results":"51","hashOfConfig":"34"},{"size":1645,"mtime":1616425974915,"results":"52","hashOfConfig":"34"},{"size":1667,"mtime":1616069631599,"results":"53","hashOfConfig":"34"},{"size":204,"mtime":1616069232823,"results":"54","hashOfConfig":"34"},{"size":1684,"mtime":1616069631608,"results":"55","hashOfConfig":"34"},{"size":4918,"mtime":1619961569125,"results":"56","hashOfConfig":"34"},{"size":7508,"mtime":1617452845850,"results":"57","hashOfConfig":"34"},{"size":1283,"mtime":1616069232821,"results":"58","hashOfConfig":"34"},{"size":3730,"mtime":1616069232542,"results":"59","hashOfConfig":"34"},{"size":16763,"mtime":1616425974908,"results":"60","hashOfConfig":"34"},{"size":992,"mtime":1616069232506,"results":"61","hashOfConfig":"34"},{"size":1137,"mtime":1616069631586,"results":"62","hashOfConfig":"34"},{"size":2116,"mtime":1616425974906,"results":"63","hashOfConfig":"34"},{"size":684,"mtime":1616069232513,"results":"64","hashOfConfig":"34"},{"size":4072,"mtime":1616425974912,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"ofc9fj",{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"68"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"68"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"C:\\Users\\fammi\\corona-dashboard\\src\\index.js",[],["133","134"],"C:\\Users\\fammi\\corona-dashboard\\src\\App.js",["135"],"import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport TopRow from \"./components/TopRow\";\r\nimport InfoPanel from \"./components/InfoPanel\";\r\nimport LoadingMap from \"./components/LoadingMap\";\r\nimport CovidMap from \"./components/CovidMap\";\r\nimport MapSelectionButtons from \"./components/MapSelectionButtons\";\r\nimport LoadCountriesTask from \"./tasks/LoadCountriesTask\";\r\nimport buildLegends from \"./tasks/BuildLegendsTask\";\r\nimport LoadEuropeTask from \"./tasks/LoadEuropeTask.js\";\r\nimport EuropeCovidMap from \"./components/EuropeCovidMap\";\r\nimport Charts from \"./components/Charts\";\r\nimport InfoWindow from \"./components/InfoWindow\";\r\n\r\n// TODO: \r\n// Code für Präsentation auskommentieren\r\n// DropdownMenü Einträge sollten etwas tun oder entfernt werden\r\n// Nicht benötigte MapSelectionButtons entfernen\r\n// Coronadaten für Regions einlesen\r\n// Zugriff für Weltdaten überprüfen (veraltet?)\r\n// Anpassung für mobile Geräte\r\n// Generelles Styling überarbeiten\r\n// Map-Translation: Gebietsnamen übersetzen?\r\n// Map/Legend Anpassungen: Tilelayer-OSM? Farbkorrektur aufgrund von Transparenz?\r\n\r\n\r\n import { useAlert } from 'react-alert';\r\n\r\nconst App = () => {\r\n    // views are the different categories of data we want to display\r\n    const views = [\"Cumulative Cases\", \"New Cases(21 Days)\", \"7-Day-Incidence\", \"ICU-Occupancy\", \"Cumulative Fatalities\", \"Testing Rate\", \"Vaccinated Population\"];\r\n    // countries for the world focus\r\n    const [countries, setCountries] = useState([]);\r\n    // \"countries\" aka regions for the regional focus\r\n    const [europeCountries, setEuropeCountries] = useState([]);\r\n    // hook to display the correct (map)legend for the active view\r\n    const [activeLegend, setActiveLegend] = useState(views[0]);\r\n    // hook to display the correct (map)focus: world/regions\r\n    const [activeFocus, setActiveFocus] = useState(\"World\");\r\n    // hook to display the correct Date for the UpdatePanel\r\n    const [lastUpdate, setLastUpdate] = useState();\r\n    const [activeLanguage, setActiveLanguage] = useState(\"English\");\r\n    // hook to display or hide the InfoWindow component.\r\n    const [infoWindow,setInfoWindow] = useState(\"hidden\");\r\n\r\n    //Building the legends for the world focus\r\n    const legends = buildLegends(\r\n        views,\r\n        // These numbers are arbitrary, but the coloured map looks cool.\r\n        [5_000_000, 500_000, 500, 100, 100_000, 500_000, 500_000]\r\n    );\r\n    //Doing the same for the region focus, with slightly different values though\r\n    const regionLegends = buildLegends(\r\n        views,\r\n        [200_000, 20_000, 150, 100, 10_000, 50_000, 50_000])\r\n    /* -------------------------------------------------\r\n    * Tassias Code : \r\n    * -------------------------------------------------- */\r\n    // Sate um nachzuvollziehen, welche Country auf der CovidMap ausgewählt wurde\r\n    const [activeCountry, setActiveCountry] = useState(\"World\");\r\n    // State um die kompletten Daten der API zu speichern (ohne Formatierung für die CovidMap) für die Charts\r\n    const [completeData, setCompleteData] = useState();//{World:[]}\r\n    const [completeRegionData, setCompleteRegionData] = useState();\r\n    const [countryList,setcountryList] = useState();\r\n    const [startDate, setStartDate] = useState();\r\n    const [endDate, setEndDate] = useState();\r\n    const [selectedCountries,setSelectedCountries] = useState([{ value: 'World', label: 'World'}]);\r\n    const [WorldData, setWorldData] = useState([]);\r\n    const alert = useAlert();\r\n\r\n    //Function to load the Geo- & Coronadata for both focuses\r\n    const load = () => {\r\n        const loadCountriesTask = new LoadCountriesTask();\r\n        loadCountriesTask.load(setCountries, setLastUpdate, setCompleteData);\r\n        const loadEuropeTask = new LoadEuropeTask();\r\n        loadEuropeTask.load(setEuropeCountries, setCompleteRegionData);\r\n    };\r\n\r\n    useEffect(load, []);\r\n      \r\n    if(infoWindow === \"hidden\") return (\r\n    <div style={{overflow: \"hidden\"}}>\r\n        <div className=\"page\">\r\n            <TopRow lastUpdate={lastUpdate} activeFocus={activeFocus} setActiveFocus={setActiveFocus} activeLanguage={activeLanguage} setInfoWindow={setInfoWindow}/>\r\n            <div style={{height:\"90%\", width:\"100%\", display:\"flex\", flexDirection:\"row\"}}>\r\n                <InfoPanel legends={legends} active={activeLegend} activeLanguage={activeLanguage} setActiveLanguage={setActiveLanguage}/>\r\n                <div style={{height:\"100%\", flexBasis:\"70%\", flexGrow:\"2\", display:\"flex\", flexDirection:\"column\"}}>\r\n                    {/* This div is only there to fix a visual glitch when changing focus */}\r\n                    <div style={{flexGrow:\"16\", flexBasis:\"80%\", width:\"100%\", display:\"flex\"}}>\r\n                        {/* Depending on the activeFocus either the CovidMap or the EuropeCovidMap is displayed. */}\r\n                        {activeFocus === \"World\" ? (countries.length === 0 ? (\r\n                            // If the background loading of the data is not quite done yet, display a loading symbol.\r\n                           <LoadingMap/>\r\n                        ) : (<>\r\n                                <CovidMap countries={countries} legends={legends} active={activeLegend} activeLanguage={activeLanguage} setActiveCountry={setActiveCountry}/>\r\n                            </>\r\n                        )) : (europeCountries.length === 0 ? (\r\n                           <LoadingMap/>\r\n                        ) : (<>\r\n                                <EuropeCovidMap regions={europeCountries} legends={regionLegends} active={activeLegend} activeLanguage={activeLanguage}/>\r\n                            </>\r\n                        ))}\r\n                    </div>\r\n                    <MapSelectionButtons active={activeLegend} setActiveLegend={setActiveLegend} views={views} activeLanguage={activeLanguage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <Charts  activeLegend={activeLegend} activeCountry={activeCountry} completeData={completeData} lastUpdate={lastUpdate}\r\n            startDate={startDate} setStartDate={setStartDate} endDate={endDate} setEndDate={setEndDate}\r\n            countryList={countryList} setcountryList={setcountryList} \r\n            selectedCountries={selectedCountries} setSelectedCountries={setSelectedCountries} WorldData={WorldData} setWorldData={setWorldData}\r\n            alert={alert}/>\r\n    </div>   \r\n    );\r\n    else return (\r\n        <div className=\"page\">\r\n            <InfoWindow infoWindow={infoWindow} setInfoWindow={setInfoWindow} activeLanguage={activeLanguage}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\fammi\\corona-dashboard\\src\\reportWebVitals.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\CovidMap.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\Legend.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadCountriesTask.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\TopRow.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\Newsticker.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapSelectionButtons.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\NewstickerLanguage.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\UpdatePanel.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\InfoPanel.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\LoadingMap.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\entities\\LegendItem.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\BuildLegendsTask.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\BuildLegend.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\formatNumberWithSpaces.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\DropdownMenuButton.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\entities\\DropdownMenu.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapFocusButton.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\entities\\NewsItem.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadNewsTask.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadEuropeTask.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\EuropeCovidMap.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\entities\\FocusMenu.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\Tooltipbox.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\Charts.jsx",["136","137"],"import React,  { useState,useEffect } from 'react';\r\nimport \"./Charts.css\"\r\nimport Chart, { plugins } from 'chart.js'\r\nimport ChartMenu from \"./ChartMenu.jsx\"\r\nimport LoadingMap from \"./LoadingMap\";\r\n\r\n// colors for the charts\r\nvar chartColors = [\r\n\t{name:'red',    value: 'rgb(255, 99, 132)'},\r\n\t{name:'orange', value: 'rgb(255, 159, 64)'},\r\n\t{name:'yellow', value: 'rgb(255, 205, 86)'},\r\n\t{name:'green',  value: 'rgb(75, 192, 192)'},\r\n\t{name:'blue',   value: 'rgb(54, 162, 235)'},\r\n\t{name:'purple', value: 'rgb(153, 102, 255)'},\r\n\t{name:'grey',   value: 'rgb(231,233,237)'}\r\n];\r\n\r\n// chart.js options\r\nvar chart_color = Chart.helpers.color;\r\nvar config = {\r\n    type:\"bar\",\r\n    data: {\r\n        labels: [],\r\n        datasets: []\r\n    },\r\n    options: {\r\n        legend: {\r\n          position: 'top',\r\n          labels: {\r\n            fontColor: 'white'\r\n          }\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Chart',\r\n          fontColor: 'white',\r\n          fontSize: 18\r\n        },\r\n        scales: {\r\n            xAxes: [{\r\n                ticks: {\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines: {\r\n                    color: 'rgb(30, 30, 30)',\r\n                    display: true,\r\n                    drawBorder: true,\r\n                    drawOnChartArea: true,\r\n                    drawTicks: false,\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                ticks: {\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines: {\r\n                    color: 'rgb(30, 30, 30)',\r\n                    display: true,\r\n                    drawBorder: true,\r\n                    drawOnChartArea: true,\r\n                    drawTicks: false,\r\n                }\r\n            }]\r\n        }\r\n    },\r\n    plugins:[\r\n        {afterDraw:function(chart) {\r\n            // var goin = false\r\n            if(chart.data.labels.length === 0)    {              //goin = true\r\n            //else if(chart.data.datasets[0].data.length === 0)   //goin = true\r\n            //if (goin) {\r\n                //if(chart.data.datasets[0].data.length === 0){\r\n                 // oder chart.data.datasets.length === 0\r\n                // No data is present\r\n                var ctx = chart.chart.ctx;\r\n                var width = chart.chart.width;\r\n                var height = chart.chart.height;\r\n                chart.clear();\r\n    \r\n                ctx.save();\r\n                ctx.textAlign = 'center';\r\n                ctx.textBaseline = 'middle';\r\n                ctx.font = \"2rem 'Helvetica Nueue'\";\r\n                ctx.fillStyle = \"white\";\r\n                ctx.fillText('No data to display for this category', width / 2, height / 2);\r\n                ctx.restore();\r\n                }\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\n// chart size\r\nconst styles = {\r\n    width: '85%',\r\n    height: \"500px\",\r\n    overflow: \"hidden\"\r\n}\r\n// chart options size\r\nconst styles2 = {\r\n    width: '15%'\r\n}\r\n\r\n// States\r\nconst id = {id:\"ChartID_1\"}\r\nvar init_Chart = true\r\nvar init_States= true\r\nvar chart;\r\nvar showing;\r\nif(chart)   showing = chart.data.datasets\r\nelse        showing = 0\r\nvar number_of_colors = chartColors.length\r\n\r\n\r\nfunction getRelevantData(CountryData, activeLegend, startDate, endDate, step, lastUpdated){\r\n\r\n    // ignore countries with no data\r\n    if(CountryData === undefined) {\r\n        if(chart.data.labels){\r\n            return [[],chart.data.labels]\r\n        } else {\r\n            return [[],[]]\r\n        }\r\n    }\r\n    \r\n    const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\r\n    const diffDaysStart = Math.round(Math.abs((startDate - lastUpdated) / oneDay));\r\n    const NumberDays = Math.round(Math.abs((startDate - endDate) / oneDay));\r\n    var left_index = CountryData.length - 1 - diffDaysStart\r\n    var right_index = CountryData.length - diffDaysStart + NumberDays\r\n    var relevantData = CountryData.slice(left_index,right_index)\r\n\r\n    function data_sorting(case_name){\r\n        var labels = []\r\n        var data = []\r\n        var sum_array = []\r\n\r\n        const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n                            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n                            ];\r\n\r\n        const sum = (accumulator, currentValue) => accumulator + currentValue;\r\n\r\n        for (var i=0; i<relevantData.length; i++){\r\n            var elem = relevantData[i]\r\n            var date = new Date(elem.report_date)\r\n            if(step.label === \"Day\"){\r\n                data.push(elem[case_name])\r\n                labels.push(date.toLocaleDateString())\r\n            }\r\n            else if(step.label === \"Week\"){\r\n                sum_array.push(elem[case_name])\r\n                if(date.getDay() === 0 || i === relevantData.length-1){\r\n                    data.push(sum_array.reduce(sum)/sum_array.length)\r\n                    sum_array = []\r\n                    if (date.getDay() === 0) labels.push(date.toDateString())\r\n                    else                    labels.push(\"last Week\")\r\n                }\r\n            }\r\n            else {\r\n                sum_array.push(elem[case_name])\r\n                if(date.getDate() === 1 || i === relevantData.length-1){\r\n                    data.push(sum_array.reduce(sum)/sum_array.length)\r\n                    sum_array = []\r\n                    if (date.getDate() === 1)    labels.push(monthNames[date.getMonth()])\r\n                    else                         labels.push(\"last Month\")\r\n                }\r\n            }\r\n        }\r\n        return [data,labels]\r\n    }\r\n\r\n    switch(activeLegend){\r\n        \r\n        // !!! \r\n        case \"Vaccinated Population\":\r\n            return [[],[]];\r\n\r\n        // !!! \r\n            case \"Testing Rate\":\r\n            return [[],[]];\r\n\r\n        case \"Cumulative Fatalities\":\r\n            return data_sorting(\"deaths\")\r\n\r\n        // !!!     \r\n        case \"ICU-Occupancy\":\r\n            return [[],[]];\r\n\r\n        case \"7-Day-Incidence\":\r\n            return data_sorting(\"incident_rate\")\r\n\r\n        // !!! \r\n        case \"New Cases(21 Days)\":\r\n            return [[],[]];\r\n\r\n        case \"Cumulative Cases\":\r\n            return data_sorting(\"confirmed\")\r\n\r\n        default:\r\n            return [[],[]];\r\n    }\r\n}\r\n\r\nfunction chart_addDataset(chart,data,labels,activeCountry){\r\n\r\n    // get the right color. If a country in the middle has been deleted, there is a free color. \r\n    // and here I find this color\r\n    var sets = chart.data.datasets.length\r\n    var index;\r\n    if(sets === 0) {\r\n        index = 0\r\n    }\r\n    else if (sets === 1){\r\n        index = chart.data.datasets[0].colorNumber + 1\r\n    } else {\r\n        var numbers = [...Array(number_of_colors).keys()];\r\n        for( let c of chart.data.datasets){\r\n            numbers.splice(numbers.findIndex(x=>x===c.colorNumber),1)\r\n        }\r\n        index = numbers.shift()\r\n    }\r\n    \r\n    chart.data.datasets.push({\r\n        label: activeCountry,\r\n        data: data,\r\n        //color\r\n        backgroundColor: chart_color(chartColors[index].value).alpha(0.2).rgbString(),\r\n        borderColor: chartColors[index].value,\r\n        colorNumber:index,\r\n        pointBackgroundColor: chartColors[index].value,\r\n        borderWidth: 1\r\n    })\r\n    chart.data.labels = labels\r\n}\r\n\r\nfunction chart_deleteDataset(chart,country){\r\n    var datasets = chart.data.datasets\r\n    for(var i=0; i<datasets.length; i++){\r\n        if(datasets[i].label === country){\r\n            datasets.splice(i,1)\r\n        }\r\n    }   \r\n}\r\n\r\n/* --------------------------------------------------------------------------------\r\n| The Component\r\n|-----------------------------------------------------------------------------------\r\n*/\r\nconst Charts = (props) => {\r\n    var completeData = props.completeData\r\n    // States\r\n    // tracks the stepsize selected in the options panel\r\n    const [step, setStep] = useState({ value: 'd', label: 'Day' });\r\n    \r\n    /* --------------------------------------------------------------------------------\r\n    | Init Chart\r\n    |-----------------------------------------------------------------------------------\r\n    | useEffect wird standartmäßig aufgerufen, nachdem die UI gerendert ist. Dann kann das Chart mit \"new Chart\" erst initialisert werden, nach dem Rendern.\r\n    */\r\n    useEffect(()=>{\r\n        if(completeData){\r\n            var ctx = document.getElementById(id.id).getContext(\"2d\");\r\n            chart = new Chart(ctx, config);\r\n            init_Chart = false\r\n            showing = chart.data.datasets\r\n        }\r\n          \r\n    },[completeData])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Handle Map Select\r\n    |-----------------------------------------------------------------------------------\r\n    */\r\n    useEffect(()=>{\r\n            // If the selection on the map wasn't already selected, add it to the selected coutries\r\n            var notselected = true\r\n            for(var selected of props.selectedCountries){\r\n                if(selected.label === props.activeCountry) {\r\n                    notselected = false\r\n                    break\r\n                }\r\n            }\r\n            if(notselected) {\r\n                // if more countries have been selected, than there are colors\r\n                if(showing.length >= number_of_colors)   return props.alert.show(\"Maximum number of countries reached\")\r\n                else                                     props.setSelectedCountries(x => [...x,{value:props.activeCountry,label:props.activeCountry}])\r\n            }\r\n    },[props])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Manage Datasets\r\n    |-----------------------------------------------------------------------------------\r\n    | compares the selected countries with already added to the chart countries\r\n    | adds and deletes datasets\r\n    */\r\n    useEffect(() => {\r\n        // Chart Data rendering\r\n        if(chart){\r\n            var activeCountry = props.activeCountry\r\n            var activeLegend = props.activeLegend\r\n            var CountryData = completeData[activeCountry]\r\n\r\n            // Update Chart Title\r\n            chart.options.title.text = activeLegend\r\n\r\n            // Compare addedCountries and selectedCountries\r\n            //get added Countries\r\n            var compare_added = []\r\n            for (var elem of chart.data.datasets){\r\n                compare_added.push(elem.label)\r\n            }\r\n\r\n            \r\n            var compare_selected = [...props.selectedCountries]\r\n            for(var i=0; i<compare_added.length; i++){\r\n                for(var j=0; j<compare_selected.length; j++){\r\n                    if(compare_added[i] === compare_selected[j].label){\r\n                        compare_added.splice(i,1)\r\n                        compare_selected.splice(j,1)\r\n                        i--;\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n\r\n            // add selected Countries\r\n            for(var country of compare_selected){\r\n                //if(country.label === \"Map\") continue\r\n                if(country.label === \"World\"){ \r\n                    CountryData = props.WorldData\r\n                } else {\r\n                    CountryData = completeData[country.label]\r\n                }\r\n                var [data,labels] = getRelevantData(CountryData,activeLegend, props.startDate, props.endDate, step, new Date(props.lastUpdate))\r\n                chart_addDataset(chart,data,labels,country.label)\r\n\r\n            }\r\n            // delete deselected Countries\r\n            for(var deselect_country of compare_added){\r\n                chart_deleteDataset(chart,deselect_country)\r\n            }\r\n            chart.update()\r\n        }\r\n    },[props, completeData, step])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Range Update\r\n    |-----------------------------------------------------------------------------------\r\n    | Triggered by changes to startDate, endDate, stepsize and the Legend\r\n    | deletes the current datasets and calls Manage Datasets by changeing addedCountries\r\n    */\r\n    useEffect(() => {\r\n        if(chart){\r\n            for(var chart_data of chart.data.datasets){\r\n                var country_name = chart_data.label\r\n                var CountryData;\r\n                if(country_name === \"World\"){ \r\n                    if(props.activeLegend === \"7-Day-Incidence\") return props.alert.info(\"not implemented for World yet\") // 7-Day-Incidence is not correct implemented for WorldData\r\n                    CountryData = props.WorldData\r\n                } else {\r\n                    CountryData = completeData[country_name]\r\n                }\r\n                var [data,labels] = getRelevantData(CountryData,props.activeLegend, props.startDate, props.endDate, step, new Date(props.lastUpdate))\r\n                chart_data.data = data\r\n            }\r\n            chart.data.labels = labels\r\n            chart.update()\r\n        }\r\n    },[props, completeData, step])\r\n\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Initialize States\r\n    |-----------------------------------------------------------------------------------\r\n    | Once the Complete Data is loaded (the if statement) , we do some calculation\r\n    | getting: a list of countries, the data calculated for the whole world\r\n    | and we update the date pickers with the date, the data was last updated\r\n    | While the data is not loaded, display the loading screen\r\n    */\r\n    if(completeData){\r\n        console.log(\"data, \", completeData)\r\n        \r\n        // init_States to avoid looping (only execute once)\r\n        if(props.lastUpdate && init_States){\r\n            init_States = false\r\n            // Update the Datepickers with the lastUpdate constraint\r\n            var now = new Date(props.lastUpdate)\r\n            var lastWeek = new Date(props.lastUpdate)\r\n            lastWeek.setDate(now.getDate() - 7)\r\n            props.setStartDate(lastWeek)\r\n            props.setEndDate(now)\r\n\r\n            // make a list of countries for the addCountry select\r\n            // you can fix a country, which can then not be deselected by adding the property \"isFixed: true\" eg: { value: 'Map', label: 'Map', isFixed: true}\r\n            var country_list = []\r\n            country_list.push({ value: 'World', label: 'World'})\r\n            for(var name in completeData){\r\n                country_list.push({ value: name, label: name })\r\n            }\r\n            props.setcountryList(country_list)\r\n\r\n            // World Data\r\n            var WorldData = []\r\n            var array_length = completeData[country_list[1].label].length\r\n            for(var i=0; i<array_length; i++){\r\n                var obj = {\r\n                    \"deaths\":   0,\r\n                    \"confirmed\":0\r\n                }\r\n                for(var country in completeData){\r\n                    if(completeData[country].length <= i) continue\r\n                    obj.deaths = obj.deaths + completeData[country][i].deaths\r\n                    obj.confirmed = obj.confirmed + completeData[country][i].confirmed\r\n                    obj.report_date = completeData[country][i].report_date\r\n                }\r\n                WorldData.push(obj)\r\n            }\r\n            props.setWorldData(WorldData)\r\n        }\r\n\r\n        \r\n\r\n        return (\r\n            <div className=\"chartContainer\">\r\n                <div style={styles}>\r\n                    <canvas style={{width:'100%',height:'500px'}} id={id.id}/>\r\n                </div>\r\n                <div style={styles2}>\r\n                    <ChartMenu \r\n                        setStep={setStep} \r\n                        startDate={props.startDate} \r\n                        endDate={props.endDate} \r\n                        setEndDate={props.setEndDate} \r\n                        setStartDate={props.setStartDate} \r\n                        lastUpdate={props.lastUpdate}\r\n                        country_list={props.countryList}\r\n                        selectedCountries={props.selectedCountries}\r\n                        setSelectedCountries={props.setSelectedCountries}\r\n                        showing={showing} number_of_colors={number_of_colors}\r\n                        alert={props.alert}\r\n                        />\r\n                </div>    \r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className=\"chartContainer\">\r\n                <LoadingMap />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//<canvas style={{width:'95%',height:'500px'}} id={id.id}/>\r\n\r\nexport default Charts;\r\n","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\TimeRange.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\AddCountry.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\Stepsize.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\InfoWindow.jsx",[],{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":63,"column":12,"nodeType":"144","messageId":"145","endLine":63,"endColumn":30},{"ruleId":"142","severity":1,"message":"146","line":3,"column":17,"nodeType":"144","messageId":"145","endLine":3,"endColumn":24},{"ruleId":"142","severity":1,"message":"147","line":265,"column":13,"nodeType":"144","messageId":"145","endLine":265,"endColumn":23},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"no-unused-vars","'completeRegionData' is assigned a value but never used.","Identifier","unusedVar","'plugins' is defined but never used.","'init_Chart' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]