<<<<<<< HEAD
[{"C:\\Users\\fammi\\corona-dashboard\\src\\index.js":"1","C:\\Users\\fammi\\corona-dashboard\\src\\App.js":"2","C:\\Users\\fammi\\corona-dashboard\\src\\reportWebVitals.js":"3","C:\\Users\\fammi\\corona-dashboard\\src\\components\\CovidMap.jsx":"4","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Legend.jsx":"5","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadCountriesTask.js":"6","C:\\Users\\fammi\\corona-dashboard\\src\\components\\TopRow.jsx":"7","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Newsticker.jsx":"8","C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapSelectionButtons.jsx":"9","C:\\Users\\fammi\\corona-dashboard\\src\\components\\NewstickerLanguage.jsx":"10","C:\\Users\\fammi\\corona-dashboard\\src\\components\\UpdatePanel.jsx":"11","C:\\Users\\fammi\\corona-dashboard\\src\\components\\InfoPanel.jsx":"12","C:\\Users\\fammi\\corona-dashboard\\src\\components\\LoadingMap.jsx":"13","C:\\Users\\fammi\\corona-dashboard\\src\\entities\\LegendItem.js":"14","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\BuildLegendsTask.js":"15","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\BuildLegend.js":"16","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\formatNumberWithSpaces.js":"17","C:\\Users\\fammi\\corona-dashboard\\src\\components\\DropdownMenuButton.jsx":"18","C:\\Users\\fammi\\corona-dashboard\\src\\entities\\DropdownMenu.jsx":"19","C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapFocusButton.jsx":"20","C:\\Users\\fammi\\corona-dashboard\\src\\entities\\NewsItem.js":"21","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadNewsTask.js":"22","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadEuropeTask.js":"23","C:\\Users\\fammi\\corona-dashboard\\src\\components\\EuropeCovidMap.jsx":"24","C:\\Users\\fammi\\corona-dashboard\\src\\entities\\FocusMenu.jsx":"25","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Tooltipbox.jsx":"26","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Charts.jsx":"27","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu.jsx":"28","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\TimeRange.jsx":"29","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\AddCountry.jsx":"30","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\Stepsize.jsx":"31","C:\\Users\\fammi\\corona-dashboard\\src\\components\\InfoWindow.jsx":"32"},{"size":1102,"mtime":1620046508747,"results":"33","hashOfConfig":"34"},{"size":6865,"mtime":1622896823346,"results":"35","hashOfConfig":"34"},{"size":375,"mtime":1616069232826,"results":"36","hashOfConfig":"34"},{"size":7049,"mtime":1621250973887,"results":"37","hashOfConfig":"34"},{"size":1091,"mtime":1621253056349,"results":"38","hashOfConfig":"34"},{"size":6151,"mtime":1622895479405,"results":"39","hashOfConfig":"34"},{"size":836,"mtime":1621252572597,"results":"40","hashOfConfig":"34"},{"size":2857,"mtime":1622983664229,"results":"41","hashOfConfig":"34"},{"size":2038,"mtime":1622894543981,"results":"42","hashOfConfig":"34"},{"size":1321,"mtime":1616069631602,"results":"43","hashOfConfig":"34"},{"size":601,"mtime":1616069232547,"results":"44","hashOfConfig":"34"},{"size":956,"mtime":1621253002365,"results":"45","hashOfConfig":"34"},{"size":474,"mtime":1616069631598,"results":"46","hashOfConfig":"34"},{"size":285,"mtime":1616069232822,"results":"47","hashOfConfig":"34"},{"size":356,"mtime":1616069232829,"results":"48","hashOfConfig":"34"},{"size":4366,"mtime":1622896761689,"results":"49","hashOfConfig":"34"},{"size":285,"mtime":1622895470186,"results":"50","hashOfConfig":"34"},{"size":895,"mtime":1616425974910,"results":"51","hashOfConfig":"34"},{"size":1557,"mtime":1621251358258,"results":"52","hashOfConfig":"34"},{"size":1741,"mtime":1621252573836,"results":"53","hashOfConfig":"34"},{"size":204,"mtime":1616069232823,"results":"54","hashOfConfig":"34"},{"size":1997,"mtime":1622983999858,"results":"55","hashOfConfig":"34"},{"size":11337,"mtime":1622708956666,"results":"56","hashOfConfig":"34"},{"size":8231,"mtime":1622897341871,"results":"57","hashOfConfig":"34"},{"size":1555,"mtime":1621252507080,"results":"58","hashOfConfig":"34"},{"size":3790,"mtime":1622981760253,"results":"59","hashOfConfig":"34"},{"size":16763,"mtime":1616425974908,"results":"60","hashOfConfig":"34"},{"size":992,"mtime":1616069232506,"results":"61","hashOfConfig":"34"},{"size":1137,"mtime":1616069631586,"results":"62","hashOfConfig":"34"},{"size":2116,"mtime":1616425974906,"results":"63","hashOfConfig":"34"},{"size":684,"mtime":1616069232513,"results":"64","hashOfConfig":"34"},{"size":16077,"mtime":1622982570206,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"ofc9fj",{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"68"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"68"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"C:\\Users\\fammi\\corona-dashboard\\src\\index.js",[],["135","136"],"C:\\Users\\fammi\\corona-dashboard\\src\\App.js",["137"],"import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport TopRow from \"./components/TopRow\";\r\nimport InfoPanel from \"./components/InfoPanel\";\r\nimport LoadingMap from \"./components/LoadingMap\";\r\nimport CovidMap from \"./components/CovidMap\";\r\nimport MapSelectionButtons from \"./components/MapSelectionButtons\";\r\nimport LoadCountriesTask from \"./tasks/LoadCountriesTask\";\r\nimport buildLegends from \"./tasks/BuildLegendsTask\";\r\nimport LoadEuropeTask from \"./tasks/LoadEuropeTask.js\";\r\nimport EuropeCovidMap from \"./components/EuropeCovidMap\";\r\nimport Charts from \"./components/Charts\";\r\nimport InfoWindow from \"./components/InfoWindow\";\r\n\r\n// TODO: \r\n// Code für Präsentation auskommentieren\r\n// DropdownMenü Einträge sollten etwas tun oder entfernt werden\r\n// Nicht benötigte MapSelectionButtons entfernen\r\n// Coronadaten für Regions einlesen\r\n// Zugriff für Weltdaten überprüfen (veraltet?)\r\n// Anpassung für mobile Geräte\r\n// Generelles Styling überarbeiten\r\n// Map-Translation: Gebietsnamen übersetzen?\r\n// Map/Legend Anpassungen: Tilelayer-OSM? Farbkorrektur aufgrund von Transparenz?\r\n\r\n\r\n import { useAlert } from 'react-alert';\r\n\r\nconst App = () => {\r\n    // views are the different categories of data we want to display\r\n    const worldViews = [\"Cumulative Cases\", \"New Cases(21 Days)\", \"7-Day-Incidence\", \"Cumulative Fatalities\"];\r\n    const regionViews = [\"Cumulative Cases\", \"New Cases(21 Days)\", \"7-Day-Incidence\", \"ICU-Occupancy\", \"Cumulative Fatalities\"];\r\n    // countries for the world focus\r\n    const [countries, setCountries] = useState([]);\r\n    // \"countries\" aka regions for the regional focus\r\n    const [europeCountries, setEuropeCountries] = useState([]);\r\n    // hook to display the correct (map)legend for the active view\r\n    const [activeLegend, setActiveLegend] = useState(worldViews[0]);\r\n    // hook to display the correct (map)focus: world/regions\r\n    const [activeFocus, setActiveFocus] = useState(\"World\");\r\n    // hook to display the correct Date for the UpdatePanel\r\n    const [lastUpdate, setLastUpdate] = useState();\r\n    const [activeLanguage, setActiveLanguage] = useState(\"English\");\r\n    // hook to display or hide the InfoWindow component.\r\n    const [infoWindow,setInfoWindow] = useState(\"hidden\");\r\n\r\n    //Building the legends for the world focus\r\n    const legends = buildLegends(\r\n        worldViews,\r\n        // These numbers are arbitrary, but the coloured map looks cool.\r\n        [10_000_000, 500_000, 200, 500_000]\r\n    );\r\n    //Doing the same for the region focus, with slightly different values though\r\n    const regionLegends = buildLegends(\r\n        regionViews,\r\n        [200_000, 10_000, 200, 85, 10_000])\r\n    /* -------------------------------------------------\r\n    * Tassias Code : \r\n    * -------------------------------------------------- */\r\n    // Sate um nachzuvollziehen, welche Country auf der CovidMap ausgewählt wurde\r\n    const [activeCountry, setActiveCountry] = useState(\"World\");\r\n    // State um die kompletten Daten der API zu speichern (ohne Formatierung für die CovidMap) für die Charts\r\n    const [completeData, setCompleteData] = useState();//{World:[]}\r\n    const [completeRegionData, setCompleteRegionData] = useState();\r\n    const [countryList,setcountryList] = useState();\r\n    const [startDate, setStartDate] = useState();\r\n    const [endDate, setEndDate] = useState();\r\n    const [selectedCountries,setSelectedCountries] = useState([{ value: 'World', label: 'World'}]);\r\n    const [WorldData, setWorldData] = useState([]);\r\n    const alert = useAlert();\r\n\r\n    //Function to load the Geo- & Coronadata for both focuses\r\n    const load = () => {\r\n        const loadCountriesTask = new LoadCountriesTask();\r\n        loadCountriesTask.load(setCountries, setLastUpdate, setCompleteData);\r\n        const loadEuropeTask = new LoadEuropeTask();\r\n        loadEuropeTask.load(setEuropeCountries, setCompleteRegionData);\r\n    };\r\n\r\n    useEffect(load, []);\r\n      \r\n    if(infoWindow === \"hidden\") return (\r\n    <div style={{overflow: \"hidden\"}}>\r\n        <div className=\"page\">\r\n            <TopRow lastUpdate={lastUpdate} activeFocus={activeFocus} setActiveFocus={setActiveFocus} activeLanguage={activeLanguage} setInfoWindow={setInfoWindow} activeLegend={activeLegend} setActiveLegend={setActiveLegend}/>\r\n            <div style={{height:\"90%\", width:\"100%\", display:\"flex\", flexDirection:\"row\"}}>\r\n                <InfoPanel legends={legends} regionLegends={regionLegends} focus={activeFocus} active={activeLegend} activeLanguage={activeLanguage} setActiveLanguage={setActiveLanguage}/>\r\n                <div style={{height:\"100%\", flexBasis:\"70%\", flexGrow:\"2\", display:\"flex\", flexDirection:\"column\"}}>\r\n                    {/* This div is only there to fix a visual glitch when changing focus */}\r\n                    <div style={{flexGrow:\"16\", flexBasis:\"80%\", width:\"100%\", display:\"flex\"}}>\r\n                        {/* Depending on the activeFocus either the CovidMap or the EuropeCovidMap is displayed. */}\r\n                        {activeFocus === \"World\" ? (countries.length === 0 ? (\r\n                            // If the background loading of the data is not quite done yet, display a loading symbol.\r\n                           <LoadingMap/>\r\n                        ) : (<>\r\n                                <CovidMap countries={countries} legends={legends} active={activeLegend} activeLanguage={activeLanguage} setActiveCountry={setActiveCountry}/>\r\n                            </>\r\n                        )) : (europeCountries.length === 0 ? (\r\n                           <LoadingMap/>\r\n                        ) : (<>\r\n                                <EuropeCovidMap regions={europeCountries} legends={regionLegends} active={activeLegend} activeLanguage={activeLanguage}/>\r\n                            </>\r\n                        ))}\r\n                    </div>\r\n                    <MapSelectionButtons active={activeLegend} setActiveLegend={setActiveLegend} views={[worldViews,regionViews]} activeLanguage={activeLanguage} focus={activeFocus}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <Charts  activeLegend={activeLegend} activeCountry={activeCountry} completeData={completeData} lastUpdate={lastUpdate}\r\n            startDate={startDate} setStartDate={setStartDate} endDate={endDate} setEndDate={setEndDate}\r\n            countryList={countryList} setcountryList={setcountryList} \r\n            selectedCountries={selectedCountries} setSelectedCountries={setSelectedCountries} WorldData={WorldData} setWorldData={setWorldData}\r\n            alert={alert}/>\r\n    </div>   \r\n    );\r\n    else return (\r\n        <div className=\"page\">\r\n            <InfoWindow infoWindow={infoWindow} setInfoWindow={setInfoWindow} activeLanguage={activeLanguage}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\fammi\\corona-dashboard\\src\\reportWebVitals.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\CovidMap.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\Legend.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadCountriesTask.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\TopRow.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\Newsticker.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapSelectionButtons.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\NewstickerLanguage.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\UpdatePanel.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\InfoPanel.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\LoadingMap.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\entities\\LegendItem.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\BuildLegendsTask.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\BuildLegend.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\formatNumberWithSpaces.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\DropdownMenuButton.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\entities\\DropdownMenu.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapFocusButton.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\entities\\NewsItem.js",[],["138","139"],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadNewsTask.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadEuropeTask.js",["140"],"import {features} from \"../data/german_neighbours_noindent_populated4.json\";\r\n\r\nclass LoadEuropeTask{\r\n    setState = null;\r\n    setData = null;\r\n    combinedData = [];\r\n    regions = features;\r\n\r\n    async load (setState, setData) {\r\n        this.setState = setState;\r\n        this.setData = setData;\r\n\r\n        await fetch(\"https://banana-cupcake-00146.herokuapp.com/eu_data.json\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                //validCountryKeys\r\n                const validCKeys = Object.keys(data);\r\n                //Debug-Only\r\n                // const noMatchReg = [];\r\n                // const noMatchCou = [];\r\n                //We iterate over the regions of our GeoJSON.\r\n                for(let i =0; i<this.regions.length; i++){\r\n                    const region = this.regions[i];\r\n\r\n                    //Initializing for regions without data.\r\n                    region.properties.confirmed=0;\r\n                    region.properties.recovered=0;\r\n                    region.properties.fatalities=0;\r\n                    region.properties.active=0;\r\n                    region.properties.mortalityRate=0;\r\n                    region.properties.incidentRate=0;\r\n                    region.properties.last7 =0;\r\n\r\n                    let covidRegion = [];\r\n                    //Matching origin of region (e.g. austria for Burgenland)\r\n                    if(validCKeys.includes(region.properties.origin.toLowerCase())){\r\n                        // validRegionKeys; Only contains valid region keys for matched origins since region names are not unique.\r\n                        const validRegKeys = Object.keys(data[region.properties.origin.toLowerCase()]);\r\n                        //Matching region names.\r\n                        let uppercase = validRegKeys.includes(region.properties.name);\r\n                        let lowercase = validRegKeys.includes(region.properties.name.toLowerCase())\r\n                        if(uppercase || lowercase){\r\n                            //For accessing the data correctly, we need to know if the name is upper or lower case.\r\n                            let regname = (uppercase ? region.properties.name : region.properties.name.toLowerCase());\r\n                            //Correct Covid data for this region\r\n                            covidRegion = data[region.properties.origin.toLowerCase()][regname];\r\n                            //Find latest entry\r\n                            let newestIndex=0;\r\n                            //Since Charts.jsx uses the data as a whole, we add the population of the region\r\n                            data[region.properties.origin.toLowerCase()][regname][newestIndex].population = region.properties.population;\r\n                            for(let j = 1; j<covidRegion.length; j++){\r\n                                let newestdate = new Date(covidRegion[newestIndex].date);\r\n                                let thisdate = new Date(covidRegion[j].date);\r\n                                //In every entry.\r\n                                data[region.properties.origin.toLowerCase()][regname][j].population = region.properties.population;\r\n                                if(thisdate > newestdate){\r\n                                    newestIndex = j;\r\n                                }\r\n                            }\r\n                            //extract/calculate relevant data from Covid data.\r\n                            region.properties.confirmed = covidRegion[newestIndex].totalCases;\r\n                            region.properties.fatalities = covidRegion[newestIndex].totalDeaths;\r\n                            region.properties.active = covidRegion[newestIndex].newCases21Days;\r\n                            region.properties.incidentRate = (covidRegion[newestIndex].newCases7Days*100000)/region.properties.population;\r\n                            region.properties.recovered = region.properties.confirmed - region.properties.fatalities - region.properties.active;\r\n                            region.properties.mortalityRate = region.properties.fatalities/region.properties.confirmed;\r\n                            region.properties.last7 = covidRegion[newestIndex].newCases7Days;\r\n                        }\r\n                        //Debug\r\n                        // else{noMatchReg.push(region.properties.name);}\r\n                    }\r\n                    //Debug\r\n                    // else{noMatchCou.push(region.properties.name);}\r\n                }\r\n            //Debug\r\n            // console.log(\"No Match Region: \");\r\n            // console.log(noMatchReg);\r\n            // console.log(\"No Match Country: \");\r\n            // console.log(noMatchCou);\r\n            //Updating the states.\r\n            this.combinedData.push(data);\r\n            this.setData(this.combinedData);\r\n            this.setState(this.regions);\r\n        })\r\n        await fetch(\"https://banana-cupcake-00146.herokuapp.com/germany_new.json\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                //Debug\r\n                console.log(data)\r\n                let noMatchReg = [];\r\n                //Debug\r\n                // let oneListKeys = [];\r\n                // let matchedKeys = [];\r\n                //Get the keys to iterate through the data\r\n                const validBunKeys = Object.keys(data);\r\n                //We can use these to find the Bundesland to a specific region.\r\n                //This makes it easier to access the ICU data.\r\n                const allRegKeys = [];\r\n                for(let i=0; i<validBunKeys.length; i++){\r\n                    let vbk = validBunKeys[i];\r\n                    if(vbk===\"vacc\"){allRegKeys.push([]); continue;}\r\n                    //Get the keys for the regions in that Bundesland.\r\n                    const validRegKeys = Object.keys(data[vbk]);\r\n                    allRegKeys.push(validRegKeys);\r\n                }\r\n\r\n                //Debug\r\n                // for(let i=0;i<allRegKeys.length; i++){\r\n                //     for(let j=0;j<allRegKeys[i].length; j++){\r\n                //         oneListKeys.push(allRegKeys[i][j]);\r\n                //     }\r\n                // }\r\n\r\n                //Again we iterate over the regions of our GeoJSON.\r\n                for(let i =0; i<this.regions.length; i++){\r\n                    //We already have every region except the german ones.\r\n                    if(this.regions[i].properties.origin!==\"Germany\"){continue;}\r\n                    const region = this.regions[i];\r\n\r\n                    //Initializing for regions without data.\r\n                    region.properties.confirmed=0;\r\n                    region.properties.recovered=0;\r\n                    region.properties.fatalities=0;\r\n                    region.properties.active=0;\r\n                    region.properties.mortalityRate=0;\r\n                    region.properties.its_freie_betten=0;\r\n                    region.properties.its_belegt=0;\r\n                    region.properties.its_freie_beatmung=0;\r\n                    region.properties.its_covid_patienten=0;\r\n                    region.properties.incidentRate=0;\r\n                    region.properties.last7=0;\r\n\r\n                    let covidRegion = [];\r\n                    //Matching region names.\r\n                    let uppercase = false;\r\n                    let lowercase = false;\r\n                    let bundesland = \"\";\r\n                    for(let j=0;j<allRegKeys.length;j++){\r\n                        if(allRegKeys[j].includes(region.properties.name)){uppercase = true; bundesland=validBunKeys[j];}\r\n                        if(allRegKeys[j].includes(region.properties.name.toLowerCase())){lowercase = true; bundesland=validBunKeys[j];}\r\n                    }\r\n                    if(uppercase || lowercase){\r\n                        //For accessing the data correctly, we need to know if the name is upper or lower case.\r\n                        let regname = (uppercase ? region.properties.name : region.properties.name.toLowerCase());\r\n                        //Debug\r\n                        // matchedKeys.push(regname);\r\n                        //Correct Covid data for this region\r\n                        covidRegion = data[bundesland][regname];\r\n                        //Find latest entry\r\n                        let newestIndex=0;\r\n                        //Since Charts.jsx uses the data as a whole, we add the population of the region...\r\n                        data[bundesland][regname][newestIndex].population = region.properties.population;\r\n                        for(let j = 1; j<covidRegion.length; j++){\r\n                            //d is for date.\r\n                            let newestdate = new Date(covidRegion[newestIndex].d);\r\n                            let thisdate = new Date(covidRegion[j].d);\r\n                            //...in every entry.\r\n                            data[bundesland][regname][j].population = region.properties.population;\r\n                            if(thisdate > newestdate){\r\n                                newestIndex = j;\r\n                            }\r\n                        }\r\n                        //Debug\r\n                        // console.log(covidRegion[newestIndex].d);\r\n                        //extract/calculate relevant data from Covid data.\r\n                        //e is for total Cases.\r\n                        region.properties.confirmed = covidRegion[newestIndex].e;\r\n                        //h is for cumulative fatalities\r\n                        region.properties.fatalities = covidRegion[newestIndex].h;\r\n                        //g is for new cases in the last 21 days\r\n                        region.properties.active = covidRegion[newestIndex].g;\r\n                        //f is for new cases in the last 7 days\r\n                        region.properties.incidentRate = (covidRegion[newestIndex].f*100000)/region.properties.population;\r\n                        region.properties.recovered = region.properties.confirmed - region.properties.fatalities - region.properties.active;\r\n                        region.properties.mortalityRate = region.properties.fatalities/region.properties.confirmed;\r\n                        region.properties.its_freie_betten = covidRegion[newestIndex].k;\r\n                        region.properties.its_belegt= covidRegion[newestIndex].j;\r\n                        region.properties.its_freie_beatmung= covidRegion[newestIndex].l;\r\n                        region.properties.its_covid_patienten= covidRegion[newestIndex].i;\r\n                        region.properties.last7 = covidRegion[newestIndex].f;\r\n                    }\r\n                    //Debug\r\n                    // else{noMatchReg.push(region.properties.name);}\r\n                }\r\n            //Debug\r\n            // console.log(\"No Match Region(Ger): \");\r\n            // console.log(noMatchReg);\r\n            // for(let i=0;i<oneListKeys.length;i++){\r\n            //     if(matchedKeys.includes(oneListKeys[i])){continue;}\r\n            //     else{console.log(oneListKeys[i]);}\r\n            // }\r\n            //Updating the states.\r\n            this.combinedData.push(data);\r\n            this.setData(this.combinedData);\r\n            this.setState(this.regions);\r\n        })\r\n    };\r\n\r\n}\r\n\r\nexport default LoadEuropeTask;","C:\\Users\\fammi\\corona-dashboard\\src\\components\\EuropeCovidMap.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\entities\\FocusMenu.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\Tooltipbox.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\Charts.jsx",["141","142"],"import React,  { useState,useEffect } from 'react';\r\nimport \"./Charts.css\"\r\nimport Chart, { plugins } from 'chart.js'\r\nimport ChartMenu from \"./ChartMenu.jsx\"\r\nimport LoadingMap from \"./LoadingMap\";\r\n\r\n// colors for the charts\r\nvar chartColors = [\r\n\t{name:'red',    value: 'rgb(255, 99, 132)'},\r\n\t{name:'orange', value: 'rgb(255, 159, 64)'},\r\n\t{name:'yellow', value: 'rgb(255, 205, 86)'},\r\n\t{name:'green',  value: 'rgb(75, 192, 192)'},\r\n\t{name:'blue',   value: 'rgb(54, 162, 235)'},\r\n\t{name:'purple', value: 'rgb(153, 102, 255)'},\r\n\t{name:'grey',   value: 'rgb(231,233,237)'}\r\n];\r\n\r\n// chart.js options\r\nvar chart_color = Chart.helpers.color;\r\nvar config = {\r\n    type:\"bar\",\r\n    data: {\r\n        labels: [],\r\n        datasets: []\r\n    },\r\n    options: {\r\n        legend: {\r\n          position: 'top',\r\n          labels: {\r\n            fontColor: 'white'\r\n          }\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Chart',\r\n          fontColor: 'white',\r\n          fontSize: 18\r\n        },\r\n        scales: {\r\n            xAxes: [{\r\n                ticks: {\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines: {\r\n                    color: 'rgb(30, 30, 30)',\r\n                    display: true,\r\n                    drawBorder: true,\r\n                    drawOnChartArea: true,\r\n                    drawTicks: false,\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                ticks: {\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines: {\r\n                    color: 'rgb(30, 30, 30)',\r\n                    display: true,\r\n                    drawBorder: true,\r\n                    drawOnChartArea: true,\r\n                    drawTicks: false,\r\n                }\r\n            }]\r\n        }\r\n    },\r\n    plugins:[\r\n        {afterDraw:function(chart) {\r\n            // var goin = false\r\n            if(chart.data.labels.length === 0)    {              //goin = true\r\n            //else if(chart.data.datasets[0].data.length === 0)   //goin = true\r\n            //if (goin) {\r\n                //if(chart.data.datasets[0].data.length === 0){\r\n                 // oder chart.data.datasets.length === 0\r\n                // No data is present\r\n                var ctx = chart.chart.ctx;\r\n                var width = chart.chart.width;\r\n                var height = chart.chart.height;\r\n                chart.clear();\r\n    \r\n                ctx.save();\r\n                ctx.textAlign = 'center';\r\n                ctx.textBaseline = 'middle';\r\n                ctx.font = \"2rem 'Helvetica Nueue'\";\r\n                ctx.fillStyle = \"white\";\r\n                ctx.fillText('No data to display for this category', width / 2, height / 2);\r\n                ctx.restore();\r\n                }\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\n// chart size\r\nconst styles = {\r\n    width: '85%',\r\n    height: \"500px\",\r\n    overflow: \"hidden\"\r\n}\r\n// chart options size\r\nconst styles2 = {\r\n    width: '15%'\r\n}\r\n\r\n// States\r\nconst id = {id:\"ChartID_1\"}\r\nvar init_Chart = true\r\nvar init_States= true\r\nvar chart;\r\nvar showing;\r\nif(chart)   showing = chart.data.datasets\r\nelse        showing = 0\r\nvar number_of_colors = chartColors.length\r\n\r\n\r\nfunction getRelevantData(CountryData, activeLegend, startDate, endDate, step, lastUpdated){\r\n\r\n    // ignore countries with no data\r\n    if(CountryData === undefined) {\r\n        if(chart.data.labels){\r\n            return [[],chart.data.labels]\r\n        } else {\r\n            return [[],[]]\r\n        }\r\n    }\r\n    \r\n    const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\r\n    const diffDaysStart = Math.round(Math.abs((startDate - lastUpdated) / oneDay));\r\n    const NumberDays = Math.round(Math.abs((startDate - endDate) / oneDay));\r\n    var left_index = CountryData.length - 1 - diffDaysStart\r\n    var right_index = CountryData.length - diffDaysStart + NumberDays\r\n    var relevantData = CountryData.slice(left_index,right_index)\r\n\r\n    function data_sorting(case_name){\r\n        var labels = []\r\n        var data = []\r\n        var sum_array = []\r\n\r\n        const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n                            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n                            ];\r\n\r\n        const sum = (accumulator, currentValue) => accumulator + currentValue;\r\n\r\n        for (var i=0; i<relevantData.length; i++){\r\n            var elem = relevantData[i]\r\n            var date = new Date(elem.report_date)\r\n            if(step.label === \"Day\"){\r\n                data.push(elem[case_name])\r\n                labels.push(date.toLocaleDateString())\r\n            }\r\n            else if(step.label === \"Week\"){\r\n                sum_array.push(elem[case_name])\r\n                if(date.getDay() === 0 || i === relevantData.length-1){\r\n                    data.push(sum_array.reduce(sum)/sum_array.length)\r\n                    sum_array = []\r\n                    if (date.getDay() === 0) labels.push(date.toDateString())\r\n                    else                    labels.push(\"last Week\")\r\n                }\r\n            }\r\n            else {\r\n                sum_array.push(elem[case_name])\r\n                if(date.getDate() === 1 || i === relevantData.length-1){\r\n                    data.push(sum_array.reduce(sum)/sum_array.length)\r\n                    sum_array = []\r\n                    if (date.getDate() === 1)    labels.push(monthNames[date.getMonth()])\r\n                    else                         labels.push(\"last Month\")\r\n                }\r\n            }\r\n        }\r\n        return [data,labels]\r\n    }\r\n\r\n    switch(activeLegend){\r\n        \r\n        // !!! \r\n        case \"Vaccinated Population\":\r\n            return [[],[]];\r\n\r\n        // !!! \r\n            case \"Testing Rate\":\r\n            return [[],[]];\r\n\r\n        case \"Cumulative Fatalities\":\r\n            return data_sorting(\"deaths\")\r\n\r\n        // !!!     \r\n        case \"ICU-Occupancy\":\r\n            return [[],[]];\r\n\r\n        case \"7-Day-Incidence\":\r\n            return data_sorting(\"incident_rate\")\r\n\r\n        // !!! \r\n        case \"New Cases(21 Days)\":\r\n            return [[],[]];\r\n\r\n        case \"Cumulative Cases\":\r\n            return data_sorting(\"confirmed\")\r\n\r\n        default:\r\n            return [[],[]];\r\n    }\r\n}\r\n\r\nfunction chart_addDataset(chart,data,labels,activeCountry){\r\n\r\n    // get the right color. If a country in the middle has been deleted, there is a free color. \r\n    // and here I find this color\r\n    var sets = chart.data.datasets.length\r\n    var index;\r\n    if(sets === 0) {\r\n        index = 0\r\n    }\r\n    else if (sets === 1){\r\n        index = chart.data.datasets[0].colorNumber + 1\r\n    } else {\r\n        var numbers = [...Array(number_of_colors).keys()];\r\n        for( let c of chart.data.datasets){\r\n            numbers.splice(numbers.findIndex(x=>x===c.colorNumber),1)\r\n        }\r\n        index = numbers.shift()\r\n    }\r\n    \r\n    chart.data.datasets.push({\r\n        label: activeCountry,\r\n        data: data,\r\n        //color\r\n        backgroundColor: chart_color(chartColors[index].value).alpha(0.2).rgbString(),\r\n        borderColor: chartColors[index].value,\r\n        colorNumber:index,\r\n        pointBackgroundColor: chartColors[index].value,\r\n        borderWidth: 1\r\n    })\r\n    chart.data.labels = labels\r\n}\r\n\r\nfunction chart_deleteDataset(chart,country){\r\n    var datasets = chart.data.datasets\r\n    for(var i=0; i<datasets.length; i++){\r\n        if(datasets[i].label === country){\r\n            datasets.splice(i,1)\r\n        }\r\n    }   \r\n}\r\n\r\n/* --------------------------------------------------------------------------------\r\n| The Component\r\n|-----------------------------------------------------------------------------------\r\n*/\r\nconst Charts = (props) => {\r\n    var completeData = props.completeData\r\n    // States\r\n    // tracks the stepsize selected in the options panel\r\n    const [step, setStep] = useState({ value: 'd', label: 'Day' });\r\n    \r\n    /* --------------------------------------------------------------------------------\r\n    | Init Chart\r\n    |-----------------------------------------------------------------------------------\r\n    | useEffect wird standartmäßig aufgerufen, nachdem die UI gerendert ist. Dann kann das Chart mit \"new Chart\" erst initialisert werden, nach dem Rendern.\r\n    */\r\n    useEffect(()=>{\r\n        if(completeData){\r\n            var ctx = document.getElementById(id.id).getContext(\"2d\");\r\n            chart = new Chart(ctx, config);\r\n            init_Chart = false\r\n            showing = chart.data.datasets\r\n        }\r\n          \r\n    },[completeData])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Handle Map Select\r\n    |-----------------------------------------------------------------------------------\r\n    */\r\n    useEffect(()=>{\r\n            // If the selection on the map wasn't already selected, add it to the selected coutries\r\n            var notselected = true\r\n            for(var selected of props.selectedCountries){\r\n                if(selected.label === props.activeCountry) {\r\n                    notselected = false\r\n                    break\r\n                }\r\n            }\r\n            if(notselected) {\r\n                // if more countries have been selected, than there are colors\r\n                if(showing.length >= number_of_colors)   return props.alert.show(\"Maximum number of countries reached\")\r\n                else                                     props.setSelectedCountries(x => [...x,{value:props.activeCountry,label:props.activeCountry}])\r\n            }\r\n    },[props])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Manage Datasets\r\n    |-----------------------------------------------------------------------------------\r\n    | compares the selected countries with already added to the chart countries\r\n    | adds and deletes datasets\r\n    */\r\n    useEffect(() => {\r\n        // Chart Data rendering\r\n        if(chart){\r\n            var activeCountry = props.activeCountry\r\n            var activeLegend = props.activeLegend\r\n            var CountryData = completeData[activeCountry]\r\n\r\n            // Update Chart Title\r\n            chart.options.title.text = activeLegend\r\n\r\n            // Compare addedCountries and selectedCountries\r\n            //get added Countries\r\n            var compare_added = []\r\n            for (var elem of chart.data.datasets){\r\n                compare_added.push(elem.label)\r\n            }\r\n\r\n            \r\n            var compare_selected = [...props.selectedCountries]\r\n            for(var i=0; i<compare_added.length; i++){\r\n                for(var j=0; j<compare_selected.length; j++){\r\n                    if(compare_added[i] === compare_selected[j].label){\r\n                        compare_added.splice(i,1)\r\n                        compare_selected.splice(j,1)\r\n                        i--;\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n\r\n            // add selected Countries\r\n            for(var country of compare_selected){\r\n                //if(country.label === \"Map\") continue\r\n                if(country.label === \"World\"){ \r\n                    CountryData = props.WorldData\r\n                } else {\r\n                    CountryData = completeData[country.label]\r\n                }\r\n                var [data,labels] = getRelevantData(CountryData,activeLegend, props.startDate, props.endDate, step, new Date(props.lastUpdate))\r\n                chart_addDataset(chart,data,labels,country.label)\r\n\r\n            }\r\n            // delete deselected Countries\r\n            for(var deselect_country of compare_added){\r\n                chart_deleteDataset(chart,deselect_country)\r\n            }\r\n            chart.update()\r\n        }\r\n    },[props, completeData, step])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Range Update\r\n    |-----------------------------------------------------------------------------------\r\n    | Triggered by changes to startDate, endDate, stepsize and the Legend\r\n    | deletes the current datasets and calls Manage Datasets by changeing addedCountries\r\n    */\r\n    useEffect(() => {\r\n        if(chart){\r\n            for(var chart_data of chart.data.datasets){\r\n                var country_name = chart_data.label\r\n                var CountryData;\r\n                if(country_name === \"World\"){ \r\n                    if(props.activeLegend === \"7-Day-Incidence\") return props.alert.info(\"not implemented for World yet\") // 7-Day-Incidence is not correct implemented for WorldData\r\n                    CountryData = props.WorldData\r\n                } else {\r\n                    CountryData = completeData[country_name]\r\n                }\r\n                var [data,labels] = getRelevantData(CountryData,props.activeLegend, props.startDate, props.endDate, step, new Date(props.lastUpdate))\r\n                chart_data.data = data\r\n            }\r\n            chart.data.labels = labels\r\n            chart.update()\r\n        }\r\n    },[props, completeData, step])\r\n\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Initialize States\r\n    |-----------------------------------------------------------------------------------\r\n    | Once the Complete Data is loaded (the if statement) , we do some calculation\r\n    | getting: a list of countries, the data calculated for the whole world\r\n    | and we update the date pickers with the date, the data was last updated\r\n    | While the data is not loaded, display the loading screen\r\n    */\r\n    if(completeData){\r\n        console.log(\"data, \", completeData)\r\n        \r\n        // init_States to avoid looping (only execute once)\r\n        if(props.lastUpdate && init_States){\r\n            init_States = false\r\n            // Update the Datepickers with the lastUpdate constraint\r\n            var now = new Date(props.lastUpdate)\r\n            var lastWeek = new Date(props.lastUpdate)\r\n            lastWeek.setDate(now.getDate() - 7)\r\n            props.setStartDate(lastWeek)\r\n            props.setEndDate(now)\r\n\r\n            // make a list of countries for the addCountry select\r\n            // you can fix a country, which can then not be deselected by adding the property \"isFixed: true\" eg: { value: 'Map', label: 'Map', isFixed: true}\r\n            var country_list = []\r\n            country_list.push({ value: 'World', label: 'World'})\r\n            for(var name in completeData){\r\n                country_list.push({ value: name, label: name })\r\n            }\r\n            props.setcountryList(country_list)\r\n\r\n            // World Data\r\n            var WorldData = []\r\n            var array_length = completeData[country_list[1].label].length\r\n            for(var i=0; i<array_length; i++){\r\n                var obj = {\r\n                    \"deaths\":   0,\r\n                    \"confirmed\":0\r\n                }\r\n                for(var country in completeData){\r\n                    if(completeData[country].length <= i) continue\r\n                    obj.deaths = obj.deaths + completeData[country][i].deaths\r\n                    obj.confirmed = obj.confirmed + completeData[country][i].confirmed\r\n                    obj.report_date = completeData[country][i].report_date\r\n                }\r\n                WorldData.push(obj)\r\n            }\r\n            props.setWorldData(WorldData)\r\n        }\r\n\r\n        \r\n\r\n        return (\r\n            <div className=\"chartContainer\">\r\n                <div style={styles}>\r\n                    <canvas style={{width:'100%',height:'500px'}} id={id.id}/>\r\n                </div>\r\n                <div style={styles2}>\r\n                    <ChartMenu \r\n                        setStep={setStep} \r\n                        startDate={props.startDate} \r\n                        endDate={props.endDate} \r\n                        setEndDate={props.setEndDate} \r\n                        setStartDate={props.setStartDate} \r\n                        lastUpdate={props.lastUpdate}\r\n                        country_list={props.countryList}\r\n                        selectedCountries={props.selectedCountries}\r\n                        setSelectedCountries={props.setSelectedCountries}\r\n                        showing={showing} number_of_colors={number_of_colors}\r\n                        alert={props.alert}\r\n                        />\r\n                </div>    \r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className=\"chartContainer\">\r\n                <LoadingMap />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//<canvas style={{width:'95%',height:'500px'}} id={id.id}/>\r\n\r\nexport default Charts;\r\n","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\TimeRange.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\AddCountry.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\Stepsize.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\InfoWindow.jsx",[],{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","severity":1,"message":"148","line":64,"column":12,"nodeType":"149","messageId":"150","endLine":64,"endColumn":30},{"ruleId":"143","replacedBy":"151"},{"ruleId":"145","replacedBy":"152"},{"ruleId":"147","severity":1,"message":"153","line":90,"column":21,"nodeType":"149","messageId":"150","endLine":90,"endColumn":31},{"ruleId":"147","severity":1,"message":"154","line":3,"column":17,"nodeType":"149","messageId":"150","endLine":3,"endColumn":24},{"ruleId":"147","severity":1,"message":"155","line":265,"column":13,"nodeType":"149","messageId":"150","endLine":265,"endColumn":23},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"no-unused-vars","'completeRegionData' is assigned a value but never used.","Identifier","unusedVar",["156"],["157"],"'noMatchReg' is assigned a value but never used.","'plugins' is defined but never used.","'init_Chart' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
=======
[{"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/index.js":"1","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/reportWebVitals.js":"2","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/App.js":"3","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/tasks/LoadEuropeTask.js":"4","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/tasks/BuildLegendsTask.js":"5","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/tasks/LoadCountriesTask.js":"6","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/InfoPanel.jsx":"7","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/LoadingMap.jsx":"8","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/TopRow.jsx":"9","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/CovidMap_Class.jsx":"10","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/MapSelectionButtons.jsx":"11","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/ChartsWrapper.jsx":"12","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/EuropeCovidMap.jsx":"13","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/Vacc.jsx":"14","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/InfoWindow.jsx":"15","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/tasks/BuildLegend.js":"16","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/ChartMenu/ChartMenu_Vacc.jsx":"17","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/tasks/formatNumberWithSpaces.js":"18","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/Legend.jsx":"19","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/NewstickerLanguage.jsx":"20","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/Newsticker.jsx":"21","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/UpdatePanel.jsx":"22","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/DropdownMenuButton.jsx":"23","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/MapFocusButton.jsx":"24","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/Tooltipbox.jsx":"25","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/Charts.jsx":"26","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/Charts_Region.jsx":"27","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/ChartMenu/TimeRange.jsx":"28","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/ChartMenu/Stepsize.jsx":"29","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/entities/LegendItem.js":"30","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/ChartMenu.jsx":"31","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/tasks/LoadNewsTask.js":"32","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/entities/DropdownMenu.jsx":"33","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/entities/FocusMenu.jsx":"34","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/ChartMenu/AddCountry.jsx":"35","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/ChartMenu/AddRegion.jsx":"36","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/entities/NewsItem.js":"37","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/Vacc_T.jsx":"38","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/ChartMenu/Switches.jsx":"39"},{"size":1066,"mtime":1617627062000,"results":"40","hashOfConfig":"41"},{"size":362,"mtime":1617627062000,"results":"42","hashOfConfig":"41"},{"size":7956,"mtime":1623623409082,"results":"43","hashOfConfig":"41"},{"size":9448,"mtime":1623540454968,"results":"44","hashOfConfig":"41"},{"size":344,"mtime":1617627062000,"results":"45","hashOfConfig":"41"},{"size":6036,"mtime":1623521141346,"results":"46","hashOfConfig":"41"},{"size":930,"mtime":1622703322000,"results":"47","hashOfConfig":"41"},{"size":455,"mtime":1617627062000,"results":"48","hashOfConfig":"41"},{"size":819,"mtime":1622703322000,"results":"49","hashOfConfig":"41"},{"size":7971,"mtime":1623508814184,"results":"50","hashOfConfig":"41"},{"size":1972,"mtime":1623525506353,"results":"51","hashOfConfig":"41"},{"size":4015,"mtime":1623631525265,"results":"52","hashOfConfig":"41"},{"size":8865,"mtime":1623544187912,"results":"53","hashOfConfig":"41"},{"size":11384,"mtime":1623623079374,"results":"54","hashOfConfig":"41"},{"size":16944,"mtime":1623618176362,"results":"55","hashOfConfig":"41"},{"size":4213,"mtime":1623521060769,"results":"56","hashOfConfig":"41"},{"size":1991,"mtime":1623605787744,"results":"57","hashOfConfig":"41"},{"size":275,"mtime":1623525193620,"results":"58","hashOfConfig":"41"},{"size":1057,"mtime":1622703322000,"results":"59","hashOfConfig":"41"},{"size":1275,"mtime":1617627062000,"results":"60","hashOfConfig":"41"},{"size":2785,"mtime":1623525539704,"results":"61","hashOfConfig":"41"},{"size":578,"mtime":1617627062000,"results":"62","hashOfConfig":"41"},{"size":864,"mtime":1617627062000,"results":"63","hashOfConfig":"41"},{"size":1693,"mtime":1622703322000,"results":"64","hashOfConfig":"41"},{"size":3697,"mtime":1623525628125,"results":"65","hashOfConfig":"41"},{"size":19409,"mtime":1623634402047,"results":"66","hashOfConfig":"41"},{"size":22155,"mtime":1623636588899,"results":"67","hashOfConfig":"41"},{"size":1202,"mtime":1623631810226,"results":"68","hashOfConfig":"41"},{"size":829,"mtime":1623632120140,"results":"69","hashOfConfig":"41"},{"size":275,"mtime":1617627062000,"results":"70","hashOfConfig":"41"},{"size":3730,"mtime":1623632189633,"results":"71","hashOfConfig":"41"},{"size":1951,"mtime":1623525165665,"results":"72","hashOfConfig":"41"},{"size":1502,"mtime":1622703322000,"results":"73","hashOfConfig":"41"},{"size":1502,"mtime":1623630866506,"results":"74","hashOfConfig":"41"},{"size":2039,"mtime":1623061078000,"results":"75","hashOfConfig":"41"},{"size":3060,"mtime":1623516300236,"results":"76","hashOfConfig":"41"},{"size":196,"mtime":1617627062000,"results":"77","hashOfConfig":"41"},{"size":10448,"mtime":1623629979687,"results":"78","hashOfConfig":"41"},{"size":3989,"mtime":1623631404490,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"a3zox",{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/index.js",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/reportWebVitals.js",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/App.js",["159"],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/tasks/LoadEuropeTask.js",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/tasks/BuildLegendsTask.js",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/tasks/LoadCountriesTask.js",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/InfoPanel.jsx",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/LoadingMap.jsx",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/TopRow.jsx",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/CovidMap_Class.jsx",["160","161","162"],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/MapSelectionButtons.jsx",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/ChartsWrapper.jsx",["163","164","165"],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/EuropeCovidMap.jsx",["166","167","168"],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/Vacc.jsx",["169","170","171","172","173","174","175","176","177","178","179"],"import React,  { useState,useEffect } from 'react';\nimport \"./Charts.css\"\nimport Chart, { plugins } from 'chart.js'\nimport ChartMenu_Vacc from \"./ChartMenu/ChartMenu_Vacc.jsx\"\nimport LoadingMap from \"./LoadingMap\";\n\n// Global Var\nvar German_population = 83200000;\n\n// chart.js options\nvar chart_color = Chart.helpers.color;\nvar config = {\n    type:\"line\",\n    data: {\n        labels: [],\n        datasets: []\n    },\n    options: {\n        legend: {\n          position: 'top',\n          labels: {\n            fontColor: 'white'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Chart',\n          fontColor: 'white',\n          fontSize: 18\n        },\n        scales: {\n            xAxes: [{\n                ticks: {\n                    fontColor: 'white'\n                },\n                gridLines: {\n                    color: 'rgb(30, 30, 30)',\n                    display: true,\n                    drawBorder: true,\n                    drawOnChartArea: true,\n                    drawTicks: false,\n                }\n            }],\n            yAxes: [{\n                ticks: {\n                    fontColor: 'white',\n                    beginAtZero:true\n                },\n                gridLines: {\n                    color: 'rgb(30, 30, 30)',\n                    display: true,\n                    drawBorder: true,\n                    drawOnChartArea: true,\n                    drawTicks: false,\n                },\n                scaleLabel: {\n                    display: false,\n                    labelString: 'percent [%]',\n                  }\n            }]\n        }\n    },\n    plugins:[\n        {afterDraw:function(chart) {\n            // var goin = false\n            if(!chart.data.labels || chart.data.labels.length === 0)    {              //goin = true\n            //else if(chart.data.datasets[0].data.length === 0)   //goin = true\n            //if (goin) {\n                //if(chart.data.datasets[0].data.length === 0){\n                 // oder chart.data.datasets.length === 0\n                // No data is present\n                var ctx = chart.chart.ctx;\n                var width = chart.chart.width;\n                var height = chart.chart.height;\n                chart.clear();\n    \n                ctx.save();\n                ctx.textAlign = 'center';\n                ctx.textBaseline = 'middle';\n                ctx.font = \"2rem 'Helvetica Nueue'\";\n                ctx.fillStyle = \"white\";\n                ctx.fillText('Please Select a Region', width / 2, height / 2);\n                ctx.restore();\n                }\n            }\n        }\n    ]\n};\n\n// chart size\nconst styles = {\n    width: '85%',\n    height: \"500px\",\n    overflow: \"hidden\"\n}\n// chart options size\nconst styles2 = {\n    width: '15%'\n}\n\n// States\nconst id = {id:\"ChartID_1\"}\nvar chart;\n\nfunction getRelevantData(CountryData, activeLegend, startDate, endDate, step, lastUpdated,relative){\n\n    // ignore countries with no data\n    if(CountryData === undefined) {\n        if(chart.data.labels){\n            return [[],chart.data.labels]\n        } else {\n            return [[],[]]\n        }\n    }\n    \n    const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n    const diffDaysStart = Math.round(Math.abs((startDate - lastUpdated) / oneDay));\n    const NumberDays = Math.round(Math.abs((startDate - endDate) / oneDay));\n    var left_index = CountryData.length - 1 - diffDaysStart\n    var right_index = CountryData.length - diffDaysStart + NumberDays\n    var relevantData = CountryData.slice(left_index,right_index)\n\n    function roundTo2(num) {\n        return +(Math.round(num + \"e+2\")  + \"e-2\");\n    }\n    function roundTo4(num) {\n        return +(Math.round(num + \"e+4\")  + \"e-4\");\n    }\n    function data_sorting(f){\n        var labels = []\n        var data = []\n        var sum_array = []\n\n        const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n                            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n                            ];\n\n        const sum = (accumulator, currentValue) => Number(accumulator) + Number(currentValue);\n\n        for (var i=0; i<relevantData.length; i++){\n            var elem = relevantData[i]\n            var date = new Date(elem.date)\n            if(step.label === \"Day\"){\n                data.push(roundTo2(f(elem)))\n                labels.push(date.toLocaleDateString())\n            }\n            else if(step.label === \"Week\"){\n                sum_array.push(f(elem))\n                if(date.getDay() === 0 || i === relevantData.length-1){\n                    data.push(roundTo2(sum_array.reduce(sum)/sum_array.length))\n                    sum_array = []\n                    if (date.getDay() === 0) labels.push(date.toDateString())\n                    else                    labels.push(\"last Week\")\n                }\n            }\n            else {\n                sum_array.push(f(elem))\n                if(date.getDate() === 1 || i === relevantData.length-1){\n                    data.push(roundTo2(sum_array.reduce(sum)/sum_array.length))\n                    sum_array = []\n                    if (date.getDate() === 1)    labels.push(monthNames[date.getMonth()])\n                    else                         labels.push(\"last Month\")\n                }\n            }\n        }\n        return [data,labels]\n    }\n\n    if (activeLegend === \"first vacc\"){\n        if(relative) return data_sorting( x => x[\"first vacc\"]/German_population*100)\n        else return data_sorting(x => x[\"first vacc\"])\n    }\n    else if (activeLegend === \"second vacc\"){\n        if(relative) return data_sorting( x => x[\"second vacc\"]/German_population*100)\n        else return data_sorting(x => x[\"second vacc\"])\n    }\n    else {\n        return [[],[]];\n    }\n}\n\n/* --------------------------------------------------------------------------------\n| The Component\n|-----------------------------------------------------------------------------------\n*/\nconst Charts_Vacc = (props) => {\n    // States\n    // tracks the stepsize selected in the options panel\n    const [step, setStep] = useState({ value: 'd', label: 'Day' });\n    const [startDate, setStartDate] = useState();\n    const [endDate, setEndDate] = useState();\n    const [relativeState, setRelativeState] = useState(false);\n    \n\n    /* --------------------------------------------------------------------------------\n    |  Chart Init\n    |-----------------------------------------------------------------------------------\n    | \n    */\n    useEffect(() => {\n        if(props.completeRegionData){\n            if(props.completeRegionData.length > 1){\n                // Set States\n                var now = new Date(props.lastUpdate)\n                var lastWeek = new Date(props.lastUpdate)\n                lastWeek.setDate(now.getDate() - 7)\n                setStartDate(lastWeek)\n                setEndDate(now)\n                // Set Chart\n                var ctx = document.getElementById(id.id).getContext(\"2d\");\n                chart = new Chart(ctx, config);\n                /*\n                for (var country of props.completeRegionData[0]){\n                    if (country === \"Germany\"){\n                        German_population = country[0].population\n                        break\n                    }\n                }\n                */\n            }\n        }\n    },[props.completeRegionData])\n\n\n    /* --------------------------------------------------------------------------------\n    |  Chart Update\n    |-----------------------------------------------------------------------------------\n    | \n    */\n    useEffect(() => {\n        if(props.completeRegionData){\n            if(props.completeRegionData.length > 1){\n                startDate = new Date(\"1/1/21\")\n                endDate = new Date(\"1/2/21\")\n                // Language Support\n                var labels_names = {\n                    dataset:{\n                        English:[\"First Vaccination\", \"Second Vaccination\"],\n                        Deutsch:[\"Erstimpfung\", \"Zweitimpfung\"]\n                    },\n                    title:{\n                        English:\"Vaccinations in Germany\",\n                        Deutsch:\"Impfungen in Deutschland\"\n                    }\n                }\n                //First Vacc\n                var VaccData = props.completeRegionData[1].vacc\n                var [data,labels] = getRelevantData(VaccData,\"first vacc\", startDate, endDate, step, new Date(props.lastUpdate),relativeState)\n                var color = \"rgb(75, 192, 192)\"\n                chart.data.datasets.push({\n                    label: labels_names.dataset[props.activeLanguage][0],\n                    data: data,\n                    //color\n                    backgroundColor: chart_color(color).alpha(0.2).rgbString(),\n                    borderColor: color,\n                    colorNumber:0,\n                    pointBackgroundColor: color,\n                    borderWidth: 1\n                })\n                //Second Vacc\n                var [data,labels] = getRelevantData(VaccData,\"second vacc\", startDate, endDate, step, new Date(props.lastUpdate),relativeState)\n                var color = \"rgb(75, 192, 150)\"\n                chart.data.datasets.push({\n                    label: labels_names.dataset[props.activeLanguage][1],\n                    data: data,\n                    //color\n                    backgroundColor: chart_color(color).alpha(0.2).rgbString(),\n                    borderColor: color,\n                    colorNumber:1,\n                    pointBackgroundColor: color,\n                    borderWidth: 1\n                })\n                // Chart Labels\n                chart.options.title.text = labels_names.title[props.activeLanguage]\n                chart.data.labels = labels\n                chart.update()\n            }\n        }\n    },[props.startDate, props.endDate, step, relativeState])\n\n    /* --------------------------------------------------------------------------------\n    | Loading Indicator\n    |-----------------------------------------------------------------------------------\n    | Show the loading Indicator until the data is loaded\n    */\n    if(props.completeRegionData){\n        if(props.completeRegionData.length > 1){\n            return (\n                <div className=\"chartContainer\">\n                    <div style={styles}>\n                        <canvas style={{width:'100%',height:'500px'}} id={id.id}/>\n                    </div>\n                    <div style={styles2}>\n                        <ChartMenu_Vacc\n                            setStep={setStep} \n                            startDate={startDate} \n                            endDate={endDate} \n                            setEndDate={setEndDate} \n                            setStartDate={setStartDate} \n                            lastUpdate={props.lastUpdate}\n                            alert={props.alert}\n                            relativeState={relativeState}\n                            setRelativeState={setRelativeState}\n                            />\n                    </div>    \n                </div>\n            );\n        }\n    } \n    return (\n        <div className=\"chartContainer\">\n            <LoadingMap />\n        </div>\n    )\n}\n//<canvas style={{width:'95%',height:'500px'}} id={id.id}/>\n\nexport default Charts_Vacc;\n","/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/InfoWindow.jsx",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/tasks/BuildLegend.js",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/ChartMenu/ChartMenu_Vacc.jsx",["180","181"],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/tasks/formatNumberWithSpaces.js",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/Legend.jsx",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/NewstickerLanguage.jsx",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/Newsticker.jsx",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/UpdatePanel.jsx",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/DropdownMenuButton.jsx",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/MapFocusButton.jsx",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/Tooltipbox.jsx",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/Charts.jsx",["182","183","184","185","186","187","188"],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/Charts_Region.jsx",["189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205"],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/ChartMenu/TimeRange.jsx",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/ChartMenu/Stepsize.jsx",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/entities/LegendItem.js",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/ChartMenu.jsx",["206"],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/tasks/LoadNewsTask.js",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/entities/DropdownMenu.jsx",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/entities/FocusMenu.jsx",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/ChartMenu/AddCountry.jsx",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/ChartMenu/AddRegion.jsx",["207"],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/entities/NewsItem.js",[],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/Vacc_T.jsx",["208","209","210","211","212","213","214","215","216"],"/home/tassia/Uni/iap/github/IAP_Corona-Dashboard/src/components/ChartMenu/Switches.jsx",["217","218"],{"ruleId":"219","severity":1,"message":"220","line":88,"column":29,"nodeType":"221","endLine":88,"endColumn":165},{"ruleId":"222","severity":1,"message":"223","line":18,"column":9,"nodeType":"224","messageId":"225","endLine":18,"endColumn":14},{"ruleId":"226","severity":1,"message":"227","line":37,"column":29,"nodeType":"228","messageId":"229","endLine":37,"endColumn":31},{"ruleId":"226","severity":1,"message":"227","line":37,"column":78,"nodeType":"228","messageId":"229","endLine":37,"endColumn":80},{"ruleId":"222","severity":1,"message":"230","line":3,"column":27,"nodeType":"224","messageId":"225","endLine":3,"endColumn":36},{"ruleId":"219","severity":1,"message":"231","line":42,"column":15,"nodeType":"221","endLine":48,"endColumn":90},{"ruleId":"219","severity":1,"message":"220","line":51,"column":15,"nodeType":"221","endLine":61,"endColumn":21},{"ruleId":"226","severity":1,"message":"227","line":30,"column":29,"nodeType":"228","messageId":"229","endLine":30,"endColumn":31},{"ruleId":"226","severity":1,"message":"227","line":30,"column":78,"nodeType":"228","messageId":"229","endLine":30,"endColumn":80},{"ruleId":"226","severity":1,"message":"227","line":30,"column":139,"nodeType":"228","messageId":"229","endLine":30,"endColumn":141},{"ruleId":"222","severity":1,"message":"232","line":3,"column":17,"nodeType":"224","messageId":"225","endLine":3,"endColumn":24},{"ruleId":"222","severity":1,"message":"233","line":126,"column":14,"nodeType":"224","messageId":"225","endLine":126,"endColumn":22},{"ruleId":"234","severity":1,"message":"235","line":222,"column":7,"nodeType":"236","endLine":222,"endColumn":33,"suggestions":"237"},{"ruleId":"238","severity":1,"message":"239","line":233,"column":17,"nodeType":"224","messageId":"240","endLine":233,"endColumn":26},{"ruleId":"234","severity":1,"message":"241","line":233,"column":29,"nodeType":"242","endLine":233,"endColumn":47},{"ruleId":"238","severity":1,"message":"243","line":234,"column":17,"nodeType":"224","messageId":"240","endLine":234,"endColumn":24},{"ruleId":"234","severity":1,"message":"244","line":234,"column":27,"nodeType":"242","endLine":234,"endColumn":45},{"ruleId":"245","severity":1,"message":"246","line":261,"column":22,"nodeType":"224","messageId":"247","endLine":261,"endColumn":26},{"ruleId":"245","severity":1,"message":"248","line":261,"column":27,"nodeType":"224","messageId":"247","endLine":261,"endColumn":33},{"ruleId":"245","severity":1,"message":"249","line":262,"column":21,"nodeType":"224","messageId":"247","endLine":262,"endColumn":26},{"ruleId":"219","severity":1,"message":"250","line":294,"column":25,"nodeType":"221","endLine":304,"endColumn":31},{"ruleId":"222","severity":1,"message":"251","line":8,"column":10,"nodeType":"224","messageId":"225","endLine":8,"endColumn":16},{"ruleId":"222","severity":1,"message":"252","line":8,"column":17,"nodeType":"224","messageId":"225","endLine":8,"endColumn":22},{"ruleId":"222","severity":1,"message":"253","line":1,"column":18,"nodeType":"224","messageId":"225","endLine":1,"endColumn":26},{"ruleId":"222","severity":1,"message":"232","line":3,"column":17,"nodeType":"224","messageId":"225","endLine":3,"endColumn":24},{"ruleId":"222","severity":1,"message":"254","line":186,"column":13,"nodeType":"224","messageId":"225","endLine":186,"endColumn":22},{"ruleId":"222","severity":1,"message":"255","line":301,"column":13,"nodeType":"224","messageId":"225","endLine":301,"endColumn":23},{"ruleId":"234","severity":1,"message":"256","line":327,"column":7,"nodeType":"236","endLine":327,"endColumn":28,"suggestions":"257"},{"ruleId":"234","severity":1,"message":"258","line":380,"column":7,"nodeType":"236","endLine":380,"endColumn":46,"suggestions":"259"},{"ruleId":"234","severity":1,"message":"260","line":410,"column":7,"nodeType":"236","endLine":410,"endColumn":92,"suggestions":"261"},{"ruleId":"222","severity":1,"message":"253","line":1,"column":18,"nodeType":"224","messageId":"225","endLine":1,"endColumn":26},{"ruleId":"222","severity":1,"message":"232","line":3,"column":17,"nodeType":"224","messageId":"225","endLine":3,"endColumn":24},{"ruleId":"222","severity":1,"message":"262","line":112,"column":5,"nodeType":"224","messageId":"225","endLine":112,"endColumn":16},{"ruleId":"245","severity":1,"message":"263","line":171,"column":22,"nodeType":"224","messageId":"247","endLine":171,"endColumn":26},{"ruleId":"222","severity":1,"message":"254","line":201,"column":13,"nodeType":"224","messageId":"225","endLine":201,"endColumn":22},{"ruleId":"245","severity":1,"message":"263","line":210,"column":22,"nodeType":"224","messageId":"247","endLine":210,"endColumn":26},{"ruleId":"222","severity":1,"message":"255","line":341,"column":13,"nodeType":"224","messageId":"225","endLine":341,"endColumn":23},{"ruleId":"245","severity":1,"message":"264","line":364,"column":25,"nodeType":"224","messageId":"247","endLine":364,"endColumn":39},{"ruleId":"245","severity":1,"message":"265","line":365,"column":25,"nodeType":"224","messageId":"247","endLine":365,"endColumn":38},{"ruleId":"234","severity":1,"message":"256","line":385,"column":7,"nodeType":"236","endLine":385,"endColumn":27,"suggestions":"266"},{"ruleId":"245","severity":1,"message":"267","line":427,"column":25,"nodeType":"224","messageId":"247","endLine":427,"endColumn":28},{"ruleId":"234","severity":1,"message":"268","line":446,"column":7,"nodeType":"236","endLine":446,"endColumn":56,"suggestions":"269"},{"ruleId":"245","severity":1,"message":"267","line":468,"column":25,"nodeType":"224","messageId":"247","endLine":468,"endColumn":28},{"ruleId":"234","severity":1,"message":"270","line":481,"column":7,"nodeType":"236","endLine":481,"endColumn":92,"suggestions":"271"},{"ruleId":"245","severity":1,"message":"272","line":504,"column":25,"nodeType":"224","messageId":"247","endLine":504,"endColumn":28},{"ruleId":"245","severity":1,"message":"273","line":508,"column":30,"nodeType":"224","messageId":"247","endLine":508,"endColumn":35},{"ruleId":"234","severity":1,"message":"256","line":516,"column":7,"nodeType":"236","endLine":516,"endColumn":33,"suggestions":"274"},{"ruleId":"222","severity":1,"message":"275","line":7,"column":8,"nodeType":"224","messageId":"225","endLine":7,"endColumn":24},{"ruleId":"276","severity":1,"message":"277","line":41,"column":9,"nodeType":"278","messageId":"279","endLine":41,"endColumn":15},{"ruleId":"222","severity":1,"message":"253","line":1,"column":18,"nodeType":"224","messageId":"225","endLine":1,"endColumn":26},{"ruleId":"222","severity":1,"message":"232","line":3,"column":17,"nodeType":"224","messageId":"225","endLine":3,"endColumn":24},{"ruleId":"222","severity":1,"message":"280","line":4,"column":8,"nodeType":"224","messageId":"225","endLine":4,"endColumn":22},{"ruleId":"222","severity":1,"message":"281","line":97,"column":7,"nodeType":"224","messageId":"225","endLine":97,"endColumn":14},{"ruleId":"222","severity":1,"message":"233","line":127,"column":14,"nodeType":"224","messageId":"225","endLine":127,"endColumn":22},{"ruleId":"245","severity":1,"message":"246","line":255,"column":22,"nodeType":"224","messageId":"247","endLine":255,"endColumn":26},{"ruleId":"245","severity":1,"message":"248","line":255,"column":27,"nodeType":"224","messageId":"247","endLine":255,"endColumn":33},{"ruleId":"245","severity":1,"message":"249","line":256,"column":21,"nodeType":"224","messageId":"247","endLine":256,"endColumn":26},{"ruleId":"234","severity":1,"message":"282","line":274,"column":7,"nodeType":"236","endLine":274,"endColumn":93,"suggestions":"283"},{"ruleId":"222","severity":1,"message":"251","line":6,"column":10,"nodeType":"224","messageId":"225","endLine":6,"endColumn":16},{"ruleId":"222","severity":1,"message":"252","line":6,"column":17,"nodeType":"224","messageId":"225","endLine":6,"endColumn":22},"react/jsx-pascal-case","Imported JSX component Charts_Vacc must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","no-unused-vars","'popup' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","Imported JSX component Charts_Region must be in PascalCase or SCREAMING_SNAKE_CASE","'plugins' is defined but never used.","'roundTo4' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.lastUpdate'. Either include it or remove the dependency array.","ArrayExpression",["284"],"no-const-assign","'startDate' is constant.","const","Assignments to the 'startDate' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","'endDate' is constant.","Assignments to the 'endDate' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","no-redeclare","'data' is already defined.","redeclared","'labels' is already defined.","'color' is already defined.","Imported JSX component ChartMenu_Vacc must be in PascalCase or SCREAMING_SNAKE_CASE","'purple' is defined but never used.","'white' is defined but never used.","'useState' is defined but never used.","'sum_array' is assigned a value but never used.","'init_Chart' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["285"],"React Hook useEffect has missing dependencies: 'props.WorldData', 'props.activeLegend', 'props.endDate', 'props.lastUpdate', 'props.relativeState', 'props.startDate', and 'props.step'. Either include them or remove the dependency array.",["286"],"React Hook useEffect has missing dependencies: 'completeData', 'props.WorldData', and 'props.lastUpdate'. Either include them or remove the dependency array.",["287"],"'init_States' is assigned a value but never used.","'date' is already defined.","'Active_country' is already defined.","'Active_region' is already defined.",["288"],"'Ger' is already defined.","React Hook useEffect has missing dependencies: 'props.activeLegend', 'props.endDate', 'props.lastUpdate', 'props.relativeState', 'props.startDate', and 'props.step'. Either include them or remove the dependency array.",["289"],"React Hook useEffect has missing dependencies: 'props.completeRegionData' and 'props.lastUpdate'. Either include them or remove the dependency array.",["290"],"'obj' is already defined.","'Kreis' is already defined.",["291"],"'FormControlLabel' is defined but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'ChartMenu_Vacc' is defined but never used.","'styles2' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.activeLanguage', 'props.completeRegionData', and 'props.lastUpdate'. Either include them or remove the dependency array.",["292"],{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},"Update the dependencies array to be: [props.completeRegionData, props.lastUpdate]",{"range":"311","text":"312"},"Update the dependencies array to be: [props, props.activeCountry]",{"range":"313","text":"314"},"Update the dependencies array to be: [props.selectedCountries, completeData, props.activeLegend, props.startDate, props.endDate, props.step, props.lastUpdate, props.relativeState, props.WorldData]",{"range":"315","text":"316"},"Update the dependencies array to be: [props.startDate, props.endDate, props.step, props.activeLegend, props.relativeState, props.lastUpdate, props.WorldData, completeData]",{"range":"317","text":"318"},"Update the dependencies array to be: [props, props.activeRegion]",{"range":"319","text":"320"},"Update the dependencies array to be: [props.selectedRegions, props.completeRegionData, props.activeLegend, props.startDate, props.endDate, props.step, props.lastUpdate, props.relativeState]",{"range":"321","text":"322"},"Update the dependencies array to be: [props.startDate, props.endDate, props.step, props.activeLegend, props.relativeState, props.completeRegionData, props.lastUpdate]",{"range":"323","text":"324"},"Update the dependencies array to be: [props, props.completeRegionData]",{"range":"325","text":"326"},"Update the dependencies array to be: [props.startDate, props.endDate, props.step, props.relativeState, props.vacCumulative, props.completeRegionData, props.lastUpdate, props.activeLanguage]",{"range":"327","text":"328"},[7388,7414],"[props.completeRegionData, props.lastUpdate]",[11187,11208],"[props, props.activeCountry]",[13290,13329],"[props.selectedCountries, completeData, props.activeLegend, props.startDate, props.endDate, props.step, props.lastUpdate, props.relativeState, props.WorldData]",[14824,14909],"[props.startDate, props.endDate, props.step, props.activeLegend, props.relativeState, props.lastUpdate, props.WorldData, completeData]",[13894,13914],"[props, props.activeRegion]",[16675,16724],"[props.selectedRegions, props.completeRegionData, props.activeLegend, props.startDate, props.endDate, props.step, props.lastUpdate, props.relativeState]",[18324,18409],"[props.startDate, props.endDate, props.step, props.activeLegend, props.relativeState, props.completeRegionData, props.lastUpdate]",[19800,19826],"[props, props.completeRegionData]",[9541,9627],"[props.startDate, props.endDate, props.step, props.relativeState, props.vacCumulative, props.completeRegionData, props.lastUpdate, props.activeLanguage]"]
>>>>>>> 00fb6b88e4815c29426055f185688f47a74fc247
