[{"C:\\Users\\fammi\\corona-dashboard\\src\\index.js":"1","C:\\Users\\fammi\\corona-dashboard\\src\\reportWebVitals.js":"2","C:\\Users\\fammi\\corona-dashboard\\src\\App.js":"3","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadEuropeTask.js":"4","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadCountriesTask.js":"5","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\BuildLegendsTask.js":"6","C:\\Users\\fammi\\corona-dashboard\\src\\components\\TopRow.jsx":"7","C:\\Users\\fammi\\corona-dashboard\\src\\components\\LoadingMap.jsx":"8","C:\\Users\\fammi\\corona-dashboard\\src\\components\\InfoPanel.jsx":"9","C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapSelectionButtons.jsx":"10","C:\\Users\\fammi\\corona-dashboard\\src\\components\\InfoWindow.jsx":"11","C:\\Users\\fammi\\corona-dashboard\\src\\components\\EuropeCovidMap.jsx":"12","C:\\Users\\fammi\\corona-dashboard\\src\\components\\CovidMap_Class.jsx":"13","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartsWrapper.jsx":"14","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Vacc.jsx":"15","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\BuildLegend.js":"16","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\ChartMenu_Vacc.jsx":"17","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\formatNumberWithSpaces.js":"18","C:\\Users\\fammi\\corona-dashboard\\src\\components\\UpdatePanel.jsx":"19","C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapFocusButton.jsx":"20","C:\\Users\\fammi\\corona-dashboard\\src\\components\\DropdownMenuButton.jsx":"21","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Legend.jsx":"22","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Newsticker.jsx":"23","C:\\Users\\fammi\\corona-dashboard\\src\\components\\NewstickerLanguage.jsx":"24","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Tooltipbox.jsx":"25","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Charts.jsx":"26","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Vacc_T.jsx":"27","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Charts_Region.jsx":"28","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\TimeRange.jsx":"29","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\Stepsize.jsx":"30","C:\\Users\\fammi\\corona-dashboard\\src\\entities\\LegendItem.js":"31","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu.jsx":"32","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadNewsTask.js":"33","C:\\Users\\fammi\\corona-dashboard\\src\\entities\\DropdownMenu.jsx":"34","C:\\Users\\fammi\\corona-dashboard\\src\\entities\\FocusMenu.jsx":"35","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\AddRegion.jsx":"36","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\AddCountry.jsx":"37","C:\\Users\\fammi\\corona-dashboard\\src\\entities\\NewsItem.js":"38","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\Switches.jsx":"39","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Timerow.jsx":"40","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Playbutton.jsx":"41","C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapScrollbar.jsx":"42"},{"size":1102,"mtime":1623657609740,"results":"43","hashOfConfig":"44"},{"size":375,"mtime":1623657609741,"results":"45","hashOfConfig":"44"},{"size":7192,"mtime":1624103813825,"results":"46","hashOfConfig":"44"},{"size":9610,"mtime":1623657609748,"results":"47","hashOfConfig":"44"},{"size":6151,"mtime":1623657609747,"results":"48","hashOfConfig":"44"},{"size":356,"mtime":1623657609745,"results":"49","hashOfConfig":"44"},{"size":836,"mtime":1623657609366,"results":"50","hashOfConfig":"44"},{"size":474,"mtime":1623657609351,"results":"51","hashOfConfig":"44"},{"size":956,"mtime":1623657609342,"results":"52","hashOfConfig":"44"},{"size":2034,"mtime":1623658776400,"results":"53","hashOfConfig":"44"},{"size":17129,"mtime":1623657609344,"results":"54","hashOfConfig":"44"},{"size":9005,"mtime":1623657609339,"results":"55","hashOfConfig":"44"},{"size":7971,"mtime":1623657609334,"results":"56","hashOfConfig":"44"},{"size":4049,"mtime":1623674209566,"results":"57","hashOfConfig":"44"},{"size":11702,"mtime":1623657609370,"results":"58","hashOfConfig":"44"},{"size":4392,"mtime":1623658413393,"results":"59","hashOfConfig":"44"},{"size":2050,"mtime":1623657609316,"results":"60","hashOfConfig":"44"},{"size":285,"mtime":1623657609752,"results":"61","hashOfConfig":"44"},{"size":601,"mtime":1623657609369,"results":"62","hashOfConfig":"44"},{"size":1741,"mtime":1623657609353,"results":"63","hashOfConfig":"44"},{"size":895,"mtime":1623657609336,"results":"64","hashOfConfig":"44"},{"size":1091,"mtime":1623657609349,"results":"65","hashOfConfig":"44"},{"size":2856,"mtime":1623674199606,"results":"66","hashOfConfig":"44"},{"size":1271,"mtime":1623658906973,"results":"67","hashOfConfig":"44"},{"size":3790,"mtime":1623657609362,"results":"68","hashOfConfig":"44"},{"size":19916,"mtime":1623657609327,"results":"69","hashOfConfig":"44"},{"size":10864,"mtime":1623674209567,"results":"70","hashOfConfig":"44"},{"size":22155,"mtime":1623657609329,"results":"71","hashOfConfig":"44"},{"size":1248,"mtime":1623657609325,"results":"72","hashOfConfig":"44"},{"size":868,"mtime":1623657609322,"results":"73","hashOfConfig":"44"},{"size":285,"mtime":1623657609736,"results":"74","hashOfConfig":"44"},{"size":3798,"mtime":1623657609311,"results":"75","hashOfConfig":"44"},{"size":1997,"mtime":1623657609750,"results":"76","hashOfConfig":"44"},{"size":1557,"mtime":1623657609733,"results":"77","hashOfConfig":"44"},{"size":1556,"mtime":1623657609735,"results":"78","hashOfConfig":"44"},{"size":3062,"mtime":1623674209565,"results":"79","hashOfConfig":"44"},{"size":2119,"mtime":1623657609314,"results":"80","hashOfConfig":"44"},{"size":204,"mtime":1623657609737,"results":"81","hashOfConfig":"44"},{"size":4117,"mtime":1623657609323,"results":"82","hashOfConfig":"44"},{"size":584,"mtime":1624101567419,"results":"83","hashOfConfig":"44"},{"size":739,"mtime":1624102612372,"results":"84","hashOfConfig":"44"},{"size":329,"mtime":1624106056804,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"ofc9fj",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"88"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"88"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"88"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"88"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"88"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"88"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"88"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"88"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"88"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"88"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"88"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":2,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\fammi\\corona-dashboard\\src\\index.js",[],["182","183"],"C:\\Users\\fammi\\corona-dashboard\\src\\reportWebVitals.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\App.js",["184","185"],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadEuropeTask.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadCountriesTask.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\BuildLegendsTask.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\TopRow.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\LoadingMap.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\InfoPanel.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapSelectionButtons.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\InfoWindow.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\EuropeCovidMap.jsx",["186","187","188"],"import React from 'react';\r\nimport {MapContainer, GeoJSON, TileLayer} from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"./EuropeCovidMap.css\";\r\nimport formatNumberWithSpaces from \"../tasks/formatNumberWithSpaces\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\n\r\n//Cumulative: CCases, Population, CCases/Population-Ratio\r\n//New Cases(21 Days): ACases, Population, ACases/Population-Ratio\r\n//7-Day-Incendence: Incidence-Rate, 7-day-cases, 14-day-cases?\r\n//ICU-Occupancy: Percentage, ICU-Beds, ICU-Occupancy\r\n//CFatalities: CFatalities, Recovered, CFatalities/Recovered-Ratio\r\n//Testing Rate: Tests/week, Population, Tests/week/population-Ratio\r\n//Vaccinated Pop: Vaccinated, Population, Vaccinated/Population-Ratio\r\n\r\n\r\nexport default class EuropeCovidMap extends React.Component {\r\n        constructor(props) {\r\n            super(props);\r\n        \r\n            this.mapStyle = {\r\n                fillColor: \"white\",\r\n                weight: 1,\r\n                color: \"black\",\r\n                fillOpacity: 0.7,\r\n            };\r\n        }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if(nextProps.active == this.props.active && nextProps.activeLanguage == this.props.activeLanguage && nextProps.rerenderMap.length == this.props.rerenderMap.length){\r\n            return false;\r\n            } else {\r\n            return true;\r\n            }\r\n        }\r\n\r\n    colorRegion(key) {\r\n        var legendIndex = this.props.legends[0].findIndex((legendName)=>{return legendName === this.props.active;}) + 1;\r\n        const legend = this.props.legends[legendIndex];\r\n        for(let i=0; i<legend.length; i++){\r\n            if(key >= legend[i].from &&\r\n                key < legend[i].to\r\n                ){\r\n                    return legend[i].color;\r\n                }\r\n        }\r\n    }\r\n\r\n    //[key, item1string, item2string, item3string]\r\n    getRelevantData(region, active){\r\n        var relevantData;\r\n        switch(active){\r\n            case \"Cumulative Fatalities\":\r\n                 relevantData = {\"English\": [region.properties.fatalities], \"Deutsch\": [region.properties.fatalities]};\r\n                relevantData[\"English\"].push(\"Fatalities: \" + formatNumberWithSpaces(region.properties.fatalities));\r\n                relevantData[\"English\"].push(\"Recovered: \" + formatNumberWithSpaces(region.properties.recovered));\r\n                relevantData[\"English\"].push(\"Mortality Rate: \" + (region.properties.mortalityRate * 100).toFixed(3).toString() + \"%\");\r\n                relevantData[\"Deutsch\"].push(\"Todesfälle: \" + formatNumberWithSpaces(region.properties.fatalities));\r\n                relevantData[\"Deutsch\"].push(\"Genesen: \" + formatNumberWithSpaces(region.properties.recovered));\r\n                relevantData[\"Deutsch\"].push(\"Sterblichkeitsrate: \" + (region.properties.mortalityRate * 100).toFixed(3).toString() + \"%\");\r\n                return relevantData;\r\n            case \"ICU-Occupancy\":\r\n                // region.properties.its_freie_betten = covidRegion[newestIndex].k;\r\n                //         region.properties.its_belegt= covidRegion[newestIndex].j;\r\n                //         region.properties.its_freie_beatmung= covidRegion[newestIndex].l;\r\n                //         region.properties.its_covid_patienten= covidRegion[newestIndex].i;\r\n                relevantData = {\"English\": [100 * region.properties.its_belegt / (region.properties.its_belegt + region.properties.its_freie_betten)], \"Deutsch\": [100 * region.properties.its_belegt / (region.properties.its_belegt + region.properties.its_freie_betten)]};\r\n                relevantData[\"English\"].push(\"ICU-Occupancy: \" + (100 * region.properties.its_belegt / (region.properties.its_belegt + region.properties.its_freie_betten)).toFixed(3) + \"%\");\r\n                relevantData[\"English\"].push(\"Covid patients in ICU: \" + formatNumberWithSpaces(region.properties.its_covid_patienten));\r\n                relevantData[\"English\"].push(\"Unoccupied ICU beds: \" + formatNumberWithSpaces(region.properties.its_freie_betten));\r\n                relevantData[\"English\"].push(\"Unoccupied ventilators: \" + formatNumberWithSpaces(region.properties.its_freie_betten));\r\n                relevantData[\"Deutsch\"].push(\"Intensivbettenbelegung: \" + (100 * region.properties.its_belegt / (region.properties.its_belegt + region.properties.its_freie_betten)).toFixed(3) + \"%\");\r\n                relevantData[\"Deutsch\"].push(\"Coronapatienten auf Intensivstation: \" + formatNumberWithSpaces(region.properties.its_covid_patienten));\r\n                relevantData[\"Deutsch\"].push(\"Freie Intensivbetten: \" + formatNumberWithSpaces(region.properties.its_freie_betten));\r\n                relevantData[\"Deutsch\"].push(\"Freie Beatmungsgeräte: \" + formatNumberWithSpaces(region.properties.its_freie_betten));\r\n                return relevantData;\r\n            case \"7-Day-Incidence\":\r\n                relevantData = {\"English\": [region.properties.incidentRate], \"Deutsch\": [region.properties.incidentRate]};\r\n                relevantData[\"English\"].push(\"7-Day-Incidence: \" + region.properties.incidentRate.toFixed(3));\r\n                relevantData[\"English\"].push(\"Cases (7 Days): \" + formatNumberWithSpaces(region.properties.last7));\r\n                relevantData[\"English\"].push(\"Population: \" + formatNumberWithSpaces(region.properties.population));\r\n                relevantData[\"Deutsch\"].push(\"7-Tages-Inzidenz: \" + region.properties.incidentRate.toFixed(3));\r\n                relevantData[\"Deutsch\"].push(\"Neue Fälle (7 Tage): \" + formatNumberWithSpaces(region.properties.last7));\r\n                relevantData[\"Deutsch\"].push(\"Einwohner: \" + formatNumberWithSpaces(region.properties.population));\r\n                return relevantData;\r\n            case \"New Cases(21 Days)\":\r\n                relevantData = {\"English\": [region.properties.active], \"Deutsch\": [region.properties.active]};\r\n                relevantData[\"English\"].push(\"New Cases(21 Days): \" + formatNumberWithSpaces(region.properties.active));\r\n                relevantData[\"English\"].push(\"Population: \" + formatNumberWithSpaces(region.properties.population));\r\n                relevantData[\"English\"].push(\"Ratio: \" + (region.properties.active/region.properties.population * 100).toFixed(5) + \"%\");\r\n                relevantData[\"Deutsch\"].push(\"Neue Fälle (21 Tage): \" + formatNumberWithSpaces(region.properties.active));\r\n                relevantData[\"Deutsch\"].push(\"Einwohner: \" + formatNumberWithSpaces(region.properties.population));\r\n                relevantData[\"Deutsch\"].push(\"Verhältnis: \" + (region.properties.active/region.properties.population * 100).toFixed(5) + \"%\");\r\n                return relevantData;\r\n            case \"Cumulative Cases\":\r\n                relevantData = {\"English\": [region.properties.confirmed], \"Deutsch\": [region.properties.confirmed]};\r\n                relevantData[\"English\"].push(\"Total Cases: \" + formatNumberWithSpaces(region.properties.confirmed));\r\n                relevantData[\"English\"].push(\"Population: \" + formatNumberWithSpaces(region.properties.population));\r\n                relevantData[\"English\"].push(\"Ratio: \" + (region.properties.confirmed/region.properties.population * 100).toFixed(3) + \"%\");\r\n                relevantData[\"Deutsch\"].push(\"Fälle Gesamt: \" + formatNumberWithSpaces(region.properties.confirmed));\r\n                relevantData[\"Deutsch\"].push(\"Einwohner: \" + formatNumberWithSpaces(region.properties.population));\r\n                relevantData[\"Deutsch\"].push(\"Verhältnis: \" + (region.properties.confirmed/region.properties.population * 100).toFixed(3) + \"%\");\r\n                return relevantData;\r\n            default:\r\n                return [0,\"\",\"\",\"\"];\r\n        }\r\n    }\r\n\r\n    onEachRegion = (region, layer) => {\r\n        const relevantData = this.getRelevantData(region,this.props.active);\r\n        layer.options.fillColor = this.colorRegion(relevantData[this.props.activeLanguage][0]);\r\n        const item1 = relevantData[this.props.activeLanguage][1];\r\n        const item2 = relevantData[this.props.activeLanguage][2];\r\n        const item3 = relevantData[this.props.activeLanguage][3];\r\n\r\n        // Charts: set state activeRegion\r\n        layer.on({\r\n            click: (e) => {\r\n                this.props.setActiveRegion({country: region.properties.origin, region: region.properties.name})\r\n            }\r\n        })\r\n\r\n        layer.bindPopup(\r\n                `${region.properties.name}\r\n                <br/> ${item1}\r\n                <br/> ${item2}\r\n                <br/> ${item3}\r\n            `\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return <MapContainer zoom={5} center={[50, 9]}>\r\n            <TileLayer\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'\r\n            />\r\n            <GeoJSON key={uuidv4()} style={this.mapStyle} data={this.props.regions} onEachFeature={this.onEachRegion}/>\r\n        </MapContainer>;\r\n    }\r\n}","C:\\Users\\fammi\\corona-dashboard\\src\\components\\CovidMap_Class.jsx",["189","190","191"],"/* @Author: Tassi\r\n* -----------------\r\n* Ich habe den CovidMap Component als Klasse neu geschrieben. Der alte Funktional Component ist auch noch vorhanden.\r\n* Das war notwendig, um die Popups der CovidMap zusammen mit dem Chart benutzen zu können.\r\n* Ich habe den State ActiveCountry eingeführt, um in Charts.xjs zu wissen, welches Land in der CovidMap selektiert wurde.\r\n* Dazu musste der State auf App.js level definiert werden und jeweils durch die Props die SetState funktion auf CovidMap-level und\r\n* der State selber auf Chart.jsx level gepushed werden. Da eine Änderung im State den Component in dem er definiert ist\r\n* und alle seine Kinder zum rerendern zwingt, hat sich bei der Selektion eines Landes App.js und damit auch CovidMap.jsx rerenderd\r\n* und das Popup \"überrenderd\". Meines Wissens und langem googln zufolge gibt es in einen Fuctional Component keinen Weg,\r\n* ihn vom rerendern nach einem Update abzuhalten. Ein Workaround wäre die React.memo() Funktion. Damit hatte ich aber auch kein Glück.\r\n* In der Klassenimplementierung gibt es jedoch die Funktion shouldComponentUpdate() welcher vor jedem Update checkt, ob ein Rerender\r\n* notwenig ist. Dort habe ich den ActiveCountry State rausgenommen und nun können die Popups trotz dieses States sichtbar bleiben.\r\n*/\r\n\r\n\r\nimport React from 'react';\r\nimport {MapContainer, GeoJSON, TileLayer} from \"react-leaflet\";\r\nimport {popup} from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"./CovidMap.css\";\r\nimport formatNumberWithSpaces from \"../tasks/formatNumberWithSpaces\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\n\r\nexport default class CovidMap extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.mapStyle = {\r\n            fillColor: \"white\",\r\n            weight: 1,\r\n            color: \"black\",\r\n            fillOpacity: 0.8,\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if(nextProps.active == this.props.active && nextProps.activeLanguage == this.props.activeLanguage){\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      }\r\n\r\n    colorCountry = (key) => {\r\n        var legendIndex = this.props.legends[0].findIndex((legendName)=>{return legendName === this.props.active;}) + 1;\r\n        const legend = this.props.legends[legendIndex];\r\n        for(let i=0; i<legend.length; i++){\r\n            if(key >= legend[i].from &&\r\n                key < legend[i].to\r\n                ){\r\n                    return legend[i].color;\r\n                }\r\n        }\r\n    }\r\n\r\n    //[key, item1string, item2string, item3string]\r\n    getRelevantData = (country, active) => {\r\n        var relevantData;\r\n        switch(active){\r\n            case \"Cumulative Fatalities\":\r\n                 relevantData = {\"English\": [country.properties.fatalities], \"Deutsch\": [country.properties.fatalities]};\r\n                relevantData[\"English\"].push(\"Fatalities: \" + formatNumberWithSpaces(country.properties.fatalities));\r\n                relevantData[\"English\"].push(\"Recovered: \" + formatNumberWithSpaces(country.properties.recovered));\r\n                relevantData[\"English\"].push(\"Mortality Rate: \" + (country.properties.mortalityRate * 100).toFixed(3).toString() + \"%\");\r\n                relevantData[\"Deutsch\"].push(\"Todesfälle: \" + formatNumberWithSpaces(country.properties.fatalities));\r\n                relevantData[\"Deutsch\"].push(\"Genesen: \" + formatNumberWithSpaces(country.properties.recovered));\r\n                relevantData[\"Deutsch\"].push(\"Sterblichkeitsrate: \" + (country.properties.mortalityRate * 100).toFixed(3).toString() + \"%\");\r\n                return relevantData;\r\n            case \"7-Day-Incidence\":\r\n                relevantData = {\"English\": [country.properties.incidentRate], \"Deutsch\": [country.properties.incidentRate]};\r\n                relevantData[\"English\"].push(\"7-Day-Incidence: \" + country.properties.incidentRate.toFixed(3));\r\n                relevantData[\"English\"].push(\"New Cases (7 Days): \" + formatNumberWithSpaces(country.properties.last7));\r\n                relevantData[\"English\"].push(\"Population: \" + formatNumberWithSpaces(country.properties.population));\r\n                relevantData[\"Deutsch\"].push(\"7-Tages-Inzidenz: \" + country.properties.incidentRate.toFixed(3));\r\n                relevantData[\"Deutsch\"].push(\"Neue Fälle (7 Tage): \" + formatNumberWithSpaces(country.properties.last7));\r\n                relevantData[\"Deutsch\"].push(\"Einwohner: \" + formatNumberWithSpaces(country.properties.population));\r\n                return relevantData;\r\n            case \"New Cases(21 Days)\":\r\n                relevantData = {\"English\": [country.properties.active], \"Deutsch\": [country.properties.active]};\r\n                relevantData[\"English\"].push(\"New Cases(21 Days): \" + formatNumberWithSpaces(country.properties.active));\r\n                relevantData[\"English\"].push(\"Population: \" + formatNumberWithSpaces(country.properties.population));\r\n                relevantData[\"English\"].push(\"Ratio: \" + (country.properties.active/country.properties.population * 100).toFixed(5) + \"%\");\r\n                relevantData[\"Deutsch\"].push(\"Neue Fälle (21 Tage): \" + formatNumberWithSpaces(country.properties.active));\r\n                relevantData[\"Deutsch\"].push(\"Einwohner: \" + formatNumberWithSpaces(country.properties.population));\r\n                relevantData[\"Deutsch\"].push(\"Verhältnis: \" + (country.properties.active/country.properties.population * 100).toFixed(5) + \"%\");\r\n                return relevantData;\r\n            case \"Cumulative Cases\":\r\n                relevantData = {\"English\": [country.properties.confirmed], \"Deutsch\": [country.properties.confirmed]};\r\n                relevantData[\"English\"].push(\"Total Cases: \" + formatNumberWithSpaces(country.properties.confirmed));\r\n                relevantData[\"English\"].push(\"Population: \" + formatNumberWithSpaces(country.properties.population));\r\n                relevantData[\"English\"].push(\"Ratio: \" + (country.properties.confirmed/country.properties.population * 100).toFixed(3) + \"%\");\r\n                relevantData[\"Deutsch\"].push(\"Fälle Gesamt: \" + formatNumberWithSpaces(country.properties.confirmed));\r\n                relevantData[\"Deutsch\"].push(\"Einwohner: \" + formatNumberWithSpaces(country.properties.population));\r\n                relevantData[\"Deutsch\"].push(\"Verhältnis: \" + (country.properties.confirmed/country.properties.population * 100).toFixed(3) + \"%\");\r\n                return relevantData;\r\n            default:\r\n                return [0,\"\",\"\",\"\"];\r\n        }\r\n    }\r\n\r\n    onEachCountry = (country, layer) => {\r\n        const relevantData = this.getRelevantData(country,this.props.active);\r\n        layer.options.fillColor = this.colorCountry(relevantData[this.props.activeLanguage][0]);\r\n        const item1 = relevantData[this.props.activeLanguage][1];\r\n        const item2 = relevantData[this.props.activeLanguage][2];\r\n        const item3 = relevantData[this.props.activeLanguage][3];\r\n\r\n        // Charts: set state activeCountry\r\n        layer.on({\r\n            click: (e) => {\r\n                let country_name = country.properties.ADMIN\r\n                console.log(country_name)\r\n                this.props.setActiveCountry(country_name)\r\n            }\r\n        })\r\n\r\n        layer.bindPopup(\r\n            `${country.properties.ADMIN}\r\n            <br/> ${item1}\r\n            <br/> ${item2} \r\n            <br/> ${item3}\r\n            `,{autoClose:false,closeOnClick:true}\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return <MapContainer zoom={2.5} center={[45, 10]}>\r\n            <TileLayer\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'\r\n            />\r\n            <GeoJSON key={uuidv4()} style={this.mapStyle} data={this.props.countries} onEachFeature={this.onEachCountry}/>\r\n            </MapContainer>;\r\n    }\r\n    \r\n  }","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartsWrapper.jsx",["192","193","194"],"// Defines States Used in Charts, avoids crowded App.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport Charts from \"./Charts\";\r\nimport Charts_Region from \"./Charts_Region\";\r\nimport Charts_Vacc from \"./Vacc_T\"\r\nimport { useAlert } from 'react-alert';\r\n\r\n\r\nconst ChartsWrapper = (props) => {\r\n\r\n    // A List of all Countries / Regions\r\n    const [countryList,setcountryList] = useState([]);\r\n    const [RegionList,setRegionList] = useState([]);\r\n    // states to keep track of the user entered start and end date in the datepicker for displaying chart data\r\n    const [startDate, setStartDate] = useState();\r\n    const [endDate, setEndDate] = useState();\r\n    const [step, setStep] = useState({ value: 'd', label: 'Day' });\r\n    const [relativeState, setRelativeState] = useState(false);\r\n    // hook to let charts know which country was selected in the map\r\n    const [selectedCountries,setSelectedCountries] = useState([{ value: 'World', label: 'World'}]);\r\n    const [selectedRegions,setSelectedRegions] = useState([]);\r\n    // a state to store the World data. This data is computed once at the beginning from the inital per country data\r\n    const [WorldData, setWorldData] = useState([]);\r\n    // should Vaccination be visible\r\n    const [showVac, setShowVac] = useState(false);\r\n    const [vacCumulative, setVacCumulative] = useState(false);\r\n    // hook for the alert, when to many countries were selected\r\n    const alert = useAlert();\r\n\r\n    return (\r\n      <div className=\"VBox\">\r\n          {props.activeFocus === \"World\" ? (\r\n              <Charts  activeLegend={props.activeLegend} activeCountry={props.activeCountry} completeData={props.completeData} lastUpdate={props.lastUpdate}\r\n                      startDate={startDate} setStartDate={setStartDate} endDate={endDate} setEndDate={setEndDate}\r\n                      countryList={countryList} setcountryList={setcountryList} step={step} setStep={setStep} relativeState={relativeState} setRelativeState={setRelativeState}\r\n                      selectedCountries={selectedCountries} setSelectedCountries={setSelectedCountries} WorldData={WorldData} setWorldData={setWorldData}\r\n                      alert={alert} activeFocus={props.activeFocus} activeLanguage={props.activeLanguage} completeRegionData={props.completeRegionData}\r\n                      showVac={showVac} setShowVac={setShowVac} \r\n                      setVacCumulative={setVacCumulative} vacCumulative={vacCumulative}/>\r\n          ):(\r\n              <Charts_Region  activeLegend={props.activeLegend} activeRegion={props.activeRegion} completeRegionData={props.completeRegionData} lastUpdate={props.lastUpdate}\r\n                      startDate={startDate} setStartDate={setStartDate} endDate={endDate} setEndDate={setEndDate}\r\n                      setRegionList={setRegionList} RegionList={RegionList} step={step} setStep={setStep} relativeState={relativeState} setRelativeState={setRelativeState}\r\n                      selectedRegions={selectedRegions} setSelectedRegions={setSelectedRegions} \r\n                      alert={alert} activeFocus={props.activeFocus} activeLanguage={props.activeLanguage}\r\n                      showVac={showVac} setShowVac={setShowVac} \r\n                      setVacCumulative={setVacCumulative} vacCumulative={vacCumulative}/>\r\n          )}\r\n          {console.log(showVac)}\r\n          {showVac ? (\r\n              <Charts_Vacc \r\n                      step={step} \r\n                      startDate={startDate} \r\n                      endDate={endDate} \r\n                      activeLanguage={props.activeLanguage}\r\n                      lastUpdate={props.lastUpdate}\r\n                      completeRegionData={props.completeRegionData}\r\n                      activeFocus={props.activeFocus}\r\n                      relativeState={relativeState}\r\n                      vacCumulative={vacCumulative}\r\n                  />\r\n          ):(\r\n            <></>\r\n          )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChartsWrapper;\r\n\r\n//step und relative props in region chart","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Vacc.jsx",["195","196","197","198","199","200","201","202","203","204","205"],"import React,  { useState,useEffect } from 'react';\r\nimport \"./Charts.css\"\r\nimport Chart, { plugins } from 'chart.js'\r\nimport ChartMenu_Vacc from \"./ChartMenu/ChartMenu_Vacc.jsx\"\r\nimport LoadingMap from \"./LoadingMap\";\r\n\r\n// Global Var\r\nvar German_population = 83200000;\r\n\r\n// chart.js options\r\nvar chart_color = Chart.helpers.color;\r\nvar config = {\r\n    type:\"line\",\r\n    data: {\r\n        labels: [],\r\n        datasets: []\r\n    },\r\n    options: {\r\n        legend: {\r\n          position: 'top',\r\n          labels: {\r\n            fontColor: 'white'\r\n          }\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Chart',\r\n          fontColor: 'white',\r\n          fontSize: 18\r\n        },\r\n        scales: {\r\n            xAxes: [{\r\n                ticks: {\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines: {\r\n                    color: 'rgb(30, 30, 30)',\r\n                    display: true,\r\n                    drawBorder: true,\r\n                    drawOnChartArea: true,\r\n                    drawTicks: false,\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                ticks: {\r\n                    fontColor: 'white',\r\n                    beginAtZero:true\r\n                },\r\n                gridLines: {\r\n                    color: 'rgb(30, 30, 30)',\r\n                    display: true,\r\n                    drawBorder: true,\r\n                    drawOnChartArea: true,\r\n                    drawTicks: false,\r\n                },\r\n                scaleLabel: {\r\n                    display: false,\r\n                    labelString: 'percent [%]',\r\n                  }\r\n            }]\r\n        }\r\n    },\r\n    plugins:[\r\n        {afterDraw:function(chart) {\r\n            // var goin = false\r\n            if(!chart.data.labels || chart.data.labels.length === 0)    {              //goin = true\r\n            //else if(chart.data.datasets[0].data.length === 0)   //goin = true\r\n            //if (goin) {\r\n                //if(chart.data.datasets[0].data.length === 0){\r\n                 // oder chart.data.datasets.length === 0\r\n                // No data is present\r\n                var ctx = chart.chart.ctx;\r\n                var width = chart.chart.width;\r\n                var height = chart.chart.height;\r\n                chart.clear();\r\n    \r\n                ctx.save();\r\n                ctx.textAlign = 'center';\r\n                ctx.textBaseline = 'middle';\r\n                ctx.font = \"2rem 'Helvetica Nueue'\";\r\n                ctx.fillStyle = \"white\";\r\n                ctx.fillText('Please Select a Region', width / 2, height / 2);\r\n                ctx.restore();\r\n                }\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\n// chart size\r\nconst styles = {\r\n    width: '85%',\r\n    height: \"500px\",\r\n    overflow: \"hidden\"\r\n}\r\n// chart options size\r\nconst styles2 = {\r\n    width: '15%'\r\n}\r\n\r\n// States\r\nconst id = {id:\"ChartID_1\"}\r\nvar chart;\r\n\r\nfunction getRelevantData(CountryData, activeLegend, startDate, endDate, step, lastUpdated,relative){\r\n\r\n    // ignore countries with no data\r\n    if(CountryData === undefined) {\r\n        if(chart.data.labels){\r\n            return [[],chart.data.labels]\r\n        } else {\r\n            return [[],[]]\r\n        }\r\n    }\r\n    \r\n    const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\r\n    const diffDaysStart = Math.round(Math.abs((startDate - lastUpdated) / oneDay));\r\n    const NumberDays = Math.round(Math.abs((startDate - endDate) / oneDay));\r\n    var left_index = CountryData.length - 1 - diffDaysStart\r\n    var right_index = CountryData.length - diffDaysStart + NumberDays\r\n    var relevantData = CountryData.slice(left_index,right_index)\r\n\r\n    function roundTo2(num) {\r\n        return +(Math.round(num + \"e+2\")  + \"e-2\");\r\n    }\r\n    function roundTo4(num) {\r\n        return +(Math.round(num + \"e+4\")  + \"e-4\");\r\n    }\r\n    function data_sorting(f){\r\n        var labels = []\r\n        var data = []\r\n        var sum_array = []\r\n\r\n        const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n                            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n                            ];\r\n\r\n        const sum = (accumulator, currentValue) => Number(accumulator) + Number(currentValue);\r\n\r\n        for (var i=0; i<relevantData.length; i++){\r\n            var elem = relevantData[i]\r\n            var date = new Date(elem.date)\r\n            if(step.label === \"Day\"){\r\n                data.push(roundTo2(f(elem)))\r\n                labels.push(date.toLocaleDateString())\r\n            }\r\n            else if(step.label === \"Week\"){\r\n                sum_array.push(f(elem))\r\n                if(date.getDay() === 0 || i === relevantData.length-1){\r\n                    data.push(roundTo2(sum_array.reduce(sum)/sum_array.length))\r\n                    sum_array = []\r\n                    if (date.getDay() === 0) labels.push(date.toDateString())\r\n                    else                    labels.push(\"last Week\")\r\n                }\r\n            }\r\n            else {\r\n                sum_array.push(f(elem))\r\n                if(date.getDate() === 1 || i === relevantData.length-1){\r\n                    data.push(roundTo2(sum_array.reduce(sum)/sum_array.length))\r\n                    sum_array = []\r\n                    if (date.getDate() === 1)    labels.push(monthNames[date.getMonth()])\r\n                    else                         labels.push(\"last Month\")\r\n                }\r\n            }\r\n        }\r\n        return [data,labels]\r\n    }\r\n\r\n    if (activeLegend === \"first vacc\"){\r\n        if(relative) return data_sorting( x => x[\"first vacc\"]/German_population*100)\r\n        else return data_sorting(x => x[\"first vacc\"])\r\n    }\r\n    else if (activeLegend === \"second vacc\"){\r\n        if(relative) return data_sorting( x => x[\"second vacc\"]/German_population*100)\r\n        else return data_sorting(x => x[\"second vacc\"])\r\n    }\r\n    else {\r\n        return [[],[]];\r\n    }\r\n}\r\n\r\n/* --------------------------------------------------------------------------------\r\n| The Component\r\n|-----------------------------------------------------------------------------------\r\n*/\r\nconst Charts_Vacc = (props) => {\r\n    // States\r\n    // tracks the stepsize selected in the options panel\r\n    const [step, setStep] = useState({ value: 'd', label: 'Day' });\r\n    const [startDate, setStartDate] = useState();\r\n    const [endDate, setEndDate] = useState();\r\n    const [relativeState, setRelativeState] = useState(false);\r\n    \r\n\r\n    /* --------------------------------------------------------------------------------\r\n    |  Chart Init\r\n    |-----------------------------------------------------------------------------------\r\n    | \r\n    */\r\n    useEffect(() => {\r\n        if(props.completeRegionData){\r\n            if(props.completeRegionData.length > 1){\r\n                // Set States\r\n                var now = new Date(props.lastUpdate)\r\n                var lastWeek = new Date(props.lastUpdate)\r\n                lastWeek.setDate(now.getDate() - 7)\r\n                setStartDate(lastWeek)\r\n                setEndDate(now)\r\n                // Set Chart\r\n                var ctx = document.getElementById(id.id).getContext(\"2d\");\r\n                chart = new Chart(ctx, config);\r\n                /*\r\n                for (var country of props.completeRegionData[0]){\r\n                    if (country === \"Germany\"){\r\n                        German_population = country[0].population\r\n                        break\r\n                    }\r\n                }\r\n                */\r\n            }\r\n        }\r\n    },[props.completeRegionData])\r\n\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    |  Chart Update\r\n    |-----------------------------------------------------------------------------------\r\n    | \r\n    */\r\n    useEffect(() => {\r\n        if(props.completeRegionData){\r\n            if(props.completeRegionData.length > 1){\r\n                startDate = new Date(\"1/1/21\")\r\n                endDate = new Date(\"1/2/21\")\r\n                // Language Support\r\n                var labels_names = {\r\n                    dataset:{\r\n                        English:[\"First Vaccination\", \"Second Vaccination\"],\r\n                        Deutsch:[\"Erstimpfung\", \"Zweitimpfung\"]\r\n                    },\r\n                    title:{\r\n                        English:\"Vaccinations in Germany\",\r\n                        Deutsch:\"Impfungen in Deutschland\"\r\n                    }\r\n                }\r\n                //First Vacc\r\n                var VaccData = props.completeRegionData[1].vacc\r\n                var [data,labels] = getRelevantData(VaccData,\"first vacc\", startDate, endDate, step, new Date(props.lastUpdate),relativeState)\r\n                var color = \"rgb(75, 192, 192)\"\r\n                chart.data.datasets.push({\r\n                    label: labels_names.dataset[props.activeLanguage][0],\r\n                    data: data,\r\n                    //color\r\n                    backgroundColor: chart_color(color).alpha(0.2).rgbString(),\r\n                    borderColor: color,\r\n                    colorNumber:0,\r\n                    pointBackgroundColor: color,\r\n                    borderWidth: 1\r\n                })\r\n                //Second Vacc\r\n                var [data,labels] = getRelevantData(VaccData,\"second vacc\", startDate, endDate, step, new Date(props.lastUpdate),relativeState)\r\n                var color = \"rgb(75, 192, 150)\"\r\n                chart.data.datasets.push({\r\n                    label: labels_names.dataset[props.activeLanguage][1],\r\n                    data: data,\r\n                    //color\r\n                    backgroundColor: chart_color(color).alpha(0.2).rgbString(),\r\n                    borderColor: color,\r\n                    colorNumber:1,\r\n                    pointBackgroundColor: color,\r\n                    borderWidth: 1\r\n                })\r\n                // Chart Labels\r\n                chart.options.title.text = labels_names.title[props.activeLanguage]\r\n                chart.data.labels = labels\r\n                chart.update()\r\n            }\r\n        }\r\n    },[props.startDate, props.endDate, step, relativeState])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Loading Indicator\r\n    |-----------------------------------------------------------------------------------\r\n    | Show the loading Indicator until the data is loaded\r\n    */\r\n    if(props.completeRegionData){\r\n        if(props.completeRegionData.length > 1){\r\n            return (\r\n                <div className=\"chartContainer\">\r\n                    <div style={styles}>\r\n                        <canvas style={{width:'100%',height:'500px'}} id={id.id}/>\r\n                    </div>\r\n                    <div style={styles2}>\r\n                        <ChartMenu_Vacc\r\n                            setStep={setStep} \r\n                            startDate={startDate} \r\n                            endDate={endDate} \r\n                            setEndDate={setEndDate} \r\n                            setStartDate={setStartDate} \r\n                            lastUpdate={props.lastUpdate}\r\n                            alert={props.alert}\r\n                            relativeState={relativeState}\r\n                            setRelativeState={setRelativeState}\r\n                            />\r\n                    </div>    \r\n                </div>\r\n            );\r\n        }\r\n    } \r\n    return (\r\n        <div className=\"chartContainer\">\r\n            <LoadingMap />\r\n        </div>\r\n    )\r\n}\r\n//<canvas style={{width:'95%',height:'500px'}} id={id.id}/>\r\n\r\nexport default Charts_Vacc;\r\n","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\BuildLegend.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\ChartMenu_Vacc.jsx",["206","207"],"import React from 'react';\r\nimport \"../ChartMenu.css\"\r\nimport TimeRange from \"./TimeRange.jsx\"\r\nimport Stepsize from \"./Stepsize.jsx\"\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { purple,white } from '@material-ui/core/colors';\r\n\r\nconst ChartMenu_Vacc = (props) => {\r\n\r\n  const handleChange = (event) => {\r\n   props.setRelativeState(event.target.checked);\r\n  };\r\n  const PurpleSwitch = withStyles({\r\n    switchBase: {\r\n      color: \"#ffffff\",\r\n      '&$checked': {\r\n        color: \"#ffffff\",\r\n      },\r\n      '&$checked + $track': {\r\n        backgroundColor: \"#b8b8b8\",\r\n      },\r\n    },\r\n    checked: {},\r\n    track: {\r\n      backgroundColor: \"#7d7d7d\"\r\n    }\r\n  })(Switch);\r\n\r\n /* -------------------------------------------------\r\n    * ToDo: kritische Linien\r\n    * -------------------------------------------------- */    \r\n    return (\r\n      <div className=\"slidecontainer\">\r\n        <div className=\"centering\">\r\n          {props.activeLanguage === \"English\" ? (<h3>Options</h3>) : (<h3>Optionen</h3>)}\r\n            {props.activeLanguage === \"English\" ? (<label>Time Range</label>) : (<label>Zeitraum</label>)}\r\n              <TimeRange startDate={props.startDate} endDate={props.endDate} setEndDate={props.setEndDate} setStartDate={props.setStartDate} lastUpdate={props.lastUpdate}/>\r\n              {props.activeLanguage === \"English\" ? (<label>Stepsize</label>) : (<label>Schrittgröße</label>)}\r\n            \r\n              <Stepsize setStep={props.setStep} />\r\n              <FormControlLabel\r\n                control={\r\n                  <PurpleSwitch\r\n                    style={{zIndex: 999}}\r\n                    checked={props.relativeState}\r\n                    onChange={handleChange}\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"relative (%)\"\r\n              />\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default ChartMenu_Vacc;\r\n","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\formatNumberWithSpaces.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\UpdatePanel.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapFocusButton.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\DropdownMenuButton.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\Legend.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\Newsticker.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\NewstickerLanguage.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\Tooltipbox.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\Charts.jsx",["208","209","210","211","212","213","214"],"import React,  { useState,useEffect } from 'react';\r\nimport \"./Charts.css\"\r\nimport Chart, { plugins } from 'chart.js'\r\nimport ChartMenu from \"./ChartMenu.jsx\"\r\nimport LoadingMap from \"./LoadingMap\";\r\n// colors for the charts\r\nvar chartColors = [\r\n\t{name:'red',    value: 'rgb(255, 99, 132)'},\r\n\t{name:'orange', value: 'rgb(255, 159, 64)'},\r\n\t{name:'yellow', value: 'rgb(255, 205, 86)'},\r\n\t{name:'green',  value: 'rgb(75, 192, 192)'},\r\n\t{name:'blue',   value: 'rgb(54, 162, 235)'},\r\n\t{name:'purple', value: 'rgb(153, 102, 255)'},\r\n\t{name:'grey',   value: 'rgb(231,233,237)'}\r\n];\r\n\r\n// chart.js options\r\nvar chart_color = Chart.helpers.color;\r\nvar config = {\r\n    type:\"bar\",\r\n    data: {\r\n        labels: [],\r\n        datasets: []\r\n    },\r\n    options: {\r\n        legend: {\r\n          position: 'top',\r\n          labels: {\r\n            fontColor: 'white'\r\n          }\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Chart',\r\n          fontColor: 'white',\r\n          fontSize: 18\r\n        },\r\n        scales: {\r\n            xAxes: [{\r\n                ticks: {\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines: {\r\n                    color: 'rgb(30, 30, 30)',\r\n                    display: true,\r\n                    drawBorder: true,\r\n                    drawOnChartArea: true,\r\n                    drawTicks: false,\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                ticks: {\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines: {\r\n                    color: 'rgb(30, 30, 30)',\r\n                    display: true,\r\n                    drawBorder: true,\r\n                    drawOnChartArea: true,\r\n                    drawTicks: false,\r\n                },\r\n                scaleLabel: {\r\n                    display: false,\r\n                    labelString: 'percent [%]',\r\n                  }\r\n            }]\r\n        }\r\n    },\r\n    plugins:[\r\n        {afterDraw:function(chart) {\r\n            // var goin = false\r\n            if(chart.data.labels.length === 0)    {              //goin = true\r\n            //else if(chart.data.datasets[0].data.length === 0)   //goin = true\r\n            //if (goin) {\r\n                //if(chart.data.datasets[0].data.length === 0){\r\n                 // oder chart.data.datasets.length === 0\r\n                // No data is present\r\n                var ctx = chart.chart.ctx;\r\n                var width = chart.chart.width;\r\n                var height = chart.chart.height;\r\n                chart.clear();\r\n    \r\n                ctx.save();\r\n                ctx.textAlign = 'center';\r\n                ctx.textBaseline = 'middle';\r\n                ctx.font = \"2rem 'Helvetica Nueue'\";\r\n                ctx.fillStyle = \"white\";\r\n                ctx.fillText('Please Select a Country', width / 2, height / 2);\r\n                ctx.restore();\r\n                }\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\n// chart size\r\nconst styles = {\r\n    width: '80%',\r\n    height: \"500px\",\r\n    overflow: \"hidden\"\r\n}\r\n\r\n// chart options size\r\nconst styles2 = {\r\n    width: '15%'\r\n}\r\n\r\n// States\r\nconst id = {id:\"ChartID_1\",id2:\"ChartID_2\"}\r\nvar init_Chart = true\r\nvar init_States= true\r\nvar chart;\r\nvar showing;\r\nif(chart)   showing = chart.data.datasets\r\nelse        showing = 0\r\nvar number_of_colors = chartColors.length\r\n\r\n\r\nfunction getRelevantData(CountryData, activeLegend, startDate, endDate, step, lastUpdated, relative){\r\n\r\n    // ignore countries with no data\r\n    if(CountryData === undefined) {\r\n        if(chart.data.labels){\r\n            return [[],chart.data.labels]\r\n        } else {\r\n            return [[],[]]\r\n        }\r\n    }\r\n    \r\n    const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\r\n    const diffDaysStart = Math.round(Math.abs((startDate - lastUpdated) / oneDay));\r\n    const NumberDays = Math.round(Math.abs((startDate - endDate) / oneDay));\r\n    var left_index = CountryData.length - 1 - diffDaysStart\r\n    var right_index = CountryData.length - diffDaysStart + NumberDays\r\n    var relevantData = CountryData.slice(left_index,right_index)\r\n\r\n    function roundTo2(num) {\r\n        return +(Math.round(num + \"e+2\")  + \"e-2\");\r\n    }\r\n    function roundTo4(num) {\r\n        return +(Math.round(num + \"e+4\")  + \"e-4\");\r\n    }\r\n    function data_sorting(f){\r\n        var labels = []\r\n        var data = []\r\n        var sum_array = []\r\n\r\n        const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n                            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n                            ];\r\n\r\n        const sum = (accumulator, currentValue) => Number(accumulator) + Number(currentValue);\r\n\r\n        for (var i=0; i<relevantData.length; i++){\r\n            var elem = relevantData[i]\r\n            var date = new Date(elem.date)\r\n            if(step.value === \"d\"){\r\n                data.push(roundTo2(f(elem)))\r\n                labels.push(date.toLocaleDateString())\r\n            }\r\n            else if(step.value === \"w\"){\r\n                sum_array.push(f(elem))\r\n                if(date.getDay() === 0 || i === relevantData.length-1){\r\n                    data.push(roundTo2(sum_array.reduce(sum)/sum_array.length))\r\n                    sum_array = []\r\n                    if (date.getDay() === 0) labels.push(date.toDateString())\r\n                    else                    labels.push(\"last Week\")\r\n                }\r\n            }\r\n            else {\r\n                sum_array.push(f(elem))\r\n                if(date.getDate() === 1 || i === relevantData.length-1){\r\n                    data.push(roundTo2(sum_array.reduce(sum)/sum_array.length))\r\n                    sum_array = []\r\n                    if (date.getDate() === 1)    labels.push(monthNames[date.getMonth()])\r\n                    else                         labels.push(\"last Month\")\r\n                }\r\n            }\r\n        }\r\n        return [data,labels]\r\n    }\r\n\r\n    function data_sorting_cum(f){\r\n        var labels = []\r\n        var data = []\r\n        var sum_array = []\r\n\r\n        const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n                            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n                            ];\r\n\r\n        for (var i=0; i<relevantData.length; i++){\r\n            var elem = relevantData[i]\r\n            var date = new Date(elem.date)\r\n            if(step.value === \"d\"){\r\n                data.push(roundTo2(f(elem)))\r\n                labels.push(date.toLocaleDateString())\r\n            }\r\n            else if(step.value === \"w\"){\r\n                if(date.getDay() === 0 ){\r\n                    data.push(roundTo2(f(elem)))\r\n                    if (date.getDay() === 0) labels.push(date.toDateString())\r\n                    else                    labels.push(\"today\")\r\n                }\r\n            }\r\n            else {\r\n                if(date.getDate() === 1 ){\r\n                    data.push(roundTo2(f(elem)))\r\n                    if (date.getDate() === 1)    labels.push(monthNames[date.getMonth()])\r\n                    else                         labels.push(\"today\")\r\n                }\r\n            }\r\n        }\r\n        return [data,labels]\r\n    }\r\n\r\n    switch(activeLegend){\r\n        \r\n        case \"Cumulative Fatalities\":\r\n            if(relative) return data_sorting(x => {return roundTo4(x[\"totalDeaths\"]/x.population)*100})\r\n            else return data_sorting_cum(x =>  x[\"totalDeaths\"])\r\n   \r\n        case \"New Cases(21 Days)\":\r\n            if(relative) return data_sorting(x => {return roundTo4(x[\"newCases21Days\"]/x.population)*100})\r\n            else return data_sorting(x => x[\"newCases21Days\"])\r\n\r\n        case \"7-Day-Incidence\":\r\n            return data_sorting(x => roundTo2(x[\"newCases7Days\"]/x[\"population\"]*100000))\r\n\r\n        case \"Cumulative Cases\":\r\n            if(relative) return data_sorting( x => { return roundTo4(x[\"totalCases\"]/x.population)*100})\r\n            else return data_sorting_cum( x => x[\"totalCases\"])\r\n\r\n        default:\r\n            return [[],[]];\r\n    }\r\n}\r\n\r\nfunction chart_addDataset(chart,data,labels,activeCountry){\r\n\r\n    // get the right color. If a country in the middle has been deleted, there is a free color. \r\n    // and here I find this color\r\n    var sets = chart.data.datasets.length\r\n    var index;\r\n    if(sets === 0) {\r\n        index = 0\r\n    }\r\n    else if (sets === 1){\r\n        index = chart.data.datasets[0].colorNumber + 1\r\n    } else {\r\n        var numbers = [...Array(number_of_colors).keys()];\r\n        for( let c of chart.data.datasets){\r\n            numbers.splice(numbers.findIndex(x=>x===c.colorNumber),1)\r\n        }\r\n        index = numbers.shift()\r\n    }\r\n    \r\n    chart.data.datasets.push({\r\n        label: activeCountry,\r\n        data: data,\r\n        //color\r\n        backgroundColor: chart_color(chartColors[index].value).alpha(0.2).rgbString(),\r\n        borderColor: chartColors[index].value,\r\n        colorNumber:index,\r\n        pointBackgroundColor: chartColors[index].value,\r\n        borderWidth: 1\r\n    })\r\n    chart.data.labels = labels\r\n}\r\n\r\nfunction chart_deleteDataset(chart,country){\r\n    var datasets = chart.data.datasets\r\n    for(var i=0; i<datasets.length; i++){\r\n        if(datasets[i].label === country){\r\n            datasets.splice(i,1)\r\n        }\r\n    }\r\n    if( datasets.length === 0 ) {\r\n        chart.data.labels = []\r\n    }\r\n}\r\n\r\n/* --------------------------------------------------------------------------------\r\n| The Component\r\n|-----------------------------------------------------------------------------------\r\n*/\r\nconst Charts = (props) => {\r\n    var completeData = props.completeData\r\n    // States\r\n    // tracks the stepsize selected in the options panel\r\n    \r\n    /* --------------------------------------------------------------------------------\r\n    | Init Chart\r\n    |-----------------------------------------------------------------------------------\r\n    | useEffect wird standartmäßig aufgerufen, nachdem die UI gerendert ist. Dann kann das Chart mit \"new Chart\" erst initialisert werden, nach dem Rendern.\r\n    */\r\n    useEffect(()=>{\r\n        if(completeData){\r\n            var ctx = document.getElementById(id.id).getContext(\"2d\");\r\n            chart = new Chart(ctx, config);\r\n            init_Chart = false\r\n            showing = chart.data.datasets\r\n        }\r\n          \r\n    },[completeData])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Handle Map Select\r\n    |-----------------------------------------------------------------------------------\r\n    */\r\n    useEffect(()=>{\r\n            // If the selection on the map wasn't already selected, add it to the selected coutries\r\n            var notselected = true\r\n            for(var selected of props.selectedCountries){\r\n                if(selected.label === props.activeCountry) {\r\n                    notselected = false\r\n                    break\r\n                }\r\n            }\r\n            if(notselected) {\r\n                // if more countries have been selected, than there are colors\r\n                if(showing.length >= number_of_colors)   return props.alert.show(\"Maximum number of countries reached\")\r\n                else                                     props.setSelectedCountries(x => [...x,{value:props.activeCountry,label:props.activeCountry}])\r\n            }\r\n    \r\n    // !!! effect has to run only if activeCountry changes:\r\n    },[props.activeCountry])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Manage Datasets\r\n    |-----------------------------------------------------------------------------------\r\n    | compares the selected countries with already added to the chart countries\r\n    | adds and deletes datasets\r\n    */\r\n    useEffect(() => {\r\n        // Chart Data rendering\r\n        if(chart){\r\n            //var activeCountry = props.activeCountry\r\n            var activeLegend = props.activeLegend\r\n            var CountryData ;\r\n\r\n            // Compare addedCountries and selectedCountries\r\n            //get added Countries\r\n            var compare_added = []\r\n            for (var elem of chart.data.datasets){\r\n                compare_added.push(elem.label)\r\n            }\r\n\r\n            \r\n            var compare_selected = [...props.selectedCountries]\r\n            for(var i=0; i<compare_added.length; i++){\r\n                for(var j=0; j<compare_selected.length; j++){\r\n                    if(compare_added[i] === compare_selected[j].label){\r\n                        compare_added.splice(i,1)\r\n                        compare_selected.splice(j,1)\r\n                        i--;\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n\r\n            // add selected Countries\r\n            for(var country of compare_selected){\r\n                //if(country.label === \"Map\") continue\r\n                if(country.label === \"World\"){ \r\n                    CountryData = props.WorldData\r\n                } else {\r\n                    CountryData = completeData[country.label.toLowerCase()]\r\n                }\r\n                var [data,labels] = getRelevantData(CountryData,activeLegend, props.startDate, props.endDate, props.step, new Date(props.lastUpdate), props.relativeState)\r\n                chart_addDataset(chart,data,labels,country.label)\r\n\r\n            }\r\n            // delete deselected Countries\r\n            for(var deselect_country of compare_added){\r\n                chart_deleteDataset(chart,deselect_country)\r\n            }\r\n            chart.update()\r\n        }\r\n    },[props.selectedCountries, completeData])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Range Update\r\n    |-----------------------------------------------------------------------------------\r\n    | Triggered by changes to startDate, endDate, stepsize and the Legend\r\n    | deletes the current datasets and calls Manage Datasets by changeing addedCountries\r\n    */\r\n    useEffect(() => {\r\n        if(chart){\r\n            \r\n            // Update Chart Title\r\n            chart.options.title.text = props.activeLegend\r\n\r\n            for(var chart_data of chart.data.datasets){\r\n                var country_name = chart_data.label\r\n                var CountryData;\r\n                if(country_name === \"World\"){ \r\n                    //if(props.activeLegend === \"7-Day-Incidence\") return props.alert.info(\"not implemented for World yet\") // 7-Day-Incidence is not correct implemented for WorldData\r\n                    CountryData = props.WorldData\r\n                } else {\r\n                    CountryData = completeData[country_name.toLowerCase()]\r\n                }\r\n                var [data,labels] = getRelevantData(CountryData,props.activeLegend, props.startDate, props.endDate, props.step, new Date(props.lastUpdate), props.relativeState)\r\n                chart_data.data = data\r\n            }\r\n            chart.data.labels = labels\r\n            if(chart.options.scales.yAxes[0].scaleLabel)chart.options.scales.yAxes[0].scaleLabel.display = props.relativeState\r\n            chart.update()\r\n        }\r\n    },[props.startDate, props.endDate, props.step, props.activeLegend, props.relativeState])\r\n\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Initialize States\r\n    |-----------------------------------------------------------------------------------\r\n    | Once the Complete Data is loaded (the if statement) , we do some calculation\r\n    | getting: a list of countries, the data calculated for the whole world\r\n    | and we update the date pickers with the date, the data was last updated\r\n    | While the data is not loaded, display the loading screen\r\n    */\r\n    if(completeData){\r\n        \r\n        // init_States to avoid looping (only execute once)\r\n        if(props.lastUpdate && init_States){\r\n            init_States = false\r\n            // Update the Datepickers with the lastUpdate constraint\r\n            var now = new Date(props.lastUpdate)\r\n            var lastWeek = new Date(props.lastUpdate)\r\n            lastWeek.setDate(now.getDate() - 7)\r\n            props.setStartDate(lastWeek)\r\n            props.setEndDate(now)\r\n\r\n            // make a list of countries for the addCountry select\r\n            // you can fix a country, which can then not be deselected by adding the property \"isFixed: true\" eg: { value: 'Map', label: 'Map', isFixed: true}\r\n            var country_list = []\r\n            country_list.push({ value: 'World', label: 'World'})\r\n            for(var name in completeData){\r\n                country_list.push({ value: name, label: name })\r\n            }\r\n            props.setcountryList(country_list)\r\n\r\n            // World Data\r\n            var WorldData = []\r\n            var array_length = completeData[country_list[1].label].length\r\n            for(var i=0; i<array_length; i++){\r\n                var obj = {\r\n                    \"totalDeaths\":   0,\r\n                    \"totalCases\":0,\r\n                    \"newCases21Days\":0,\r\n                    \"newCases7Days\":0,\r\n                    \"population\":0\r\n                }\r\n                for(var country in completeData){\r\n                    if(completeData[country].length <= i) continue\r\n                    obj.totalDeaths = obj.totalDeaths + completeData[country][i].totalDeaths\r\n                    obj.totalCases = obj.totalCases + completeData[country][i].totalCases\r\n                    obj.newCases21Days = obj.newCases21Days + completeData[country][i].newCases21Days\r\n                    obj.newCases7Days = obj.newCases7Days + completeData[country][i].newCases7Days\r\n                    obj.population = obj.population + completeData[country][i].population\r\n                }\r\n                obj.date = completeData[country][i].date\r\n                WorldData.push(obj)\r\n            }\r\n            props.setWorldData(WorldData)\r\n        }\r\n        return (\r\n                <div className=\"chartContainer\">\r\n                    <div style={styles}>\r\n                        <canvas style={{width:'100%',height:'500px'}} id={id.id}/>\r\n                    </div>\r\n                    <div style={styles2}>\r\n                        <ChartMenu \r\n                            activeLanguage={props.activeLanguage}\r\n                            setStep={props.setStep} \r\n                            startDate={props.startDate} \r\n                            endDate={props.endDate} \r\n                            setEndDate={props.setEndDate} \r\n                            setStartDate={props.setStartDate} \r\n                            lastUpdate={props.lastUpdate}\r\n                            country_list={props.countryList}\r\n                            region_list={props.RegionList}\r\n                            selectedCountries={props.selectedCountries}\r\n                            setSelectedCountries={props.setSelectedCountries}\r\n                            showing={showing} number_of_colors={number_of_colors}\r\n                            alert={props.alert}\r\n                            activeFocus={props.activeFocus}\r\n                            relativeState={props.relativeState}\r\n                            setRelativeState={props.setRelativeState}\r\n                            showVac={props.showVac} \r\n                            setShowVac={props.setShowVac}\r\n                            setVacCumulative={props.setVacCumulative} vacCumulative={props.vacCumulative}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                \r\n        );\r\n    } else {\r\n        return (\r\n            <div className=\"chartContainer\">\r\n                <LoadingMap />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//<canvas style={{width:'95%',height:'500px'}} id={id.id}/>\r\n\r\nexport default Charts;\r\n","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Vacc_T.jsx",["215","216","217","218","219","220","221","222","223"],"import React,  { useState,useEffect } from 'react';\r\nimport \"./Charts.css\"\r\nimport Chart, { plugins } from 'chart.js'\r\nimport ChartMenu_Vacc from \"./ChartMenu/ChartMenu_Vacc.jsx\"\r\nimport LoadingMap from \"./LoadingMap\";\r\n\r\n// Global Var\r\nvar German_population = 83200000;\r\n\r\n// chart.js options\r\nvar chart_color = Chart.helpers.color;\r\nvar config = {\r\n    type:\"line\",\r\n    data: {\r\n        labels: [],\r\n        datasets: []\r\n    },\r\n    options: {\r\n        legend: {\r\n          position: 'top',\r\n          labels: {\r\n            fontColor: 'white'\r\n          }\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Chart',\r\n          fontColor: 'white',\r\n          fontSize: 18\r\n        },\r\n        scales: {\r\n            xAxes: [{\r\n                ticks: {\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines: {\r\n                    color: 'rgb(30, 30, 30)',\r\n                    display: true,\r\n                    drawBorder: true,\r\n                    drawOnChartArea: true,\r\n                    drawTicks: false,\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                ticks: {\r\n                    fontColor: 'white',\r\n                    beginAtZero:true\r\n                },\r\n                gridLines: {\r\n                    color: 'rgb(30, 30, 30)',\r\n                    display: true,\r\n                    drawBorder: true,\r\n                    drawOnChartArea: true,\r\n                    drawTicks: false,\r\n                },\r\n                scaleLabel: {\r\n                    display: false,\r\n                    labelString: 'percent [%]',\r\n                  }\r\n            }]\r\n        }\r\n    },\r\n    plugins:[\r\n        {afterDraw:function(chart) {\r\n            // var goin = false\r\n            if(!chart.data.labels || chart.data.labels.length === 0)    {              //goin = true\r\n            //else if(chart.data.datasets[0].data.length === 0)   //goin = true\r\n            //if (goin) {\r\n                //if(chart.data.datasets[0].data.length === 0){\r\n                 // oder chart.data.datasets.length === 0\r\n                // No data is present\r\n                var ctx = chart.chart.ctx;\r\n                var width = chart.chart.width;\r\n                var height = chart.chart.height;\r\n                chart.clear();\r\n    \r\n                ctx.save();\r\n                ctx.textAlign = 'center';\r\n                ctx.textBaseline = 'middle';\r\n                ctx.font = \"2rem 'Helvetica Nueue'\";\r\n                ctx.fillStyle = \"white\";\r\n                ctx.fillText('Please Select a Region', width / 2, height / 2);\r\n                ctx.restore();\r\n                }\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\n// chart size\r\nconst styles = {\r\n    width: '85%',\r\n    height: \"500px\",\r\n    overflow: \"hidden\"\r\n}\r\n// chart options size\r\nconst styles2 = {\r\n    width: '15%'\r\n}\r\n\r\n// States\r\nconst id = {id:\"ChartID_3\"}\r\nvar chart;\r\n\r\nfunction getRelevantData(CountryData, activeLegend, startDate, endDate, step, lastUpdated,relative, cumulative){\r\n\r\n    // ignore countries with no data\r\n    if(CountryData === undefined) {\r\n        if(chart.data.labels){\r\n            return [[],chart.data.labels]\r\n        } else {\r\n            return [[],[]]\r\n        }\r\n    }\r\n    \r\n    const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\r\n    const diffDaysStart = Math.round(Math.abs((startDate - lastUpdated) / oneDay));\r\n    const NumberDays = Math.round(Math.abs((startDate - endDate) / oneDay));\r\n    var left_index = CountryData.length - 1 - diffDaysStart\r\n    var right_index = CountryData.length - diffDaysStart + NumberDays\r\n    var relevantData = CountryData.slice(left_index,right_index)\r\n    var Accumulator = 0\r\n\r\n    function roundTo2(num) {\r\n        return +(Math.round(num + \"e+2\")  + \"e-2\");\r\n    }\r\n    function roundTo4(num) {\r\n        return +(Math.round(num + \"e+4\")  + \"e-4\");\r\n    }\r\n    function data_sorting(f){\r\n        var labels = []\r\n        var data = []\r\n        var sum_array = []\r\n\r\n        const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n                            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n                            ];\r\n\r\n        const sum = (accumulator, currentValue) => Number(accumulator) + Number(currentValue);\r\n\r\n        for (var i=0; i<relevantData.length; i++){\r\n            var elem = relevantData[i]\r\n            var date = new Date(elem.date)\r\n            console.log(step.label)\r\n            if(step.value === \"d\"){\r\n                console.log(roundTo2(f(elem)))\r\n                data.push(roundTo2(f(elem)))\r\n                labels.push(date.toLocaleDateString())\r\n            }\r\n            else if(step.value === \"w\"){\r\n                sum_array.push(f(elem))\r\n                if(date.getDay() === 0 || i === relevantData.length-1){\r\n                    data.push(roundTo2(sum_array.reduce(sum)/sum_array.length))\r\n                    sum_array = []\r\n                    if (date.getDay() === 0) labels.push(date.toDateString())\r\n                    else                    labels.push(\"last Week\")\r\n                }\r\n            }\r\n            else {\r\n                sum_array.push(f(elem))\r\n                if(date.getDate() === 1 || i === relevantData.length-1){\r\n                    data.push(roundTo2(sum_array.reduce(sum)/sum_array.length))\r\n                    sum_array = []\r\n                    if (date.getDate() === 1)    labels.push(monthNames[date.getMonth()])\r\n                    else                         labels.push(\"last Month\")\r\n                }\r\n            }\r\n        }\r\n        return [data,labels]\r\n    }\r\n\r\n    if (cumulative){\r\n        if(relative) return data_sorting( x => {\r\n            Accumulator = Accumulator + x[activeLegend]\r\n            return Accumulator/German_population*100})\r\n        else return data_sorting(x => {\r\n            Accumulator = Accumulator + x[activeLegend]\r\n            return Accumulator})\r\n    }\r\n    else {\r\n        if(relative) return data_sorting( x => x[activeLegend]/German_population*100)\r\n        else return data_sorting(x => x[activeLegend])\r\n    }\r\n}\r\n\r\n/* --------------------------------------------------------------------------------\r\n| The Component\r\n|-----------------------------------------------------------------------------------\r\n*/\r\nconst Charts_Vacc = (props) => {\r\n    // States\r\n    // tracks the stepsize selected in the options panel\r\n\r\n    \r\n\r\n    /* --------------------------------------------------------------------------------\r\n    |  Chart Init\r\n    |-----------------------------------------------------------------------------------\r\n    | \r\n    */\r\n    useEffect(() => {\r\n        if(props.completeRegionData){\r\n            if(props.completeRegionData.length > 1){\r\n\r\n                // Set Chart\r\n                var ctx = document.getElementById(id.id).getContext(\"2d\");\r\n                chart = new Chart(ctx, config);\r\n                /*\r\n                for (var country of props.completeRegionData[0]){\r\n                    if (country === \"Germany\"){\r\n                        German_population = country[0].population\r\n                        break\r\n                    }\r\n                }\r\n                */\r\n            }\r\n        }\r\n    },[props.completeRegionData])\r\n\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    |  Chart Update\r\n    |-----------------------------------------------------------------------------------\r\n    | \r\n    */\r\n    useEffect(() => {\r\n        if(props.completeRegionData){\r\n            if(props.completeRegionData.length > 1){\r\n\r\n                // Language Support\r\n                var labels_names = {\r\n                    dataset:{\r\n                        English:[\"First Vaccination\", \"Second Vaccination\"],\r\n                        Deutsch:[\"Erstimpfung\", \"Zweitimpfung\"]\r\n                    },\r\n                    title:{\r\n                        English:\"Vaccinations in Germany\",\r\n                        Deutsch:\"Impfungen in Deutschland\"\r\n                    }\r\n                }\r\n                //First Vacc\r\n                var dataArray = []\r\n                var VaccData = props.completeRegionData[1].vacc\r\n                console.log(props)\r\n                var [data,labels] = getRelevantData(VaccData,\"first vacc\", props.startDate, props.endDate, props.step, new Date(props.lastUpdate),props.relativeState,props.vacCumulative)\r\n                var color = \"rgb(75, 192, 192)\"\r\n                dataArray.push({\r\n                    label: labels_names.dataset[props.activeLanguage][0],\r\n                    data: data,\r\n                    //color\r\n                    backgroundColor: chart_color(color).alpha(0.2).rgbString(),\r\n                    borderColor: color,\r\n                    colorNumber:0,\r\n                    pointBackgroundColor: color,\r\n                    borderWidth: 1\r\n                })\r\n                //Second Vacc\r\n                var [data,labels] = getRelevantData(VaccData,\"second vacc\", props.startDate, props.endDate, props.step, new Date(props.lastUpdate),props.relativeState,props.vacCumulative)\r\n                var color = \"rgb(75, 192, 150)\"\r\n                dataArray.push({\r\n                    label: labels_names.dataset[props.activeLanguage][1],\r\n                    data: data,\r\n                    //color\r\n                    backgroundColor: chart_color(color).alpha(0.2).rgbString(),\r\n                    borderColor: color,\r\n                    colorNumber:1,\r\n                    pointBackgroundColor: color,\r\n                    borderWidth: 1\r\n                })\r\n                // Chart Labels\r\n                chart.data.datasets = dataArray\r\n                chart.options.title.text = labels_names.title[props.activeLanguage]\r\n                chart.data.labels = labels\r\n                chart.update()\r\n            }\r\n        }\r\n    },[props.startDate, props.endDate, props.step, props.relativeState, props.vacCumulative])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Loading Indicator\r\n    |-----------------------------------------------------------------------------------\r\n    | Show the loading Indicator until the data is loaded\r\n    */\r\n    if(props.completeRegionData){\r\n        if(props.completeRegionData.length > 1){\r\n            return (\r\n                <div className=\"chartContainer\">\r\n                    <div style={styles}>\r\n                        <canvas style={{width:'100%',height:'500px'}} id={id.id}/>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    } \r\n    return (\r\n        <div className=\"chartContainer\">\r\n            <LoadingMap />\r\n        </div>\r\n    )\r\n}\r\n//<canvas style={{width:'95%',height:'500px'}} id={id.id}/>\r\n\r\nexport default Charts_Vacc;\r\n","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Charts_Region.jsx",["224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240"],"import React,  { useState,useEffect } from 'react';\r\nimport \"./Charts.css\"\r\nimport Chart, { plugins } from 'chart.js'\r\nimport ChartMenu from \"./ChartMenu.jsx\"\r\nimport LoadingMap from \"./LoadingMap\";\r\n\r\n// colors for the charts\r\nvar chartColors = [\r\n\t{name:'red',    value: 'rgb(255, 99, 132)'},\r\n\t{name:'orange', value: 'rgb(255, 159, 64)'},\r\n\t{name:'yellow', value: 'rgb(255, 205, 86)'},\r\n\t{name:'green',  value: 'rgb(75, 192, 192)'},\r\n\t{name:'blue',   value: 'rgb(54, 162, 235)'},\r\n\t{name:'purple', value: 'rgb(153, 102, 255)'},\r\n\t{name:'grey',   value: 'rgb(231,233,237)'}\r\n];\r\n\r\n// chart.js options\r\nvar chart_color = Chart.helpers.color;\r\nvar config = {\r\n    type:\"bar\",\r\n    data: {\r\n        labels: [],\r\n        datasets: []\r\n    },\r\n    options: {\r\n        legend: {\r\n          position: 'top',\r\n          labels: {\r\n            fontColor: 'white'\r\n          }\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Chart',\r\n          fontColor: 'white',\r\n          fontSize: 18\r\n        },\r\n        scales: {\r\n            xAxes: [{\r\n                ticks: {\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines: {\r\n                    color: 'rgb(30, 30, 30)',\r\n                    display: true,\r\n                    drawBorder: true,\r\n                    drawOnChartArea: true,\r\n                    drawTicks: false,\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                ticks: {\r\n                    fontColor: 'white',\r\n                    beginAtZero:true\r\n                },\r\n                gridLines: {\r\n                    color: 'rgb(30, 30, 30)',\r\n                    display: true,\r\n                    drawBorder: true,\r\n                    drawOnChartArea: true,\r\n                    drawTicks: false,\r\n                },\r\n                scaleLabel: {\r\n                    display: false,\r\n                    labelString: 'percent [%]',\r\n                  }\r\n            }]\r\n        }\r\n    },\r\n    plugins:[\r\n        {afterDraw:function(chart) {\r\n            // var goin = false\r\n            if(!chart.data.labels || chart.data.labels.length === 0)    {              //goin = true\r\n            //else if(chart.data.datasets[0].data.length === 0)   //goin = true\r\n            //if (goin) {\r\n                //if(chart.data.datasets[0].data.length === 0){\r\n                 // oder chart.data.datasets.length === 0\r\n                // No data is present\r\n                var ctx = chart.chart.ctx;\r\n                var width = chart.chart.width;\r\n                var height = chart.chart.height;\r\n                chart.clear();\r\n    \r\n                ctx.save();\r\n                ctx.textAlign = 'center';\r\n                ctx.textBaseline = 'middle';\r\n                ctx.font = \"2rem 'Helvetica Nueue'\";\r\n                ctx.fillStyle = \"white\";\r\n                ctx.fillText('Please Select a Region', width / 2, height / 2);\r\n                ctx.restore();\r\n                }\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\n// chart size\r\nconst styles = {\r\n    width: '85%',\r\n    height: \"500px\",\r\n    overflow: \"hidden\"\r\n}\r\n// chart options size\r\nconst styles2 = {\r\n    width: '15%'\r\n}\r\n\r\n// States\r\nconst id = {id:\"ChartID_1\"}\r\nvar init_Chart = true\r\nvar init_States= true\r\nvar chart;\r\nvar showing;\r\nif(chart)   showing = chart.data.datasets\r\nelse        showing = 0\r\nvar number_of_colors = chartColors.length\r\n\r\nfunction find_Bundesland_in_Germany(region,Ger){\r\n    for(var Bundesland in Ger){\r\n        for( var Landkreis in Ger[Bundesland]){\r\n            if(Landkreis === region) return Bundesland\r\n        }\r\n    }\r\n}\r\nfunction is_German(country, Ger){\r\n    for(var Bundesland in Ger){\r\n        if(Bundesland === country) return true\r\n    }\r\n    return false\r\n}\r\n\r\nfunction getRelevantData(CountryData, activeLegend, startDate, endDate, step, lastUpdated, relative, Ger){\r\n\r\n    // ignore countries with no data\r\n    if(CountryData === undefined) {\r\n        if(chart.data.labels){\r\n            return [[],chart.data.labels]\r\n        } else {\r\n            return [[],[]]\r\n        }\r\n    }\r\n    \r\n    const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\r\n    const diffDaysStart = Math.round(Math.abs((startDate - lastUpdated) / oneDay));\r\n    const NumberDays = Math.round(Math.abs((startDate - endDate) / oneDay));\r\n    var left_index = CountryData.length - 1 - diffDaysStart\r\n    var right_index = CountryData.length - diffDaysStart + NumberDays\r\n    var relevantData = CountryData.slice(left_index,right_index)\r\n\r\n    function roundTo2(num) {\r\n        return +(Math.round(num + \"e+2\")  + \"e-2\");\r\n    }\r\n    function roundTo4(num) {\r\n        return +(Math.round(num + \"e+4\")  + \"e-4\");\r\n    }\r\n    function data_sorting(f){\r\n        var labels = []\r\n        var data = []\r\n        var sum_array = []\r\n\r\n        const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n                            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n                            ];\r\n\r\n        const sum = (accumulator, currentValue) => Number(accumulator) + Number(currentValue);\r\n\r\n        for (var i=0; i<relevantData.length; i++){\r\n            var elem = relevantData[i]\r\n            if(Ger) var date = new Date(elem.d)\r\n            else var date = new Date(elem.date)\r\n            if(step.value === \"d\"){\r\n                data.push(roundTo2(f(elem)))\r\n                labels.push(date.toLocaleDateString())\r\n            }\r\n            else if(step.value === \"w\"){\r\n                sum_array.push(f(elem))\r\n                if(date.getDay() === 0 || i === relevantData.length-1){\r\n                    data.push(roundTo2(sum_array.reduce(sum)/sum_array.length))\r\n                    sum_array = []\r\n                    if (date.getDay() === 0) labels.push(date.toDateString())\r\n                    else                    labels.push(\"last Week\")\r\n                }\r\n            }\r\n            else {\r\n                sum_array.push(f(elem))\r\n                if(date.getDate() === 1 || i === relevantData.length-1){\r\n                    data.push(roundTo2(sum_array.reduce(sum)/sum_array.length))\r\n                    sum_array = []\r\n                    if (date.getDate() === 1)    labels.push(monthNames[date.getMonth()])\r\n                    else                         labels.push(\"last Month\")\r\n                }\r\n            }\r\n        }\r\n        return [data,labels]\r\n    }\r\n\r\n    function data_sorting_cum(f){\r\n        var labels = []\r\n        var data = []\r\n        var sum_array = []\r\n\r\n        const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n                            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n                            ];\r\n\r\n        for (var i=0; i<relevantData.length; i++){\r\n            var elem = relevantData[i]\r\n            if(Ger) var date = new Date(elem.d)\r\n            else var date = new Date(elem.date)\r\n            if(step.value === \"d\"){\r\n                data.push(roundTo2(f(elem)))\r\n                labels.push(date.toLocaleDateString())\r\n            }\r\n            else if(step.value === \"w\"){\r\n                if(date.getDay() === 0 ){\r\n                    data.push(roundTo2(f(elem)))\r\n                    if (date.getDay() === 0) labels.push(date.toDateString())\r\n                    else                    labels.push(\"today\")\r\n                }\r\n            }\r\n            else {\r\n                if(date.getDate() === 1 ){\r\n                    data.push(roundTo2(f(elem)))\r\n                    if (date.getDate() === 1)    labels.push(monthNames[date.getMonth()])\r\n                    else                         labels.push(\"today\")\r\n                }\r\n            }\r\n        }\r\n        return [data,labels]\r\n    }\r\n    \r\n    if (activeLegend === \"Cumulative Fatalities\"){\r\n        if(Ger){\r\n            if(relative) return data_sorting(x => {return roundTo4(x[\"h\"]/x.population)*100})\r\n            else return data_sorting_cum(x =>  x[\"h\"])\r\n        } else {\r\n            if(relative) return data_sorting(x => {return roundTo4(x[\"totalDeaths\"]/x.population)*100})\r\n            else return data_sorting_cum(x =>  x[\"totalDeaths\"])\r\n        }\r\n    }\r\n    else if (activeLegend === \"New Cases(21 Days)\"){\r\n        if(Ger){\r\n            if(relative) return data_sorting(x => roundTo4(x[\"g\"]/x.population)*100)\r\n            else return data_sorting(x => x[\"g\"])\r\n        } else {\r\n            if(relative) return data_sorting(x => {return roundTo4(x[\"newCases21Days\"]/x.population)*100})\r\n            else return data_sorting(x => x[\"newCases21Days\"])\r\n        }\r\n    }\r\n    else if (activeLegend ===  \"7-Day-Incidence\"){\r\n        if(Ger){\r\n            return data_sorting(x => roundTo2(x[\"f\"]/x[\"population\"]*100000))\r\n        } else {\r\n            return data_sorting(x => roundTo2(x[\"newCases7Days\"]/x[\"population\"]*100000))\r\n        }\r\n    }\r\n    else if (activeLegend ===  \"ICU-Occupancy\"){\r\n        if(Ger){\r\n            return data_sorting(x => roundTo2(x[\"j\"]/(x[\"k\"]+x[\"j\"])*100))\r\n        } else {\r\n            return data_sorting(x => 0)\r\n        }\r\n    }\r\n    else if (activeLegend === \"Cumulative Cases\"){\r\n        if(Ger){\r\n            if(relative) return data_sorting(x => roundTo4(x[\"e\"]/x.population)*100)\r\n            else return data_sorting_cum(x => x[\"e\"])\r\n        } else {\r\n            if(relative) return data_sorting(x => roundTo4(x[\"totalCases\"]/x.population)*100)\r\n            else return data_sorting_cum(x => x[\"totalCases\"])\r\n        }\r\n    }  \r\n    else {\r\n        return [[],[]];\r\n    }\r\n}\r\n\r\nfunction chart_addDataset(chart,data,labels,activeRegion){\r\n\r\n    // get the right color. If a country in the middle has been deleted, there is a free color. \r\n    // and here I find this color\r\n    var sets = chart.data.datasets.length\r\n    var index;\r\n    if(sets === 0) {\r\n        index = 0\r\n    }\r\n    else if (sets === 1){\r\n        index = chart.data.datasets[0].colorNumber + 1\r\n    } else {\r\n        var numbers = [...Array(number_of_colors).keys()];\r\n        for( let c of chart.data.datasets){\r\n            numbers.splice(numbers.findIndex(x=>x===c.colorNumber),1)\r\n        }\r\n        index = numbers.shift()\r\n    }\r\n    \r\n    chart.data.datasets.push({\r\n        label: activeRegion,\r\n        data: data,\r\n        //color\r\n        backgroundColor: chart_color(chartColors[index].value).alpha(0.2).rgbString(),\r\n        borderColor: chartColors[index].value,\r\n        colorNumber:index,\r\n        pointBackgroundColor: chartColors[index].value,\r\n        borderWidth: 1\r\n    })\r\n    chart.data.labels = labels\r\n}\r\n\r\nfunction chart_deleteDataset(chart,country){\r\n    var datasets = chart.data.datasets\r\n    for(var i=0; i<datasets.length; i++){\r\n        if(datasets[i].label === country){\r\n            datasets.splice(i,1)\r\n        }\r\n    }\r\n    if( datasets.length === 0 ) {\r\n        chart.data.labels = []\r\n    }\r\n}\r\n\r\n/* --------------------------------------------------------------------------------\r\n| The Component\r\n|-----------------------------------------------------------------------------------\r\n*/\r\nconst Charts_Region = (props) => {\r\n    // States\r\n    // tracks the stepsize selected in the options panel\r\n\r\n    \r\n    /* --------------------------------------------------------------------------------\r\n    | Init Chart\r\n    |-----------------------------------------------------------------------------------\r\n    | useEffect wird standartmäßig aufgerufen, nachdem die UI gerendert ist. Dann kann das Chart mit \"new Chart\" erst initialisert werden, nach dem Rendern.\r\n    */\r\n    useEffect(()=>{\r\n        if(props.completeRegionData){\r\n            var ctx = document.getElementById(id.id).getContext(\"2d\");\r\n            chart = new Chart(ctx, config);\r\n            init_Chart = false\r\n            showing = chart.data.datasets\r\n            chart.data.labels = []\r\n        }\r\n\r\n          \r\n    },[props.completeRegionData])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Handle Map Select\r\n    |-----------------------------------------------------------------------------------\r\n    */\r\n    useEffect(()=>{\r\n            // If the selection on the map wasn't already selected, add it to the selected coutries\r\n            if(props.activeRegion){\r\n                // Check if German data is loaded. If not, notify about loading Times\r\n                if(props.activeRegion.country === \"Germany\"){\r\n                    if(props.completeRegionData.length === 1) return props.alert.show(\"German region data is loading. \\nThis can take up to two minutes\")\r\n                    \r\n                    var Active_country = find_Bundesland_in_Germany(props.activeRegion.region,props.completeRegionData[1])\r\n                    var Active_region = props.activeRegion.region\r\n                }\r\n                else {\r\n                    var Active_country = props.activeRegion.country.toLowerCase()\r\n                    var Active_region = props.activeRegion.region\r\n                }\r\n\r\n                var notselected = true\r\n                for(var selected of props.selectedRegions){\r\n                    if(selected.value === Active_country && selected.label === Active_region) {\r\n                        notselected = false\r\n                        break\r\n                    }\r\n                }\r\n                if(notselected) {\r\n                    // if more countries have been selected, than there are colors\r\n                    if(showing.length >= number_of_colors)   return props.alert.show(\"Maximum number of regions reached\")\r\n                    else{\r\n                        props.setSelectedRegions(x => [...x,{value:Active_country, label:Active_region}])\r\n                    }                                     \r\n                }\r\n            }\r\n    \r\n    // !!! effect has to run only if activeRegion changes:\r\n    },[props.activeRegion])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Manage Datasets\r\n    |-----------------------------------------------------------------------------------\r\n    | compares the selected countries with already added to the chart countries\r\n    | adds and deletes datasets\r\n    */\r\n    useEffect(() => {\r\n        // Chart Data rendering\r\n        if(chart){\r\n            //var activeCountry = props.activeCountry\r\n            var activeLegend = props.activeLegend\r\n            var CountryData ;\r\n\r\n            //get added Regions\r\n            var compare_added = []\r\n            for (var elem of chart.data.datasets){\r\n                compare_added.push(elem.label)\r\n            }\r\n\r\n            \r\n            var compare_selected = [...props.selectedRegions]\r\n            for(var i=0; i<compare_added.length; i++){\r\n                for(var j=0; j<compare_selected.length; j++){\r\n                    var str_arr = compare_added[i].split(\"/\")\r\n                    if(str_arr[0] === compare_selected[j].value && str_arr[1] === compare_selected[j].label){\r\n                        compare_added.splice(i,1)\r\n                        compare_selected.splice(j,1)\r\n                        i--;\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n\r\n            // add selected Countries\r\n            for(var selected of compare_selected){\r\n                \r\n                // German data is formated differntly\r\n                var Ger = false;\r\n                if(is_German(selected.value, props.completeRegionData[1])){\r\n                    CountryData = props.completeRegionData[1][selected.value][selected.label]\r\n                    var Ger = true;\r\n                }\r\n                // Die Regionen sind klein Geschrieben. Außer bei einzelnen Ländern. z.B. {poland.poland:[...]} anstatt {austria.Oberösterreich:[...]}\r\n                else if(props.completeRegionData[0][selected.value].length === 1){\r\n                    CountryData = props.completeRegionData[0][selected.value][selected.label.toLowerCase()]\r\n                } else {\r\n                    CountryData = props.completeRegionData[0][selected.value][selected.label]\r\n                }\r\n                \r\n                var [data,labels] = getRelevantData(CountryData,activeLegend, props.startDate, props.endDate, props.step, new Date(props.lastUpdate), props.relativeState, Ger)\r\n                chart_addDataset(chart,data,labels,selected.value + \"/\" + selected.label)\r\n\r\n            }\r\n            // delete deselected Countries\r\n            for(var deselect_country of compare_added){\r\n                chart_deleteDataset(chart,deselect_country)\r\n            }\r\n            chart.update()\r\n        }\r\n    },[props.selectedRegions, props.completeRegionData])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Range Update\r\n    |-----------------------------------------------------------------------------------\r\n    | Triggered by changes to startDate, endDate, stepsize and the Legend\r\n    | deletes the current datasets and calls Manage Datasets by changeing addedCountries\r\n    */\r\n    useEffect(() => {\r\n        if(chart){\r\n            \r\n            // Update Chart Title\r\n            chart.options.title.text = props.activeLegend\r\n\r\n\r\n            for(var chart_data of chart.data.datasets){\r\n                var Ger = false;\r\n                var country_name = chart_data.label\r\n                var CountryData;\r\n                var str_arr  = country_name.split(\"/\")\r\n                if(is_German(str_arr[0], props.completeRegionData[1])){\r\n                    CountryData = props.completeRegionData[1][str_arr[0]][str_arr[1]]\r\n                    var Ger = true;\r\n                } else {\r\n                    CountryData = props.completeRegionData[0][str_arr[0]][str_arr[1]]\r\n                }\r\n\r\n                var [data,labels] = getRelevantData(CountryData,props.activeLegend, props.startDate, props.endDate, props.step, new Date(props.lastUpdate), props.relativeState, Ger)\r\n                chart_data.data = data\r\n            }\r\n            chart.data.labels = labels\r\n            if(chart.options.scales.yAxes[0].scaleLabel)chart.options.scales.yAxes[0].scaleLabel.display = props.relativeState\r\n            chart.update()\r\n            // change chart axis label on relative\r\n        }\r\n    },[props.startDate, props.endDate, props.step, props.activeLegend, props.relativeState])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | RegionList\r\n    |-----------------------------------------------------------------------------------\r\n    | Create a Region List for the select option\r\n    */\r\n    useEffect(() => {\r\n        if(props.completeRegionData){\r\n            var region_list = []\r\n            for(var country in props.completeRegionData[0]){\r\n                var obj = {\r\n                    label:country,\r\n                    options:[]\r\n                }\r\n                for( var Kreis in props.completeRegionData[0][country]){\r\n                    obj.options.push({ value: country, label: Kreis })\r\n                }\r\n                region_list.push(obj)\r\n            }\r\n            if(props.completeRegionData.length > 1){\r\n                for(var Bundesland in props.completeRegionData[1]){\r\n                    if(Bundesland === \"vacc\") continue;\r\n                    var obj = {\r\n                        label:Bundesland,\r\n                        options:[]\r\n                    }\r\n                    for( var Kreis in props.completeRegionData[1][Bundesland]){\r\n                        obj.options.push({ value: Bundesland, label: Kreis })\r\n                    }\r\n                    region_list.push(obj)\r\n                }\r\n            }\r\n            props.setRegionList(region_list)\r\n        }\r\n    },[props.completeRegionData])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Initialize States\r\n    |-----------------------------------------------------------------------------------\r\n    | Once the Complete Data is loaded (the if statement) , we do some calculation\r\n    | getting: a list of countries, the data calculated for the whole world\r\n    | and we update the date pickers with the date, the data was last updated\r\n    | While the data is not loaded, display the loading screen\r\n    */\r\n    if(props.completeRegionData){\r\n\r\n        return (\r\n            <div className=\"chartContainer\">\r\n                <div style={styles}>\r\n                    <canvas style={{width:'100%',height:'500px'}} id={id.id}/>\r\n                </div>\r\n                <div style={styles2}>\r\n                    <ChartMenu \r\n                        activeLanguage={props.activeLanguage}\r\n                        setStep={props.setStep} \r\n                        startDate={props.startDate} \r\n                        endDate={props.endDate} \r\n                        setEndDate={props.setEndDate} \r\n                        setStartDate={props.setStartDate} \r\n                        lastUpdate={props.lastUpdate}\r\n                        country_list={props.countryList}\r\n                        region_list={props.RegionList}\r\n                        selectedRegions={props.selectedRegions}\r\n                        setSelectedRegions={props.setSelectedRegions}\r\n                        showing={showing} number_of_colors={number_of_colors}\r\n                        alert={props.alert}\r\n                        activeFocus={props.activeFocus}\r\n                        relativeState={props.relativeState}\r\n                        setRelativeState={props.setRelativeState}\r\n                        showVac={props.showVac} \r\n                        setShowVac={props.setShowVac}\r\n                        setVacCumulative={props.setVacCumulative} vacCumulative={props.vacCumulative}\r\n                        />\r\n                </div>    \r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className=\"chartContainer\">\r\n                <LoadingMap />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//<canvas style={{width:'95%',height:'500px'}} id={id.id}/>\r\n\r\nexport default Charts_Region;\r\n","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\TimeRange.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\Stepsize.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\entities\\LegendItem.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu.jsx",["241"],"import React from 'react';\r\nimport \"./ChartMenu.css\"\r\nimport TimeRange from \"./ChartMenu/TimeRange.jsx\"\r\nimport Stepsize from \"./ChartMenu/Stepsize.jsx\"\r\nimport AddCountry from \"./ChartMenu/AddCountry.jsx\"\r\nimport AddRegion from \"./ChartMenu/AddRegion.jsx\"\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switches from './ChartMenu/Switches';\r\n\r\nconst ChartMenu = (props) => {\r\n  \r\n /* -------------------------------------------------\r\n    * ToDo: kritische Linien\r\n    * -------------------------------------------------- */    \r\n  if(props.activeFocus === \"World\")  {\r\n    return (\r\n      <div className=\"slidecontainer\">\r\n        <div className=\"centering\">\r\n          <h3>{props.activeLanguage === \"English\" ? (<label>Options</label>) : (<label>Optionen</label>)}</h3>\r\n            {props.activeLanguage === \"English\" ? (<label>Add Country</label>) : (<label>Land hinzufügen</label>)}\r\n            <AddCountry showing={props.showing} number_of_colors={props.number_of_colors} alert={props.alert} country_list={props.country_list} selectedCountries={props.selectedCountries} setSelectedCountries={props.setSelectedCountries}/>\r\n            {props.activeLanguage === \"English\" ? (<label>Time Range</label>) : (<label>Zeitraum</label>)}\r\n            <TimeRange startDate={props.startDate} endDate={props.endDate} setEndDate={props.setEndDate} setStartDate={props.setStartDate} lastUpdate={props.lastUpdate} activeLanguage={props.activeLanguage}/>\r\n            {props.activeLanguage === \"English\" ? (<label>Stepsize</label>) : (<label>Schrittgröße</label>)}\r\n            <Stepsize setStep={props.setStep} activeLanguage={props.activeLanguage}/>\r\n            <Switches\r\n              relativeState={props.relativeState}\r\n              setRelativeState={props.setRelativeState}\r\n              showVac={props.showVac}\r\n              setShowVac={props.setShowVac}\r\n              setVacRelative={props.setVacRelative} \r\n              vacRelative={props.vacRelative} \r\n              setVacCumulative={props.setVacCumulative} \r\n              vacCumulative={props.vacCumulative}\r\n              activeLanguage={props.activeLanguage}\r\n            />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <div className=\"slidecontainer\">\r\n        <div className=\"centering\">\r\n        <h3>{props.activeLanguage === \"English\" ? (<label>Options</label>) : (<label>Optionen</label>)}</h3>\r\n          {props.activeLanguage === \"English\" ? (<label>Add Region</label>) : (<label>Region hinzufügen</label>)}\r\n            \r\n              <AddRegion showing={props.showing} number_of_colors={props.number_of_colors} alert={props.alert} region_list={props.region_list} selectedRegions={props.selectedRegions} setSelectedRegions={props.setSelectedRegions}/>\r\n              {props.activeLanguage === \"English\" ? (<label>Time Range</label>) : (<label>Zeitraum</label>)}\r\n              <TimeRange startDate={props.startDate} endDate={props.endDate} setEndDate={props.setEndDate} setStartDate={props.setStartDate} lastUpdate={props.lastUpdate} activeLanguage={props.activeLanguage}/>\r\n              {props.activeLanguage === \"English\" ? (<label>Stepsize</label>) : (<label>Schrittgröße</label>)}\r\n              <Stepsize setStep={props.setStep} activeLanguage={props.activeLanguage}/>\r\n              <Switches\r\n                relativeState={props.relativeState}\r\n                setRelativeState={props.setRelativeState}\r\n                showVac={props.showVac}\r\n                setShowVac={props.setShowVac}\r\n                setVacCumulative={props.setVacCumulative} \r\n                vacCumulative={props.vacCumulative}\r\n                activeLanguage={props.activeLanguage}\r\n            />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartMenu;\r\n","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadNewsTask.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\entities\\DropdownMenu.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\entities\\FocusMenu.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\AddRegion.jsx",["242","243"],"import React from \"react\";\r\nimport Select from 'react-select'\r\nimport \"./AddCountry.css\" \r\nimport makeAnimated from 'react-select/animated';\r\n\r\nconst animatedComponents = makeAnimated();\r\n\r\nconst styles = {\r\n  multiValue: (base, state) => {\r\n    return state.data.isFixed ? { ...base, backgroundColor: 'gray' } : base;\r\n  },\r\n  multiValueLabel: (base, state) => {\r\n    return state.data.isFixed\r\n      ? { ...base, fontWeight: 'bold', color: 'white', paddingRight: 6 }\r\n      : base;\r\n  },\r\n  multiValueRemove: (base, state) => {\r\n    return state.data.isFixed ? { ...base, display: 'none' } : base;\r\n  },\r\n};\r\n\r\nconst orderOptions = values => {\r\n  return (\r\n    values &&\r\n    values.filter(v => v.isFixed).concat(values.filter(v => !v.isFixed))\r\n  );\r\n};\r\n\r\nconst AddRegion = (props) => {\r\n\r\n  const onChange = (value, { action, removedValue }) => {\r\n    var check_count = true\r\n    switch (action) {\r\n      case \"remove-value\":\r\n        check_count = !check_count\r\n        var arr = [...props.selectedRegions]\r\n        var index = arr.findIndex(x => (x.label === removedValue.label && x.value === removedValue.value))\r\n        arr.splice(index,1)\r\n        props.setSelectedRegions(arr)\r\n        return\r\n        break;\r\n      case \"pop-value\":\r\n        if (removedValue.isFixed) {\r\n          return;\r\n        }\r\n        break;\r\n      case \"clear\":\r\n        value = props.region_list.filter(v => v.isFixed);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    value = orderOptions(value);\r\n    //if(props.showing.length >= props.number_of_colors && check_count) return props.alert.show(\"Maximum number of regions reached\")\r\n    props.setSelectedRegions(value);//x => [...x,{country:value[0].value,region:value[0].label}]\r\n  };\r\n\r\n  const groupStyles = {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n  };\r\n\r\n  const groupBadgeStyles = {\r\n    backgroundColor: '#EBECF0',\r\n    borderRadius: '2em',\r\n    color: '#172B4D',\r\n    display: 'inline-block',\r\n    fontSize: 12,\r\n    fontWeight: 'normal',\r\n    lineHeight: '1',\r\n    minWidth: 1,\r\n    padding: '0.16666666666667em 0.5em',\r\n    textAlign: 'center',\r\n  };\r\n\r\n  const formatGroupLabel = data => (\r\n    <div style={groupStyles}>\r\n      <span>{data.label}</span>\r\n      <span style={groupBadgeStyles}>{data.options.length}</span>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Select \r\n      options={props.region_list} \r\n      components={animatedComponents}\r\n      formatGroupLabel={formatGroupLabel} \r\n      className=\"AddCountry\"\r\n      isMulti={true} \r\n      onChange={onChange}\r\n      styles={styles}\r\n      value={props.selectedRegions}\r\n      //isClearable={props.selectedRegions && props.selectedRegions.some(v => !v.isFixed)}\r\n      theme={(theme) => ({\r\n        ...theme,\r\n        borderRadius: 0,\r\n        colors: {\r\n        ...theme.colors,\r\n          text: 'red',\r\n          neutral0: 'white',\r\n          primary25: '#B2D4FF',\r\n          primary: '#2684FF',\r\n          neutral90: 'green'\r\n        },\r\n      })}\r\n    />\r\n  )\r\n}\r\n\r\nexport default AddRegion\r\n","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\AddCountry.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\entities\\NewsItem.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\Switches.jsx",["244","245"],"import React from 'react';\r\nimport \"../ChartMenu.css\"\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { purple,white } from '@material-ui/core/colors';\r\n\r\nconst switchstyle = {zIndex: 999, \"margin-left\":\"5px\"}\r\nconst Switches = (props) => {\r\n\r\n    const handleChange = (event) => {\r\n        props.setRelativeState(event.target.checked);\r\n       };\r\n\r\n    \r\n    const handleChangeVAC = (event) => {\r\n        props.setShowVac(event.target.checked);\r\n        /*\r\n        if(event.target.checked){\r\n            //document.querySelector(\"body\").scrollTo({top:document.body.scrollHeight, left:0, behavior: \"smooth\"})\r\n            wind.scrollBy({top: 600, left: 0, behavior: \"smooth\"})\r\n        }\r\n        */\r\n    };\r\n    const handleChangeCumVac = (event) => {\r\n        props.setVacCumulative(event.target.checked);\r\n    };\r\n    const PurpleSwitch = withStyles({\r\n    switchBase: {\r\n        color: \"#ffffff\",\r\n        '&$checked': {\r\n        color: \"#ffffff\",\r\n        },\r\n        '&$checked + $track': {\r\n        backgroundColor: \"#b8b8b8\",\r\n        },\r\n    },\r\n    checked: {},\r\n    track: {\r\n        backgroundColor: \"#7d7d7d\"\r\n    }\r\n    })(Switch);\r\n    \r\n    return (\r\n        <>\r\n        {props.activeLanguage === \"English\" ? (\r\n            <>\r\n            <FormControlLabel\r\n              control={\r\n                <PurpleSwitch\r\n                  style={switchstyle}\r\n                  checked={props.relativeState}\r\n                  onChange={handleChange}\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label = \"relative (%)\"\r\n            />\r\n            <FormControlLabel\r\n              control={\r\n                <PurpleSwitch\r\n                  style={switchstyle}\r\n                  checked={props.showVac}\r\n                  onChange={handleChangeVAC}\r\n                  color=\"green\"\r\n                />\r\n              }\r\n              label = \"German Vaccination\"\r\n            />\r\n            {props.showVac ? (\r\n                <>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <PurpleSwitch\r\n                            style={switchstyle}\r\n                            checked={props.vacCumulative}\r\n                            onChange={handleChangeCumVac}\r\n                            color=\"green\"\r\n                            />\r\n                        }\r\n                        label = \"cumulative Vaccination\"\r\n                    />\r\n                </>\r\n            ):(<></>)}\r\n            </>\r\n        ) : (\r\n            <>\r\n                <FormControlLabel\r\n                control={\r\n                    <PurpleSwitch\r\n                    style={switchstyle}\r\n                    checked={props.relativeState}\r\n                    onChange={handleChange}\r\n                    color=\"primary\"\r\n                    />\r\n                }\r\n                label = \"relativ (%)\"\r\n                />\r\n                <FormControlLabel\r\n                control={\r\n                    <PurpleSwitch\r\n                    style={switchstyle}\r\n                    checked={props.showVac}\r\n                    onChange={handleChangeVAC}\r\n                    color=\"green\"\r\n                    />\r\n                }\r\n                label = \"Deutsche Impfungen\"\r\n                />\r\n                {props.showVac ? (\r\n                    <>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <PurpleSwitch\r\n                                style={switchstyle}\r\n                                checked={props.vacCumulative}\r\n                                onChange={handleChangeCumVac}\r\n                                color=\"green\"\r\n                                />\r\n                            }\r\n                            label = \"Kumulierte Impfungen\"\r\n                        />\r\n                    </>\r\n                ):(<></>)}\r\n            </>\r\n        )}\r\n    </>)\r\n}\r\nexport default Switches;","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Timerow.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\Playbutton.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapScrollbar.jsx",["246","247","248"],{"ruleId":"249","replacedBy":"250"},{"ruleId":"251","replacedBy":"252"},{"ruleId":"253","severity":1,"message":"254","line":18,"column":8,"nodeType":"255","messageId":"256","endLine":18,"endColumn":19},{"ruleId":"253","severity":1,"message":"257","line":70,"column":22,"nodeType":"255","messageId":"256","endLine":70,"endColumn":33},{"ruleId":"258","severity":1,"message":"259","line":30,"column":29,"nodeType":"260","messageId":"261","endLine":30,"endColumn":31},{"ruleId":"258","severity":1,"message":"259","line":30,"column":78,"nodeType":"260","messageId":"261","endLine":30,"endColumn":80},{"ruleId":"258","severity":1,"message":"259","line":30,"column":139,"nodeType":"260","messageId":"261","endLine":30,"endColumn":141},{"ruleId":"253","severity":1,"message":"262","line":18,"column":9,"nodeType":"255","messageId":"256","endLine":18,"endColumn":14},{"ruleId":"258","severity":1,"message":"259","line":37,"column":29,"nodeType":"260","messageId":"261","endLine":37,"endColumn":31},{"ruleId":"258","severity":1,"message":"259","line":37,"column":78,"nodeType":"260","messageId":"261","endLine":37,"endColumn":80},{"ruleId":"253","severity":1,"message":"263","line":3,"column":27,"nodeType":"255","messageId":"256","endLine":3,"endColumn":36},{"ruleId":"264","severity":1,"message":"265","line":42,"column":15,"nodeType":"266","endLine":48,"endColumn":90},{"ruleId":"264","severity":1,"message":"267","line":52,"column":15,"nodeType":"266","endLine":62,"endColumn":21},{"ruleId":"253","severity":1,"message":"268","line":3,"column":17,"nodeType":"255","messageId":"256","endLine":3,"endColumn":24},{"ruleId":"253","severity":1,"message":"269","line":126,"column":14,"nodeType":"255","messageId":"256","endLine":126,"endColumn":22},{"ruleId":"270","severity":1,"message":"271","line":222,"column":7,"nodeType":"272","endLine":222,"endColumn":33,"suggestions":"273"},{"ruleId":"274","severity":1,"message":"275","line":233,"column":17,"nodeType":"255","messageId":"276","endLine":233,"endColumn":26},{"ruleId":"270","severity":1,"message":"277","line":233,"column":29,"nodeType":"278","endLine":233,"endColumn":47},{"ruleId":"274","severity":1,"message":"279","line":234,"column":17,"nodeType":"255","messageId":"276","endLine":234,"endColumn":24},{"ruleId":"270","severity":1,"message":"280","line":234,"column":27,"nodeType":"278","endLine":234,"endColumn":45},{"ruleId":"281","severity":1,"message":"282","line":261,"column":22,"nodeType":"255","messageId":"283","endLine":261,"endColumn":26},{"ruleId":"281","severity":1,"message":"284","line":261,"column":27,"nodeType":"255","messageId":"283","endLine":261,"endColumn":33},{"ruleId":"281","severity":1,"message":"285","line":262,"column":21,"nodeType":"255","messageId":"283","endLine":262,"endColumn":26},{"ruleId":"264","severity":1,"message":"286","line":294,"column":25,"nodeType":"266","endLine":304,"endColumn":31},{"ruleId":"253","severity":1,"message":"287","line":8,"column":10,"nodeType":"255","messageId":"256","endLine":8,"endColumn":16},{"ruleId":"253","severity":1,"message":"288","line":8,"column":17,"nodeType":"255","messageId":"256","endLine":8,"endColumn":22},{"ruleId":"253","severity":1,"message":"289","line":1,"column":18,"nodeType":"255","messageId":"256","endLine":1,"endColumn":26},{"ruleId":"253","severity":1,"message":"268","line":3,"column":17,"nodeType":"255","messageId":"256","endLine":3,"endColumn":24},{"ruleId":"253","severity":1,"message":"290","line":186,"column":13,"nodeType":"255","messageId":"256","endLine":186,"endColumn":22},{"ruleId":"253","severity":1,"message":"291","line":301,"column":13,"nodeType":"255","messageId":"256","endLine":301,"endColumn":23},{"ruleId":"270","severity":1,"message":"292","line":327,"column":7,"nodeType":"272","endLine":327,"endColumn":28,"suggestions":"293"},{"ruleId":"270","severity":1,"message":"294","line":380,"column":7,"nodeType":"272","endLine":380,"endColumn":46,"suggestions":"295"},{"ruleId":"270","severity":1,"message":"296","line":410,"column":7,"nodeType":"272","endLine":410,"endColumn":92,"suggestions":"297"},{"ruleId":"253","severity":1,"message":"289","line":1,"column":18,"nodeType":"255","messageId":"256","endLine":1,"endColumn":26},{"ruleId":"253","severity":1,"message":"268","line":3,"column":17,"nodeType":"255","messageId":"256","endLine":3,"endColumn":24},{"ruleId":"253","severity":1,"message":"298","line":4,"column":8,"nodeType":"255","messageId":"256","endLine":4,"endColumn":22},{"ruleId":"253","severity":1,"message":"299","line":97,"column":7,"nodeType":"255","messageId":"256","endLine":97,"endColumn":14},{"ruleId":"253","severity":1,"message":"269","line":127,"column":14,"nodeType":"255","messageId":"256","endLine":127,"endColumn":22},{"ruleId":"281","severity":1,"message":"282","line":258,"column":22,"nodeType":"255","messageId":"283","endLine":258,"endColumn":26},{"ruleId":"281","severity":1,"message":"284","line":258,"column":27,"nodeType":"255","messageId":"283","endLine":258,"endColumn":33},{"ruleId":"281","severity":1,"message":"285","line":259,"column":21,"nodeType":"255","messageId":"283","endLine":259,"endColumn":26},{"ruleId":"270","severity":1,"message":"300","line":277,"column":7,"nodeType":"272","endLine":277,"endColumn":93,"suggestions":"301"},{"ruleId":"253","severity":1,"message":"289","line":1,"column":18,"nodeType":"255","messageId":"256","endLine":1,"endColumn":26},{"ruleId":"253","severity":1,"message":"268","line":3,"column":17,"nodeType":"255","messageId":"256","endLine":3,"endColumn":24},{"ruleId":"253","severity":1,"message":"302","line":112,"column":5,"nodeType":"255","messageId":"256","endLine":112,"endColumn":16},{"ruleId":"281","severity":1,"message":"303","line":171,"column":22,"nodeType":"255","messageId":"283","endLine":171,"endColumn":26},{"ruleId":"253","severity":1,"message":"290","line":201,"column":13,"nodeType":"255","messageId":"256","endLine":201,"endColumn":22},{"ruleId":"281","severity":1,"message":"303","line":210,"column":22,"nodeType":"255","messageId":"283","endLine":210,"endColumn":26},{"ruleId":"253","severity":1,"message":"291","line":341,"column":13,"nodeType":"255","messageId":"256","endLine":341,"endColumn":23},{"ruleId":"281","severity":1,"message":"304","line":364,"column":25,"nodeType":"255","messageId":"283","endLine":364,"endColumn":39},{"ruleId":"281","severity":1,"message":"305","line":365,"column":25,"nodeType":"255","messageId":"283","endLine":365,"endColumn":38},{"ruleId":"270","severity":1,"message":"292","line":385,"column":7,"nodeType":"272","endLine":385,"endColumn":27,"suggestions":"306"},{"ruleId":"281","severity":1,"message":"307","line":427,"column":25,"nodeType":"255","messageId":"283","endLine":427,"endColumn":28},{"ruleId":"270","severity":1,"message":"308","line":446,"column":7,"nodeType":"272","endLine":446,"endColumn":56,"suggestions":"309"},{"ruleId":"281","severity":1,"message":"307","line":468,"column":25,"nodeType":"255","messageId":"283","endLine":468,"endColumn":28},{"ruleId":"270","severity":1,"message":"310","line":481,"column":7,"nodeType":"272","endLine":481,"endColumn":92,"suggestions":"311"},{"ruleId":"281","severity":1,"message":"312","line":504,"column":25,"nodeType":"255","messageId":"283","endLine":504,"endColumn":28},{"ruleId":"281","severity":1,"message":"313","line":508,"column":30,"nodeType":"255","messageId":"283","endLine":508,"endColumn":35},{"ruleId":"270","severity":1,"message":"292","line":516,"column":7,"nodeType":"272","endLine":516,"endColumn":33,"suggestions":"314"},{"ruleId":"253","severity":1,"message":"315","line":7,"column":8,"nodeType":"255","messageId":"256","endLine":7,"endColumn":24},{"ruleId":"253","severity":1,"message":"316","line":35,"column":24,"nodeType":"255","messageId":"256","endLine":35,"endColumn":35},{"ruleId":"317","severity":1,"message":"318","line":41,"column":9,"nodeType":"319","messageId":"320","endLine":41,"endColumn":15},{"ruleId":"253","severity":1,"message":"287","line":6,"column":10,"nodeType":"255","messageId":"256","endLine":6,"endColumn":16},{"ruleId":"253","severity":1,"message":"288","line":6,"column":17,"nodeType":"255","messageId":"256","endLine":6,"endColumn":22},{"ruleId":"253","severity":1,"message":"321","line":2,"column":8,"nodeType":"255","messageId":"256","endLine":2,"endColumn":14},{"ruleId":"322","severity":2,"message":"323","line":7,"column":24,"nodeType":"255","messageId":"324","endLine":7,"endColumn":30},{"ruleId":"322","severity":2,"message":"323","line":7,"column":40,"nodeType":"255","messageId":"324","endLine":7,"endColumn":46},"no-native-reassign",["325"],"no-negated-in-lhs",["326"],"no-unused-vars","'Charts_Vacc' is defined but never used.","Identifier","unusedVar","'setAlldates' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'popup' is defined but never used.","'useEffect' is defined but never used.","react/jsx-pascal-case","Imported JSX component Charts_Region must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component Charts_Vacc must be in PascalCase or SCREAMING_SNAKE_CASE","'plugins' is defined but never used.","'roundTo4' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.lastUpdate'. Either include it or remove the dependency array.","ArrayExpression",["327"],"no-const-assign","'startDate' is constant.","const","Assignments to the 'startDate' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","'endDate' is constant.","Assignments to the 'endDate' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","no-redeclare","'data' is already defined.","redeclared","'labels' is already defined.","'color' is already defined.","Imported JSX component ChartMenu_Vacc must be in PascalCase or SCREAMING_SNAKE_CASE","'purple' is defined but never used.","'white' is defined but never used.","'useState' is defined but never used.","'sum_array' is assigned a value but never used.","'init_Chart' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["328"],"React Hook useEffect has missing dependencies: 'props.WorldData', 'props.activeLegend', 'props.endDate', 'props.lastUpdate', 'props.relativeState', 'props.startDate', and 'props.step'. Either include them or remove the dependency array.",["329"],"React Hook useEffect has missing dependencies: 'completeData', 'props.WorldData', and 'props.lastUpdate'. Either include them or remove the dependency array.",["330"],"'ChartMenu_Vacc' is defined but never used.","'styles2' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["331"],"'init_States' is assigned a value but never used.","'date' is already defined.","'Active_country' is already defined.","'Active_region' is already defined.",["332"],"'Ger' is already defined.","React Hook useEffect has missing dependencies: 'props.activeLegend', 'props.endDate', 'props.lastUpdate', 'props.relativeState', 'props.startDate', and 'props.step'. Either include them or remove the dependency array.",["333"],"React Hook useEffect has missing dependencies: 'props.completeRegionData' and 'props.lastUpdate'. Either include them or remove the dependency array.",["334"],"'obj' is already defined.","'Kreis' is already defined.",["335"],"'FormControlLabel' is defined but never used.","'check_count' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'Slider' is defined but never used.","no-undef","'$props' is not defined.","undef","no-global-assign","no-unsafe-negation",{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},"Update the dependencies array to be: [props.completeRegionData, props.lastUpdate]",{"range":"354","text":"355"},"Update the dependencies array to be: [props, props.activeCountry]",{"range":"356","text":"357"},"Update the dependencies array to be: [props.selectedCountries, completeData, props.activeLegend, props.startDate, props.endDate, props.step, props.lastUpdate, props.relativeState, props.WorldData]",{"range":"358","text":"359"},"Update the dependencies array to be: [props.startDate, props.endDate, props.step, props.activeLegend, props.relativeState, props.lastUpdate, props.WorldData, completeData]",{"range":"360","text":"361"},"Update the dependencies array to be: [props.startDate, props.endDate, props.step, props.relativeState, props.vacCumulative, props]",{"range":"362","text":"363"},"Update the dependencies array to be: [props, props.activeRegion]",{"range":"364","text":"365"},"Update the dependencies array to be: [props.selectedRegions, props.completeRegionData, props.activeLegend, props.startDate, props.endDate, props.step, props.lastUpdate, props.relativeState]",{"range":"366","text":"367"},"Update the dependencies array to be: [props.startDate, props.endDate, props.step, props.activeLegend, props.relativeState, props.completeRegionData, props.lastUpdate]",{"range":"368","text":"369"},"Update the dependencies array to be: [props, props.completeRegionData]",{"range":"370","text":"371"},[7609,7635],"[props.completeRegionData, props.lastUpdate]",[11513,11534],"[props, props.activeCountry]",[13669,13708],"[props.selectedCountries, completeData, props.activeLegend, props.startDate, props.endDate, props.step, props.lastUpdate, props.relativeState, props.WorldData]",[15233,15318],"[props.startDate, props.endDate, props.step, props.activeLegend, props.relativeState, props.lastUpdate, props.WorldData, completeData]",[9930,10016],"[props.startDate, props.endDate, props.step, props.relativeState, props.vacCumulative, props]",[13894,13914],"[props, props.activeRegion]",[16675,16724],"[props.selectedRegions, props.completeRegionData, props.activeLegend, props.startDate, props.endDate, props.step, props.lastUpdate, props.relativeState]",[18324,18409],"[props.startDate, props.endDate, props.step, props.activeLegend, props.relativeState, props.completeRegionData, props.lastUpdate]",[19800,19826],"[props, props.completeRegionData]"]