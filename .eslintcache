[{"C:\\Users\\fammi\\corona-dashboard\\src\\index.js":"1","C:\\Users\\fammi\\corona-dashboard\\src\\App.js":"2","C:\\Users\\fammi\\corona-dashboard\\src\\reportWebVitals.js":"3","C:\\Users\\fammi\\corona-dashboard\\src\\components\\CovidMap.jsx":"4","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Legend.jsx":"5","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadCountriesTask.js":"6","C:\\Users\\fammi\\corona-dashboard\\src\\components\\TopRow.jsx":"7","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Newsticker.jsx":"8","C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapSelectionButtons.jsx":"9","C:\\Users\\fammi\\corona-dashboard\\src\\components\\NewstickerLanguage.jsx":"10","C:\\Users\\fammi\\corona-dashboard\\src\\components\\UpdatePanel.jsx":"11","C:\\Users\\fammi\\corona-dashboard\\src\\components\\InfoPanel.jsx":"12","C:\\Users\\fammi\\corona-dashboard\\src\\components\\LoadingMap.jsx":"13","C:\\Users\\fammi\\corona-dashboard\\src\\entities\\LegendItem.js":"14","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\BuildLegendsTask.js":"15","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\BuildLegend.js":"16","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\formatNumberWithSpaces.js":"17","C:\\Users\\fammi\\corona-dashboard\\src\\components\\DropdownMenuButton.jsx":"18","C:\\Users\\fammi\\corona-dashboard\\src\\entities\\DropdownMenu.jsx":"19","C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapFocusButton.jsx":"20","C:\\Users\\fammi\\corona-dashboard\\src\\entities\\NewsItem.js":"21","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadNewsTask.js":"22","C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadEuropeTask.js":"23","C:\\Users\\fammi\\corona-dashboard\\src\\components\\EuropeCovidMap.jsx":"24","C:\\Users\\fammi\\corona-dashboard\\src\\entities\\FocusMenu.jsx":"25","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Tooltipbox.jsx":"26","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Charts.jsx":"27","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu.jsx":"28","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\TimeRange.jsx":"29","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\AddCountry.jsx":"30","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\Stepsize.jsx":"31"},{"size":1151,"mtime":1615412320287,"results":"32","hashOfConfig":"33"},{"size":6168,"mtime":1615812383824,"results":"34","hashOfConfig":"33"},{"size":362,"mtime":499162500000,"results":"35","hashOfConfig":"33"},{"size":8238,"mtime":1615541436749,"results":"36","hashOfConfig":"33"},{"size":831,"mtime":1615807464516,"results":"37","hashOfConfig":"33"},{"size":6305,"mtime":1615412868936,"results":"38","hashOfConfig":"33"},{"size":871,"mtime":1615552348113,"results":"39","hashOfConfig":"33"},{"size":2013,"mtime":1615807814416,"results":"40","hashOfConfig":"33"},{"size":1868,"mtime":1615812427965,"results":"41","hashOfConfig":"33"},{"size":1321,"mtime":1615812313237,"results":"42","hashOfConfig":"33"},{"size":601,"mtime":1615370851621,"results":"43","hashOfConfig":"33"},{"size":900,"mtime":1615812247103,"results":"44","hashOfConfig":"33"},{"size":474,"mtime":1615811142879,"results":"45","hashOfConfig":"33"},{"size":285,"mtime":1610811026978,"results":"46","hashOfConfig":"33"},{"size":356,"mtime":1610812517753,"results":"47","hashOfConfig":"33"},{"size":4378,"mtime":1610877860874,"results":"48","hashOfConfig":"33"},{"size":156,"mtime":1610877821821,"results":"49","hashOfConfig":"33"},{"size":841,"mtime":1615553748787,"results":"50","hashOfConfig":"33"},{"size":1120,"mtime":1615371076827,"results":"51","hashOfConfig":"33"},{"size":1667,"mtime":1615553733608,"results":"52","hashOfConfig":"33"},{"size":204,"mtime":1612185269090,"results":"53","hashOfConfig":"33"},{"size":1684,"mtime":1615807822772,"results":"54","hashOfConfig":"33"},{"size":12892,"mtime":1615209962304,"results":"55","hashOfConfig":"33"},{"size":7588,"mtime":1615373123223,"results":"56","hashOfConfig":"33"},{"size":1283,"mtime":1615370644932,"results":"57","hashOfConfig":"33"},{"size":3730,"mtime":1615369915428,"results":"58","hashOfConfig":"33"},{"size":16743,"mtime":1615541198558,"results":"59","hashOfConfig":"33"},{"size":992,"mtime":1615411643438,"results":"60","hashOfConfig":"33"},{"size":1025,"mtime":1615541139708,"results":"61","hashOfConfig":"33"},{"size":2100,"mtime":1615411643441,"results":"62","hashOfConfig":"33"},{"size":684,"mtime":1615412680204,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1vulx40",{"filePath":"67","messages":"68","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"66"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"C:\\Users\\fammi\\corona-dashboard\\src\\index.js",[],["130","131"],"C:\\Users\\fammi\\corona-dashboard\\src\\App.js",["132","133","134","135","136","137","138","139","140","141","142","143","144"],"C:\\Users\\fammi\\corona-dashboard\\src\\reportWebVitals.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\CovidMap.jsx",["145"],"import React from 'react';\r\nimport {MapContainer, GeoJSON, TileLayer} from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"./CovidMap.css\";\r\nimport formatNumberWithSpaces from \"../tasks/formatNumberWithSpaces\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\n\r\n//Cumulative: CCases, Population, CCases/Population-Ratio\r\n//New Cases(21 Days): ACases, Population, ACases/Population-Ratio\r\n//7-Day-Incendence: Incidence-Rate, 7-day-cases, 14-day-cases?\r\n//ICU-Occupancy: Percentage, ICU-Beds, ICU-Occupancy\r\n//CFatalities: CFatalities, Recovered, CFatalities/Recovered-Ratio\r\n//Testing Rate: Tests/week, Population, Tests/week/population-Ratio\r\n//Vaccinated Pop: Vaccinated, Population, Vaccinated/Population-Ratio\r\n\r\nconst CovidMap = (props) => {\r\n    const mapStyle = {\r\n        fillColor: \"white\",\r\n        weight: 1,\r\n        color: \"black\",\r\n        fillOpacity: 0.8,\r\n    };\r\n\r\n    function colorCountry (key) {\r\n        var legendIndex = props.legends[0].findIndex((legendName)=>{return legendName === props.active;}) + 1;\r\n        const legend = props.legends[legendIndex];\r\n        for(let i=0; i<legend.length; i++){\r\n            if(key >= legend[i].from &&\r\n                key < legend[i].to\r\n                ){\r\n                    return legend[i].color;\r\n                }\r\n        }\r\n    }\r\n    //[key, item1string, item2string, item3string]\r\n    function getRelevantData(country, active){\r\n        var relevantData;\r\n        switch(active){\r\n            case \"Vaccinated Population\":\r\n                relevantData = {\"English\": [0], \"Deutsch\": [0]};\r\n                relevantData[\"English\"].push(\"\");\r\n                relevantData[\"English\"].push(\"\");\r\n                relevantData[\"English\"].push(\"\");\r\n                relevantData[\"Deutsch\"].push(\"\");\r\n                relevantData[\"Deutsch\"].push(\"\");\r\n                relevantData[\"Deutsch\"].push(\"\");\r\n                return relevantData;\r\n            case \"Testing Rate\":\r\n                relevantData = {\"English\": [0], \"Deutsch\": [0]};\r\n                relevantData[\"English\"].push(\"\");\r\n                relevantData[\"English\"].push(\"\");\r\n                relevantData[\"English\"].push(\"\");\r\n                relevantData[\"Deutsch\"].push(\"\");\r\n                relevantData[\"Deutsch\"].push(\"\");\r\n                relevantData[\"Deutsch\"].push(\"\");\r\n                return relevantData;\r\n            case \"Cumulative Fatalities\":\r\n                 relevantData = {\"English\": [country.properties.fatalities], \"Deutsch\": [country.properties.fatalities]};\r\n                relevantData[\"English\"].push(\"Fatalities: \" + formatNumberWithSpaces(country.properties.fatalities));\r\n                relevantData[\"English\"].push(\"Recovered: \" + formatNumberWithSpaces(country.properties.recovered));\r\n                relevantData[\"English\"].push(\"Mortality Rate: \" + (country.properties.mortalityRate * 100).toFixed(3).toString() + \"%\");\r\n                relevantData[\"Deutsch\"].push(\"Todesfälle: \" + formatNumberWithSpaces(country.properties.fatalities));\r\n                relevantData[\"Deutsch\"].push(\"Genesen: \" + formatNumberWithSpaces(country.properties.recovered));\r\n                relevantData[\"Deutsch\"].push(\"Sterblichkeitsrate: \" + (country.properties.mortalityRate * 100).toFixed(3).toString() + \"%\");\r\n                return relevantData;\r\n            case \"ICU-Occupancy\":\r\n                relevantData = {\"English\": [0], \"Deutsch\": [0]};\r\n                relevantData[\"English\"].push(\"\");\r\n                relevantData[\"English\"].push(\"\");\r\n                relevantData[\"English\"].push(\"\");\r\n                relevantData[\"Deutsch\"].push(\"\");\r\n                relevantData[\"Deutsch\"].push(\"\");\r\n                relevantData[\"Deutsch\"].push(\"\");\r\n                return relevantData;\r\n            case \"7-Day-Incidence\":\r\n                relevantData = {\"English\": [country.properties.incidentRate], \"Deutsch\": [country.properties.incidentRate]};\r\n                relevantData[\"English\"].push(\"7-Day-Incidence: \" + country.properties.incidentRate.toFixed(3));\r\n                relevantData[\"English\"].push(\"Population: \" + formatNumberWithSpaces(country.properties.population));\r\n                relevantData[\"English\"].push(\"\");\r\n                relevantData[\"Deutsch\"].push(\"7-Tages-Inzidenz: \" + country.properties.incidentRate.toFixed(3));\r\n                relevantData[\"Deutsch\"].push(\"Einwohner: \" + formatNumberWithSpaces(country.properties.population));\r\n                relevantData[\"Deutsch\"].push(\"\");\r\n                return relevantData;\r\n            case \"New Cases(21 Days)\":\r\n                relevantData = {\"English\": [country.properties.active], \"Deutsch\": [country.properties.active]};\r\n                relevantData[\"English\"].push(\"New Cases(21 Days): \" + formatNumberWithSpaces(country.properties.active));\r\n                relevantData[\"English\"].push(\"Population: \" + formatNumberWithSpaces(country.properties.population));\r\n                relevantData[\"English\"].push(\"Ratio: \" + (country.properties.active/country.properties.population * 100).toFixed(5) + \"%\");\r\n                relevantData[\"Deutsch\"].push(\"Neue Fälle (21 Tage): \" + formatNumberWithSpaces(country.properties.active));\r\n                relevantData[\"Deutsch\"].push(\"Einwohner: \" + formatNumberWithSpaces(country.properties.population));\r\n                relevantData[\"Deutsch\"].push(\"Verhältnis: \" + (country.properties.active/country.properties.population * 100).toFixed(5) + \"%\");\r\n                return relevantData;\r\n            case \"Cumulative Cases\":\r\n                relevantData = {\"English\": [country.properties.confirmed], \"Deutsch\": [country.properties.confirmed]};\r\n                relevantData[\"English\"].push(\"Total Cases: \" + formatNumberWithSpaces(country.properties.confirmed));\r\n                relevantData[\"English\"].push(\"Population: \" + formatNumberWithSpaces(country.properties.population));\r\n                relevantData[\"English\"].push(\"Ratio: \" + (country.properties.confirmed/country.properties.population * 100).toFixed(3) + \"%\");\r\n                relevantData[\"Deutsch\"].push(\"Fälle Gesamt: \" + formatNumberWithSpaces(country.properties.confirmed));\r\n                relevantData[\"Deutsch\"].push(\"Einwohner: \" + formatNumberWithSpaces(country.properties.population));\r\n                relevantData[\"Deutsch\"].push(\"Verhältnis: \" + (country.properties.confirmed/country.properties.population * 100).toFixed(3) + \"%\");\r\n                return relevantData;\r\n            default:\r\n                return [0,\"\",\"\",\"\"];\r\n        }\r\n    }\r\n\r\n    const onEachCountry = (country, layer) => {\r\n        const relevantData = getRelevantData(country,props.active);\r\n        layer.options.fillColor = colorCountry(relevantData[props.activeLanguage][0]);\r\n        const item1 = relevantData[props.activeLanguage][1];\r\n        const item2 = relevantData[props.activeLanguage][2];\r\n        const item3 = relevantData[props.activeLanguage][3];\r\n        layer.bindPopup(\r\n                `${country.properties.ADMIN}\r\n                <br/> ${item1}\r\n                <br/> ${item2} \r\n                <br/> ${item3}\r\n            `\r\n            );\r\n             /* ----------------------------------------------------------------------------------------------------\r\n             * Tassias Code : Setzt den ActiveCountry State auf die Country, die in der CovidMap selektiert wird\r\n             * ---------------------------------------------------------------------------------------------------- */\r\n            layer.on({\r\n                click: (e) => {\r\n                    let country_name = country.properties.ADMIN\r\n                    console.log(country_name)\r\n                    props.setActiveCountry(country_name)\r\n                }\r\n            })\r\n        };\r\n        function func (oEvent){\r\n            console.log(oEvent)\r\n        }\r\n\r\n    return <MapContainer zoom={2.5} center={[45, 10]}>\r\n        <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'\r\n        />\r\n        <GeoJSON key={uuidv4()} style={mapStyle} data={props.countries} onEachFeature={onEachCountry}/>\r\n    </MapContainer>;\r\n};\r\n \r\nexport default CovidMap;","C:\\Users\\fammi\\corona-dashboard\\src\\components\\Legend.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadCountriesTask.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\TopRow.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\Newsticker.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapSelectionButtons.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\NewstickerLanguage.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\UpdatePanel.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\InfoPanel.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\LoadingMap.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\entities\\LegendItem.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\BuildLegendsTask.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\BuildLegend.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\formatNumberWithSpaces.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\DropdownMenuButton.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\entities\\DropdownMenu.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\MapFocusButton.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\entities\\NewsItem.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadNewsTask.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\tasks\\LoadEuropeTask.js",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\EuropeCovidMap.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\entities\\FocusMenu.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\Tooltipbox.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\Charts.jsx",["146","147","148","149","150","151","152","153","154","155","156","157","158","159"],"import React,  { useState,useEffect } from 'react';\r\nimport \"./Charts.css\"\r\nimport Chart, { plugins } from 'chart.js'\r\nimport ChartMenu from \"./ChartMenu.jsx\"\r\nimport LoadingMap from \"./LoadingMap\";\r\n\r\n// colors for the charts\r\nvar chartColors = [\r\n\t{name:'red',    value: 'rgb(255, 99, 132)'},\r\n\t{name:'orange', value: 'rgb(255, 159, 64)'},\r\n\t{name:'yellow', value: 'rgb(255, 205, 86)'},\r\n\t{name:'green',  value: 'rgb(75, 192, 192)'},\r\n\t{name:'blue',   value: 'rgb(54, 162, 235)'},\r\n\t{name:'purple', value: 'rgb(153, 102, 255)'},\r\n\t{name:'grey',   value: 'rgb(231,233,237)'}\r\n];\r\n\r\n// chart.js options\r\nvar chart_color = Chart.helpers.color;\r\nvar config = {\r\n    type:\"bar\",\r\n    data: {\r\n        labels: [],\r\n        datasets: []\r\n    },\r\n    options: {\r\n        legend: {\r\n          position: 'top',\r\n          labels: {\r\n            fontColor: 'white'\r\n          }\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Chart',\r\n          fontColor: 'white',\r\n          fontSize: 18\r\n        },\r\n        scales: {\r\n            xAxes: [{\r\n                ticks: {\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines: {\r\n                    color: 'rgb(30, 30, 30)',\r\n                    display: true,\r\n                    drawBorder: true,\r\n                    drawOnChartArea: true,\r\n                    drawTicks: false,\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                ticks: {\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines: {\r\n                    color: 'rgb(30, 30, 30)',\r\n                    display: true,\r\n                    drawBorder: true,\r\n                    drawOnChartArea: true,\r\n                    drawTicks: false,\r\n                }\r\n            }]\r\n        }\r\n    },\r\n    plugins:[\r\n        {afterDraw:function(chart) {\r\n            var goin = false\r\n            if(chart.data.labels.length === 0)    {              //goin = true\r\n            //else if(chart.data.datasets[0].data.length === 0)   //goin = true\r\n            //if (goin) {\r\n                //if(chart.data.datasets[0].data.length === 0){\r\n                 // oder chart.data.datasets.length === 0\r\n                // No data is present\r\n                var ctx = chart.chart.ctx;\r\n                var width = chart.chart.width;\r\n                var height = chart.chart.height;\r\n                chart.clear();\r\n    \r\n                ctx.save();\r\n                ctx.textAlign = 'center';\r\n                ctx.textBaseline = 'middle';\r\n                ctx.font = \"2rem 'Helvetica Nueue'\";\r\n                ctx.fillStyle = \"white\";\r\n                ctx.fillText('No data to display for this category', width / 2, height / 2);\r\n                ctx.restore();\r\n                }\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\n// chart size\r\nconst styles = {\r\n    width: '85%'\r\n}\r\n// chart options size\r\nconst styles2 = {\r\n    width: '15%'\r\n}\r\n\r\n// States\r\nconst id = {id:\"ChartID_1\"}\r\nvar init_Chart = true\r\nvar init_States= true\r\nvar chart;\r\nif(chart)   var showing = chart.data.datasets\r\nelse        var showing = 0\r\nvar number_of_colors = chartColors.length\r\n\r\n\r\nfunction getRelevantData(CountryData, activeLegend, startDate, endDate, step, lastUpdated){\r\n\r\n    // ignore countries with no data\r\n    if(CountryData == undefined) {\r\n        if(chart.data.labels){\r\n            return [[],chart.data.labels]\r\n        } else {\r\n            return [[],[]]\r\n        }\r\n    }\r\n    \r\n    const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\r\n    const diffDaysStart = Math.round(Math.abs((startDate - lastUpdated) / oneDay));\r\n    const NumberDays = Math.round(Math.abs((startDate - endDate) / oneDay));\r\n    var left_index = CountryData.length - 1 - diffDaysStart\r\n    var right_index = CountryData.length - diffDaysStart + NumberDays\r\n    var relevantData = CountryData.slice(left_index,right_index)\r\n\r\n    function data_sorting(case_name){\r\n        var labels = []\r\n        var data = []\r\n        var sum_array = []\r\n\r\n        const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n                            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n                            ];\r\n\r\n        const sum = (accumulator, currentValue) => accumulator + currentValue;\r\n\r\n        for (var i=0; i<relevantData.length; i++){\r\n            var elem = relevantData[i]\r\n            var date = new Date(elem.report_date)\r\n            if(step.label === \"Day\"){\r\n                data.push(elem[case_name])\r\n                labels.push(date.toLocaleDateString())\r\n            }\r\n            else if(step.label === \"Week\"){\r\n                sum_array.push(elem[case_name])\r\n                if(date.getDay() === 0 || i === relevantData.length-1){\r\n                    data.push(sum_array.reduce(sum)/sum_array.length)\r\n                    sum_array = []\r\n                    if (date.getDay() === 0) labels.push(date.toDateString())\r\n                    else                    labels.push(\"last Week\")\r\n                }\r\n            }\r\n            else {\r\n                sum_array.push(elem[case_name])\r\n                if(date.getDate() === 1 || i === relevantData.length-1){\r\n                    data.push(sum_array.reduce(sum)/sum_array.length)\r\n                    sum_array = []\r\n                    if (date.getDate() === 1)    labels.push(monthNames[date.getMonth()])\r\n                    else                         labels.push(\"last Month\")\r\n                }\r\n            }\r\n        }\r\n        return [data,labels]\r\n    }\r\n\r\n    switch(activeLegend){\r\n        \r\n        // !!! \r\n        case \"Vaccinated Population\":\r\n            return [[],[]];\r\n\r\n        // !!! \r\n            case \"Testing Rate\":\r\n            return [[],[]];\r\n\r\n        case \"Cumulative Fatalities\":\r\n            return data_sorting(\"deaths\")\r\n\r\n        // !!!     \r\n        case \"ICU-Occupancy\":\r\n            return [[],[]];\r\n\r\n        case \"7-Day-Incidence\":\r\n            return data_sorting(\"incident_rate\")\r\n\r\n        // !!! \r\n        case \"New Cases(21 Days)\":\r\n            return [[],[]];\r\n\r\n        case \"Cumulative Cases\":\r\n            return data_sorting(\"confirmed\")\r\n\r\n        default:\r\n            return [[],[]];\r\n    }\r\n}\r\n\r\nfunction chart_addDataset(chart,data,labels,activeCountry){\r\n\r\n    // get the right color. If a country in the middle has been deleted, there is a free color. \r\n    // and here I find this color\r\n    var sets = chart.data.datasets.length\r\n    if(sets === 0) {\r\n        var index = 0\r\n    }\r\n    else if (sets === 1){\r\n        index = chart.data.datasets[0].colorNumber + 1\r\n    } else {\r\n        var numbers = [...Array(number_of_colors).keys()];\r\n        for( var c of chart.data.datasets){\r\n            numbers.splice(numbers.findIndex(x=>x===c.colorNumber),1)\r\n        }\r\n        var index = numbers.shift()\r\n    }\r\n    \r\n    chart.data.datasets.push({\r\n        label: activeCountry,\r\n        data: data,\r\n        //color\r\n        backgroundColor: chart_color(chartColors[index].value).alpha(0.2).rgbString(),\r\n        borderColor: chartColors[index].value,\r\n        colorNumber:index,\r\n        pointBackgroundColor: chartColors[index].value,\r\n        borderWidth: 1\r\n    })\r\n    chart.data.labels = labels\r\n}\r\n\r\nfunction chart_deleteDataset(chart,country){\r\n    var datasets = chart.data.datasets\r\n    for(var i=0; i<datasets.length; i++){\r\n        if(datasets[i].label === country){\r\n            datasets.splice(i,1)\r\n        }\r\n    }   \r\n}\r\n\r\n/* --------------------------------------------------------------------------------\r\n| The Component\r\n|-----------------------------------------------------------------------------------\r\n*/\r\nconst Charts = (props) => {\r\n    var completeData = props.completeData\r\n    // States\r\n    // tracks the stepsize selected in the options panel\r\n    const [step, setStep] = useState({ value: 'd', label: 'Day' });\r\n    \r\n    /* --------------------------------------------------------------------------------\r\n    | Init Chart\r\n    |-----------------------------------------------------------------------------------\r\n    | useEffect wird standartmäßig aufgerufen, nachdem die UI gerendert ist. Dann kann das Chart mit \"new Chart\" erst initialisert werden, nach dem Rendern.\r\n    */\r\n    useEffect(()=>{\r\n        if(completeData){\r\n            var ctx = document.getElementById(id.id).getContext(\"2d\");\r\n            chart = new Chart(ctx, config);\r\n            init_Chart = false\r\n            showing = chart.data.datasets\r\n        }\r\n          \r\n    },[ props.completeData])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Handle Map Select\r\n    |-----------------------------------------------------------------------------------\r\n    */\r\n    useEffect(()=>{\r\n            // If the selection on the map wasn't already selected, add it to the selected coutries\r\n            var notselected = true\r\n            for(var selected of props.selectedCountries){\r\n                if(selected.label === props.activeCountry) {\r\n                    notselected = false\r\n                    break\r\n                }\r\n            }\r\n            if(notselected) {\r\n                // if more countries have been selected, than there are colors\r\n                if(showing.length >= number_of_colors)   return props.alert.show(\"Maximum number of countries reached\")\r\n                else                                     props.setSelectedCountries(x => [...x,{value:props.activeCountry,label:props.activeCountry}])\r\n            }\r\n    },[props.activeCountry])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Manage Datasets\r\n    |-----------------------------------------------------------------------------------\r\n    | compares the selected countries with already added to the chart countries\r\n    | adds and deletes datasets\r\n    */\r\n    useEffect(() => {\r\n        // Chart Data rendering\r\n        if(chart){\r\n            var activeCountry = props.activeCountry\r\n            var activeLegend = props.activeLegend\r\n            var CountryData = completeData[activeCountry]\r\n\r\n            // Update Chart Title\r\n            chart.options.title.text = activeLegend\r\n\r\n            // Compare addedCountries and selectedCountries\r\n            //get added Countries\r\n            var compare_added = []\r\n            for (var elem of chart.data.datasets){\r\n                compare_added.push(elem.label)\r\n            }\r\n\r\n            \r\n            var compare_selected = [...props.selectedCountries]\r\n            for(var i=0; i<compare_added.length; i++){\r\n                for(var j=0; j<compare_selected.length; j++){\r\n                    if(compare_added[i] === compare_selected[j].label){\r\n                        compare_added.splice(i,1)\r\n                        compare_selected.splice(j,1)\r\n                        i--;\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n\r\n            // add selected Countries\r\n            for(var country of compare_selected){\r\n                //if(country.label === \"Map\") continue\r\n                if(country.label === \"World\"){ \r\n                    var CountryData = props.WorldData\r\n                } else {\r\n                    var CountryData = completeData[country.label]\r\n                }\r\n                var [data,labels] = getRelevantData(CountryData,activeLegend, props.startDate, props.endDate, step, new Date(props.lastUpdate))\r\n                chart_addDataset(chart,data,labels,country.label)\r\n\r\n            }\r\n            // delete deselected Countries\r\n            for(var deselect_country of compare_added){\r\n                chart_deleteDataset(chart,deselect_country)\r\n            }\r\n            chart.update()\r\n        }\r\n    },[props.selectedCountries,  props.WorldData])\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Range Update\r\n    |-----------------------------------------------------------------------------------\r\n    | Triggered by changes to startDate, endDate, stepsize and the Legend\r\n    | deletes the current datasets and calls Manage Datasets by changeing addedCountries\r\n    */\r\n    useEffect(() => {\r\n        if(chart){\r\n            for(var chart_data of chart.data.datasets){\r\n                var country_name = chart_data.label\r\n                if(country_name === \"World\"){ \r\n                    if(props.activeLegend === \"7-Day-Incidence\") return props.alert(\"not implemented for World yet\") // 7-Day-Incidence is not correct implemented for WorldData\r\n                    var CountryData = props.WorldData\r\n                } else {\r\n                    var CountryData = completeData[country_name]\r\n                }\r\n                var [data,labels] = getRelevantData(CountryData,props.activeLegend, props.startDate, props.endDate, step, new Date(props.lastUpdate))\r\n                chart_data.data = data\r\n            }\r\n            chart.data.labels = labels\r\n            chart.update()\r\n        }\r\n    },[props.activeLegend, props.startDate, props.endDate, step])\r\n\r\n\r\n    /* --------------------------------------------------------------------------------\r\n    | Initialize States\r\n    |-----------------------------------------------------------------------------------\r\n    | Once the Complete Data is loaded (the if statement) , we do some calculation\r\n    | getting: a list of countries, the data calculated for the whole world\r\n    | and we update the date pickers with the date, the data was last updated\r\n    | While the data is not loaded, display the loading screen\r\n    */\r\n    if(completeData){\r\n        console.log(\"data, \", completeData)\r\n        \r\n        // init_States to avoid looping (only execute once)\r\n        if(props.lastUpdate && init_States){\r\n            init_States = false\r\n            // Update the Datepickers with the lastUpdate constraint\r\n            var now = new Date(props.lastUpdate)\r\n            var lastWeek = new Date(props.lastUpdate)\r\n            lastWeek.setDate(now.getDate() - 7)\r\n            props.setStartDate(lastWeek)\r\n            props.setEndDate(now)\r\n\r\n            // make a list of countries for the addCountry select\r\n            // you can fix a country, which can then not be deselected by adding the property \"isFixed: true\" eg: { value: 'Map', label: 'Map', isFixed: true}\r\n            var country_list = []\r\n            country_list.push({ value: 'World', label: 'World'})\r\n            for(var name in completeData){\r\n                country_list.push({ value: name, label: name })\r\n            }\r\n            props.setcountryList(country_list)\r\n\r\n            // World Data\r\n            var WorldData = []\r\n            var array_length = completeData[country_list[1].label].length\r\n            for(var i=0; i<array_length; i++){\r\n                var obj = {\r\n                    \"deaths\":   0,\r\n                    \"confirmed\":0\r\n                }\r\n                for(var country in completeData){\r\n                    if(completeData[country].length <= i) continue\r\n                    obj.deaths = obj.deaths + completeData[country][i].deaths\r\n                    obj.confirmed = obj.confirmed + completeData[country][i].confirmed\r\n                    obj.report_date = completeData[country][i].report_date\r\n                }\r\n                WorldData.push(obj)\r\n            }\r\n            props.setWorldData(WorldData)\r\n        }\r\n\r\n        \r\n\r\n        return (\r\n            <div className=\"chartContainer\">\r\n                <div style={styles}>\r\n                    <canvas style={{width:'100%',height:'500px'}} id={id.id}/>\r\n                </div>\r\n                <div style={styles2}>\r\n                    <ChartMenu \r\n                        setStep={setStep} \r\n                        startDate={props.startDate} \r\n                        endDate={props.endDate} \r\n                        setEndDate={props.setEndDate} \r\n                        setStartDate={props.setStartDate} \r\n                        lastUpdate={props.lastUpdate}\r\n                        country_list={props.countryList}\r\n                        selectedCountries={props.selectedCountries}\r\n                        setSelectedCountries={props.setSelectedCountries}\r\n                        showing={showing} number_of_colors={number_of_colors}\r\n                        alert={props.alert}\r\n                        />\r\n                </div>    \r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className=\"chartContainer\">\r\n                <LoadingMap />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//<canvas style={{width:'95%',height:'500px'}} id={id.id}/>\r\n\r\nexport default Charts;\r\n","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\TimeRange.jsx",[],"C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\AddCountry.jsx",["160"],"import React from \"react\";\r\nimport Select from 'react-select'\r\nimport \"./AddCountry.css\"\r\nimport makeAnimated from 'react-select/animated';\r\n\r\nconst animatedComponents = makeAnimated();\r\n\r\nconst styles = {\r\n  multiValue: (base, state) => {\r\n    return state.data.isFixed ? { ...base, backgroundColor: 'gray' } : base;\r\n  },\r\n  multiValueLabel: (base, state) => {\r\n    return state.data.isFixed\r\n      ? { ...base, fontWeight: 'bold', color: 'white', paddingRight: 6 }\r\n      : base;\r\n  },\r\n  multiValueRemove: (base, state) => {\r\n    return state.data.isFixed ? { ...base, display: 'none' } : base;\r\n  },\r\n};\r\n\r\nconst orderOptions = values => {\r\n  return (\r\n    values &&\r\n    values.filter(v => v.isFixed).concat(values.filter(v => !v.isFixed))\r\n  );\r\n};\r\n\r\n\r\nconst AddCountry = (props) => {\r\n\r\n  const onChange = (value, { action, removedValue }) => {\r\n    var check_count = true\r\n    switch (action) {\r\n      case \"remove-value\":\r\n        check_count = !check_count\r\n      case \"pop-value\":\r\n        if (removedValue.isFixed) {\r\n          return;\r\n        }\r\n        break;\r\n      case \"clear\":\r\n        value = props.country_list.filter(v => v.isFixed);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    value = orderOptions(value);\r\n    if(props.showing.length >= props.number_of_colors && check_count) return props.alert.show(\"Maximum number of countries reached\")\r\n    props.setSelectedCountries(value);\r\n  };\r\n\r\n  return (\r\n    <Select \r\n      options={props.country_list} \r\n      components={animatedComponents}\r\n      className=\"AddCountry\"\r\n      isMulti={true} \r\n      onChange={onChange}\r\n      styles={styles}\r\n      value={props.selectedCountries}\r\n      isClearable={props.selectedCountries && props.selectedCountries.some(v => !v.isFixed)}\r\n      theme={(theme) => ({\r\n        ...theme,\r\n        borderRadius: 0,\r\n        colors: {\r\n        ...theme.colors,\r\n          text: 'red',\r\n          neutral0: 'white',\r\n          primary25: '#B2D4FF',\r\n          primary: '#2684FF',\r\n          neutral90: 'green'\r\n        },\r\n      })}\r\n    />\r\n  )\r\n}\r\n\r\nexport default AddCountry","C:\\Users\\fammi\\corona-dashboard\\src\\components\\ChartMenu\\Stepsize.jsx",[],{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"166","line":12,"column":8,"nodeType":"167","messageId":"168","endLine":12,"endColumn":14},{"ruleId":"165","severity":1,"message":"169","line":58,"column":12,"nodeType":"167","messageId":"168","endLine":58,"endColumn":25},{"ruleId":"165","severity":1,"message":"170","line":60,"column":12,"nodeType":"167","messageId":"168","endLine":60,"endColumn":24},{"ruleId":"165","severity":1,"message":"171","line":61,"column":12,"nodeType":"167","messageId":"168","endLine":61,"endColumn":23},{"ruleId":"165","severity":1,"message":"172","line":61,"column":24,"nodeType":"167","messageId":"168","endLine":61,"endColumn":38},{"ruleId":"165","severity":1,"message":"173","line":62,"column":12,"nodeType":"167","messageId":"168","endLine":62,"endColumn":21},{"ruleId":"165","severity":1,"message":"174","line":62,"column":23,"nodeType":"167","messageId":"168","endLine":62,"endColumn":35},{"ruleId":"165","severity":1,"message":"175","line":63,"column":12,"nodeType":"167","messageId":"168","endLine":63,"endColumn":19},{"ruleId":"165","severity":1,"message":"176","line":63,"column":21,"nodeType":"167","messageId":"168","endLine":63,"endColumn":31},{"ruleId":"165","severity":1,"message":"177","line":64,"column":12,"nodeType":"167","messageId":"168","endLine":64,"endColumn":29},{"ruleId":"165","severity":1,"message":"178","line":64,"column":30,"nodeType":"167","messageId":"168","endLine":64,"endColumn":50},{"ruleId":"165","severity":1,"message":"179","line":65,"column":12,"nodeType":"167","messageId":"168","endLine":65,"endColumn":21},{"ruleId":"165","severity":1,"message":"180","line":65,"column":23,"nodeType":"167","messageId":"168","endLine":65,"endColumn":35},{"ruleId":"165","severity":1,"message":"181","line":131,"column":18,"nodeType":"167","messageId":"168","endLine":131,"endColumn":22},{"ruleId":"165","severity":1,"message":"182","line":3,"column":17,"nodeType":"167","messageId":"168","endLine":3,"endColumn":24},{"ruleId":"165","severity":1,"message":"183","line":68,"column":17,"nodeType":"167","messageId":"168","endLine":68,"endColumn":21},{"ruleId":"184","severity":1,"message":"185","line":108,"column":17,"nodeType":"167","messageId":"186","endLine":108,"endColumn":24},{"ruleId":"187","severity":1,"message":"188","line":115,"column":20,"nodeType":"189","messageId":"190","endLine":115,"endColumn":22},{"ruleId":"191","severity":1,"message":"192","line":215,"column":46,"nodeType":"193","messageId":"194","endLine":215,"endColumn":66},{"ruleId":"184","severity":1,"message":"195","line":217,"column":13,"nodeType":"167","messageId":"186","endLine":217,"endColumn":18},{"ruleId":"165","severity":1,"message":"196","line":261,"column":13,"nodeType":"167","messageId":"168","endLine":261,"endColumn":23},{"ruleId":"197","severity":1,"message":"198","line":265,"column":7,"nodeType":"199","endLine":265,"endColumn":28,"suggestions":"200"},{"ruleId":"197","severity":1,"message":"201","line":285,"column":7,"nodeType":"199","endLine":285,"endColumn":28,"suggestions":"202"},{"ruleId":"184","severity":1,"message":"203","line":327,"column":25,"nodeType":"167","messageId":"186","endLine":327,"endColumn":36},{"ruleId":"184","severity":1,"message":"203","line":329,"column":25,"nodeType":"167","messageId":"186","endLine":329,"endColumn":36},{"ruleId":"197","severity":1,"message":"204","line":341,"column":7,"nodeType":"199","endLine":341,"endColumn":50,"suggestions":"205"},{"ruleId":"184","severity":1,"message":"203","line":357,"column":25,"nodeType":"167","messageId":"186","endLine":357,"endColumn":36},{"ruleId":"197","severity":1,"message":"206","line":365,"column":7,"nodeType":"199","endLine":365,"endColumn":65,"suggestions":"207"},{"ruleId":"208","severity":1,"message":"209","line":37,"column":7,"nodeType":"210","messageId":"211","endLine":41,"endColumn":15},"no-native-reassign",["212"],"no-negated-in-lhs",["213"],"no-unused-vars","'Charts' is defined but never used.","Identifier","unusedVar","'activeCountry' is assigned a value but never used.","'completeData' is assigned a value but never used.","'countryList' is assigned a value but never used.","'setcountryList' is assigned a value but never used.","'startDate' is assigned a value but never used.","'setStartDate' is assigned a value but never used.","'endDate' is assigned a value but never used.","'setEndDate' is assigned a value but never used.","'selectedCountries' is assigned a value but never used.","'setSelectedCountries' is assigned a value but never used.","'WorldData' is assigned a value but never used.","'setWorldData' is assigned a value but never used.","'func' is defined but never used.","'plugins' is defined but never used.","'goin' is assigned a value but never used.","no-redeclare","'showing' is already defined.","redeclared","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'c'.","ArrowFunctionExpression","unsafeRefs","'index' is already defined.","'init_Chart' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'completeData'. Either include it or remove the dependency array.","ArrayExpression",["214"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["215"],"'CountryData' is already defined.","React Hook useEffect has missing dependencies: 'completeData', 'props.activeCountry', 'props.activeLegend', 'props.endDate', 'props.lastUpdate', 'props.startDate', and 'step'. Either include them or remove the dependency array.",["216"],"React Hook useEffect has missing dependencies: 'completeData' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["217"],"no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","no-global-assign","no-unsafe-negation",{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},"Update the dependencies array to be: [completeData, props.completeData]",{"range":"226","text":"227"},"Update the dependencies array to be: [props, props.activeCountry]",{"range":"228","text":"229"},"Update the dependencies array to be: [props.selectedCountries, props.WorldData, props.activeCountry, props.activeLegend, props.startDate, props.endDate, props.lastUpdate, completeData, step]",{"range":"230","text":"231"},"Update the dependencies array to be: [props.activeLegend, props.startDate, props.endDate, step, props, completeData]",{"range":"232","text":"233"},[8567,8588],"[completeData, props.completeData]",[9591,9612],"[props, props.activeCountry]",[11830,11873],"[props.selectedCountries, props.WorldData, props.activeCountry, props.activeLegend, props.startDate, props.endDate, props.lastUpdate, completeData, step]",[13086,13144],"[props.activeLegend, props.startDate, props.endDate, step, props, completeData]"]